//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Opal.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> CommonStorage
    /// </summary>
    public sealed class CommonStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> CommonStorage Constructor
        /// </summary>
        public CommonStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Common", "CreatedCollectionCount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Opal.NetApi.Generated.Model.up_data_structs.CollectionId)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Common", "DestroyedCollectionCount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Opal.NetApi.Generated.Model.up_data_structs.CollectionId)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Common", "CollectionById"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Opal.NetApi.Generated.Model.up_data_structs.CollectionId), typeof(Opal.NetApi.Generated.Model.up_data_structs.Collection)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Common", "CollectionProperties"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Opal.NetApi.Generated.Model.up_data_structs.CollectionId), typeof(Opal.NetApi.Generated.Model.up_data_structs.PropertiesT1)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Common", "CollectionPropertyPermissions"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Opal.NetApi.Generated.Model.up_data_structs.CollectionId), typeof(Opal.NetApi.Generated.Model.up_data_structs.PropertiesMapT2)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Common", "AdminAmount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Opal.NetApi.Generated.Model.up_data_structs.CollectionId), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Common", "IsAdmin"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Opal.NetApi.Generated.Model.up_data_structs.CollectionId, Opal.NetApi.Generated.Model.pallet_evm.account.EnumBasicCrossAccountIdRepr>), typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Common", "Allowlist"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Opal.NetApi.Generated.Model.up_data_structs.CollectionId, Opal.NetApi.Generated.Model.pallet_evm.account.EnumBasicCrossAccountIdRepr>), typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
        }
        
        /// <summary>
        /// >> CreatedCollectionCountParams
        ///  Storage of the count of created collections. Essentially contains the last collection ID.
        /// </summary>
        public static string CreatedCollectionCountParams()
        {
            return RequestGenerator.GetStorage("Common", "CreatedCollectionCount", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CreatedCollectionCountDefault
        /// Default value as hex string
        /// </summary>
        public static string CreatedCollectionCountDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> CreatedCollectionCount
        ///  Storage of the count of created collections. Essentially contains the last collection ID.
        /// </summary>
        public async Task<Opal.NetApi.Generated.Model.up_data_structs.CollectionId> CreatedCollectionCount(string blockhash, CancellationToken token)
        {
            string parameters = CommonStorage.CreatedCollectionCountParams();
            var result = await _client.GetStorageAsync<Opal.NetApi.Generated.Model.up_data_structs.CollectionId>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DestroyedCollectionCountParams
        ///  Storage of the count of deleted collections.
        /// </summary>
        public static string DestroyedCollectionCountParams()
        {
            return RequestGenerator.GetStorage("Common", "DestroyedCollectionCount", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> DestroyedCollectionCountDefault
        /// Default value as hex string
        /// </summary>
        public static string DestroyedCollectionCountDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> DestroyedCollectionCount
        ///  Storage of the count of deleted collections.
        /// </summary>
        public async Task<Opal.NetApi.Generated.Model.up_data_structs.CollectionId> DestroyedCollectionCount(string blockhash, CancellationToken token)
        {
            string parameters = CommonStorage.DestroyedCollectionCountParams();
            var result = await _client.GetStorageAsync<Opal.NetApi.Generated.Model.up_data_structs.CollectionId>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CollectionByIdParams
        ///  Storage of collection info.
        /// </summary>
        public static string CollectionByIdParams(Opal.NetApi.Generated.Model.up_data_structs.CollectionId key)
        {
            return RequestGenerator.GetStorage("Common", "CollectionById", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CollectionByIdDefault
        /// Default value as hex string
        /// </summary>
        public static string CollectionByIdDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CollectionById
        ///  Storage of collection info.
        /// </summary>
        public async Task<Opal.NetApi.Generated.Model.up_data_structs.Collection> CollectionById(Opal.NetApi.Generated.Model.up_data_structs.CollectionId key, string blockhash, CancellationToken token)
        {
            string parameters = CommonStorage.CollectionByIdParams(key);
            var result = await _client.GetStorageAsync<Opal.NetApi.Generated.Model.up_data_structs.Collection>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CollectionPropertiesParams
        ///  Storage of collection properties.
        /// </summary>
        public static string CollectionPropertiesParams(Opal.NetApi.Generated.Model.up_data_structs.CollectionId key)
        {
            return RequestGenerator.GetStorage("Common", "CollectionProperties", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CollectionPropertiesDefault
        /// Default value as hex string
        /// </summary>
        public static string CollectionPropertiesDefault()
        {
            return "0x000000000000000000";
        }
        
        /// <summary>
        /// >> CollectionProperties
        ///  Storage of collection properties.
        /// </summary>
        public async Task<Opal.NetApi.Generated.Model.up_data_structs.PropertiesT1> CollectionProperties(Opal.NetApi.Generated.Model.up_data_structs.CollectionId key, string blockhash, CancellationToken token)
        {
            string parameters = CommonStorage.CollectionPropertiesParams(key);
            var result = await _client.GetStorageAsync<Opal.NetApi.Generated.Model.up_data_structs.PropertiesT1>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CollectionPropertyPermissionsParams
        ///  Storage of token property permissions of a collection.
        /// </summary>
        public static string CollectionPropertyPermissionsParams(Opal.NetApi.Generated.Model.up_data_structs.CollectionId key)
        {
            return RequestGenerator.GetStorage("Common", "CollectionPropertyPermissions", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CollectionPropertyPermissionsDefault
        /// Default value as hex string
        /// </summary>
        public static string CollectionPropertyPermissionsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CollectionPropertyPermissions
        ///  Storage of token property permissions of a collection.
        /// </summary>
        public async Task<Opal.NetApi.Generated.Model.up_data_structs.PropertiesMapT2> CollectionPropertyPermissions(Opal.NetApi.Generated.Model.up_data_structs.CollectionId key, string blockhash, CancellationToken token)
        {
            string parameters = CommonStorage.CollectionPropertyPermissionsParams(key);
            var result = await _client.GetStorageAsync<Opal.NetApi.Generated.Model.up_data_structs.PropertiesMapT2>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AdminAmountParams
        ///  Storage of the amount of collection admins.
        /// </summary>
        public static string AdminAmountParams(Opal.NetApi.Generated.Model.up_data_structs.CollectionId key)
        {
            return RequestGenerator.GetStorage("Common", "AdminAmount", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AdminAmountDefault
        /// Default value as hex string
        /// </summary>
        public static string AdminAmountDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> AdminAmount
        ///  Storage of the amount of collection admins.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> AdminAmount(Opal.NetApi.Generated.Model.up_data_structs.CollectionId key, string blockhash, CancellationToken token)
        {
            string parameters = CommonStorage.AdminAmountParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> IsAdminParams
        ///  List of collection admins.
        /// </summary>
        public static string IsAdminParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Opal.NetApi.Generated.Model.up_data_structs.CollectionId, Opal.NetApi.Generated.Model.pallet_evm.account.EnumBasicCrossAccountIdRepr> key)
        {
            return RequestGenerator.GetStorage("Common", "IsAdmin", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> IsAdminDefault
        /// Default value as hex string
        /// </summary>
        public static string IsAdminDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> IsAdmin
        ///  List of collection admins.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> IsAdmin(Substrate.NetApi.Model.Types.Base.BaseTuple<Opal.NetApi.Generated.Model.up_data_structs.CollectionId, Opal.NetApi.Generated.Model.pallet_evm.account.EnumBasicCrossAccountIdRepr> key, string blockhash, CancellationToken token)
        {
            string parameters = CommonStorage.IsAdminParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AllowlistParams
        ///  Allowlisted collection users.
        /// </summary>
        public static string AllowlistParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Opal.NetApi.Generated.Model.up_data_structs.CollectionId, Opal.NetApi.Generated.Model.pallet_evm.account.EnumBasicCrossAccountIdRepr> key)
        {
            return RequestGenerator.GetStorage("Common", "Allowlist", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> AllowlistDefault
        /// Default value as hex string
        /// </summary>
        public static string AllowlistDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Allowlist
        ///  Allowlisted collection users.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> Allowlist(Substrate.NetApi.Model.Types.Base.BaseTuple<Opal.NetApi.Generated.Model.up_data_structs.CollectionId, Opal.NetApi.Generated.Model.pallet_evm.account.EnumBasicCrossAccountIdRepr> key, string blockhash, CancellationToken token)
        {
            string parameters = CommonStorage.AllowlistParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DummyStorageValueParams
        ///  Not used by code, exists only to provide some types to metadata.
        /// </summary>
        public static string DummyStorageValueParams()
        {
            return RequestGenerator.GetStorage("Common", "DummyStorageValue", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> DummyStorageValueDefault
        /// Default value as hex string
        /// </summary>
        public static string DummyStorageValueDefault()
        {
            return "0x00";
        }
    }
    
    /// <summary>
    /// >> CommonCalls
    /// </summary>
    public sealed class CommonCalls
    {
    }
    
    /// <summary>
    /// >> CommonConstants
    /// </summary>
    public sealed class CommonConstants
    {
        
        /// <summary>
        /// >> CollectionCreationPrice
        ///  Set price to create a collection.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 CollectionCreationPrice()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0000C84E676DC11B0000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> ContractAddress
        ///  Address under which the CollectionHelper contract would be available.
        /// </summary>
        public Opal.NetApi.Generated.Model.primitive_types.H160 ContractAddress()
        {
            var result = new Opal.NetApi.Generated.Model.primitive_types.H160();
            result.Create("0x6C4E9FE1AE37A41E93CEE429E8E1881ABDCBB54F");
            return result;
        }
        
        /// <summary>
        /// >> collection_admins_limit
        ///  Maximum admins per collection.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 collection_admins_limit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x05000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> CommonErrors
    /// </summary>
    public enum CommonErrors
    {
        
        /// <summary>
        /// >> CollectionNotFound
        /// This collection does not exist.
        /// </summary>
        CollectionNotFound,
        
        /// <summary>
        /// >> MustBeTokenOwner
        /// Sender parameter and item owner must be equal.
        /// </summary>
        MustBeTokenOwner,
        
        /// <summary>
        /// >> NoPermission
        /// No permission to perform action
        /// </summary>
        NoPermission,
        
        /// <summary>
        /// >> CantDestroyNotEmptyCollection
        /// Destroying only empty collections is allowed
        /// </summary>
        CantDestroyNotEmptyCollection,
        
        /// <summary>
        /// >> PublicMintingNotAllowed
        /// Collection is not in mint mode.
        /// </summary>
        PublicMintingNotAllowed,
        
        /// <summary>
        /// >> AddressNotInAllowlist
        /// Address is not in allow list.
        /// </summary>
        AddressNotInAllowlist,
        
        /// <summary>
        /// >> CollectionNameLimitExceeded
        /// Collection name can not be longer than 63 char.
        /// </summary>
        CollectionNameLimitExceeded,
        
        /// <summary>
        /// >> CollectionDescriptionLimitExceeded
        /// Collection description can not be longer than 255 char.
        /// </summary>
        CollectionDescriptionLimitExceeded,
        
        /// <summary>
        /// >> CollectionTokenPrefixLimitExceeded
        /// Token prefix can not be longer than 15 char.
        /// </summary>
        CollectionTokenPrefixLimitExceeded,
        
        /// <summary>
        /// >> TotalCollectionsLimitExceeded
        /// Total collections bound exceeded.
        /// </summary>
        TotalCollectionsLimitExceeded,
        
        /// <summary>
        /// >> CollectionAdminCountExceeded
        /// Exceeded max admin count
        /// </summary>
        CollectionAdminCountExceeded,
        
        /// <summary>
        /// >> CollectionLimitBoundsExceeded
        /// Collection limit bounds per collection exceeded
        /// </summary>
        CollectionLimitBoundsExceeded,
        
        /// <summary>
        /// >> OwnerPermissionsCantBeReverted
        /// Tried to enable permissions which are only permitted to be disabled
        /// </summary>
        OwnerPermissionsCantBeReverted,
        
        /// <summary>
        /// >> TransferNotAllowed
        /// Collection settings not allowing items transferring
        /// </summary>
        TransferNotAllowed,
        
        /// <summary>
        /// >> AccountTokenLimitExceeded
        /// Account token limit exceeded per collection
        /// </summary>
        AccountTokenLimitExceeded,
        
        /// <summary>
        /// >> CollectionTokenLimitExceeded
        /// Collection token limit exceeded
        /// </summary>
        CollectionTokenLimitExceeded,
        
        /// <summary>
        /// >> MetadataFlagFrozen
        /// Metadata flag frozen
        /// </summary>
        MetadataFlagFrozen,
        
        /// <summary>
        /// >> TokenNotFound
        /// Item does not exist
        /// </summary>
        TokenNotFound,
        
        /// <summary>
        /// >> TokenValueTooLow
        /// Item is balance not enough
        /// </summary>
        TokenValueTooLow,
        
        /// <summary>
        /// >> ApprovedValueTooLow
        /// Requested value is more than the approved
        /// </summary>
        ApprovedValueTooLow,
        
        /// <summary>
        /// >> CantApproveMoreThanOwned
        /// Tried to approve more than owned
        /// </summary>
        CantApproveMoreThanOwned,
        
        /// <summary>
        /// >> AddressIsNotEthMirror
        /// Only spending from eth mirror could be approved
        /// </summary>
        AddressIsNotEthMirror,
        
        /// <summary>
        /// >> AddressIsZero
        /// Can't transfer tokens to ethereum zero address
        /// </summary>
        AddressIsZero,
        
        /// <summary>
        /// >> UnsupportedOperation
        /// The operation is not supported
        /// </summary>
        UnsupportedOperation,
        
        /// <summary>
        /// >> NotSufficientFounds
        /// Insufficient funds to perform an action
        /// </summary>
        NotSufficientFounds,
        
        /// <summary>
        /// >> UserIsNotAllowedToNest
        /// User does not satisfy the nesting rule
        /// </summary>
        UserIsNotAllowedToNest,
        
        /// <summary>
        /// >> SourceCollectionIsNotAllowedToNest
        /// Only tokens from specific collections may nest tokens under this one
        /// </summary>
        SourceCollectionIsNotAllowedToNest,
        
        /// <summary>
        /// >> CollectionFieldSizeExceeded
        /// Tried to store more data than allowed in collection field
        /// </summary>
        CollectionFieldSizeExceeded,
        
        /// <summary>
        /// >> NoSpaceForProperty
        /// Tried to store more property data than allowed
        /// </summary>
        NoSpaceForProperty,
        
        /// <summary>
        /// >> PropertyLimitReached
        /// Tried to store more property keys than allowed
        /// </summary>
        PropertyLimitReached,
        
        /// <summary>
        /// >> PropertyKeyIsTooLong
        /// Property key is too long
        /// </summary>
        PropertyKeyIsTooLong,
        
        /// <summary>
        /// >> InvalidCharacterInPropertyKey
        /// Only ASCII letters, digits, and symbols `_`, `-`, and `.` are allowed
        /// </summary>
        InvalidCharacterInPropertyKey,
        
        /// <summary>
        /// >> EmptyPropertyKey
        /// Empty property keys are forbidden
        /// </summary>
        EmptyPropertyKey,
        
        /// <summary>
        /// >> CollectionIsExternal
        /// Tried to access an external collection with an internal API
        /// </summary>
        CollectionIsExternal,
        
        /// <summary>
        /// >> CollectionIsInternal
        /// Tried to access an internal collection with an external API
        /// </summary>
        CollectionIsInternal,
        
        /// <summary>
        /// >> ConfirmSponsorshipFail
        /// This address is not set as sponsor, use setCollectionSponsor first.
        /// </summary>
        ConfirmSponsorshipFail,
        
        /// <summary>
        /// >> UserIsNotCollectionAdmin
        /// The user is not an administrator.
        /// </summary>
        UserIsNotCollectionAdmin,
        
        /// <summary>
        /// >> FungibleItemsHaveNoId
        /// Fungible tokens hold no ID, and the default value of TokenId for a fungible collection is 0.
        /// </summary>
        FungibleItemsHaveNoId,
        
        /// <summary>
        /// >> NotFungibleDataUsedToMintFungibleCollectionToken
        /// Not Fungible item data used to mint in Fungible collection.
        /// </summary>
        NotFungibleDataUsedToMintFungibleCollectionToken,
    }
}
