//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace PolkadotAssetHub.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> ToKusamaXcmRouterStorage
    /// </summary>
    public sealed class ToKusamaXcmRouterStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> ToKusamaXcmRouterStorage Constructor
        /// </summary>
        public ToKusamaXcmRouterStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ToKusamaXcmRouter", "Bridge"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(PolkadotAssetHub.NetApi.Generated.Model.bp_xcm_bridge_hub_router.BridgeState)));
        }
        
        /// <summary>
        /// >> BridgeParams
        ///  Bridge that we are using.
        /// 
        ///  **bridges-v1** assumptions: all outbound messages through this router are using single lane
        ///  and to single remote consensus. If there is some other remote consensus that uses the same
        ///  bridge hub, the separate pallet instance shall be used, In `v2` we'll have all required
        ///  primitives (lane-id aka bridge-id, derived from XCM locations) to support multiple  bridges
        ///  by the same pallet instance.
        /// </summary>
        public static string BridgeParams()
        {
            return RequestGenerator.GetStorage("ToKusamaXcmRouter", "Bridge", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> BridgeDefault
        /// Default value as hex string
        /// </summary>
        public static string BridgeDefault()
        {
            return "0x000064A7B3B6E00D000000000000000000";
        }
        
        /// <summary>
        /// >> Bridge
        ///  Bridge that we are using.
        /// 
        ///  **bridges-v1** assumptions: all outbound messages through this router are using single lane
        ///  and to single remote consensus. If there is some other remote consensus that uses the same
        ///  bridge hub, the separate pallet instance shall be used, In `v2` we'll have all required
        ///  primitives (lane-id aka bridge-id, derived from XCM locations) to support multiple  bridges
        ///  by the same pallet instance.
        /// </summary>
        public async Task<PolkadotAssetHub.NetApi.Generated.Model.bp_xcm_bridge_hub_router.BridgeState> Bridge(string blockhash, CancellationToken token)
        {
            string parameters = ToKusamaXcmRouterStorage.BridgeParams();
            var result = await _client.GetStorageAsync<PolkadotAssetHub.NetApi.Generated.Model.bp_xcm_bridge_hub_router.BridgeState>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> ToKusamaXcmRouterCalls
    /// </summary>
    public sealed class ToKusamaXcmRouterCalls
    {
        
        /// <summary>
        /// >> report_bridge_status
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ReportBridgeStatus(PolkadotAssetHub.NetApi.Generated.Model.primitive_types.H256 bridge_id, Substrate.NetApi.Model.Types.Primitive.Bool is_congested)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(bridge_id.Encode());
            byteArray.AddRange(is_congested.Encode());
            return new Method(34, "ToKusamaXcmRouter", 0, "report_bridge_status", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> ToKusamaXcmRouterConstants
    /// </summary>
    public sealed class ToKusamaXcmRouterConstants
    {
    }
}
