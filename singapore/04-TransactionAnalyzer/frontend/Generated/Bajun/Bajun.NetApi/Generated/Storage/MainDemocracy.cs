//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Bajun.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> DemocracyStorage
    /// </summary>
    public sealed class DemocracyStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> DemocracyStorage Constructor
        /// </summary>
        public DemocracyStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Democracy", "PublicPropCount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Democracy", "PublicProps"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Bajun.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT47)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Democracy", "DepositOf"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bajun.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT48, Substrate.NetApi.Model.Types.Primitive.U128>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Democracy", "ReferendumCount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Democracy", "LowestUnbaked"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Democracy", "ReferendumInfoOf"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Bajun.NetApi.Generated.Model.pallet_democracy.types.EnumReferendumInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Democracy", "VotingOf"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Bajun.NetApi.Generated.Model.pallet_democracy.vote.EnumVoting)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Democracy", "LastTabledWasExternal"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Democracy", "NextExternal"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bajun.NetApi.Generated.Model.frame_support.traits.preimages.EnumBounded, Bajun.NetApi.Generated.Model.pallet_democracy.vote_threshold.EnumVoteThreshold>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Democracy", "Blacklist"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Bajun.NetApi.Generated.Model.primitive_types.H256), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Bajun.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT48>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Democracy", "Cancellations"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Bajun.NetApi.Generated.Model.primitive_types.H256), typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Democracy", "MetadataOf"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Bajun.NetApi.Generated.Model.pallet_democracy.types.EnumMetadataOwner), typeof(Bajun.NetApi.Generated.Model.primitive_types.H256)));
        }
        
        /// <summary>
        /// >> PublicPropCountParams
        ///  The number of (public) proposals that have been made so far.
        /// </summary>
        public static string PublicPropCountParams()
        {
            return RequestGenerator.GetStorage("Democracy", "PublicPropCount", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> PublicPropCountDefault
        /// Default value as hex string
        /// </summary>
        public static string PublicPropCountDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> PublicPropCount
        ///  The number of (public) proposals that have been made so far.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> PublicPropCount(string blockhash, CancellationToken token)
        {
            string parameters = DemocracyStorage.PublicPropCountParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PublicPropsParams
        ///  The public proposals. Unsorted. The second item is the proposal.
        /// </summary>
        public static string PublicPropsParams()
        {
            return RequestGenerator.GetStorage("Democracy", "PublicProps", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> PublicPropsDefault
        /// Default value as hex string
        /// </summary>
        public static string PublicPropsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PublicProps
        ///  The public proposals. Unsorted. The second item is the proposal.
        /// </summary>
        public async Task<Bajun.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT47> PublicProps(string blockhash, CancellationToken token)
        {
            string parameters = DemocracyStorage.PublicPropsParams();
            var result = await _client.GetStorageAsync<Bajun.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT47>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DepositOfParams
        ///  Those who have locked a deposit.
        /// 
        ///  TWOX-NOTE: Safe, as increasing integer keys are safe.
        /// </summary>
        public static string DepositOfParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Democracy", "DepositOf", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> DepositOfDefault
        /// Default value as hex string
        /// </summary>
        public static string DepositOfDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> DepositOf
        ///  Those who have locked a deposit.
        /// 
        ///  TWOX-NOTE: Safe, as increasing integer keys are safe.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Bajun.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT48, Substrate.NetApi.Model.Types.Primitive.U128>> DepositOf(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = DemocracyStorage.DepositOfParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Bajun.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT48, Substrate.NetApi.Model.Types.Primitive.U128>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ReferendumCountParams
        ///  The next free referendum index, aka the number of referenda started so far.
        /// </summary>
        public static string ReferendumCountParams()
        {
            return RequestGenerator.GetStorage("Democracy", "ReferendumCount", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ReferendumCountDefault
        /// Default value as hex string
        /// </summary>
        public static string ReferendumCountDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> ReferendumCount
        ///  The next free referendum index, aka the number of referenda started so far.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> ReferendumCount(string blockhash, CancellationToken token)
        {
            string parameters = DemocracyStorage.ReferendumCountParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LowestUnbakedParams
        ///  The lowest referendum index representing an unbaked referendum. Equal to
        ///  `ReferendumCount` if there isn't a unbaked referendum.
        /// </summary>
        public static string LowestUnbakedParams()
        {
            return RequestGenerator.GetStorage("Democracy", "LowestUnbaked", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> LowestUnbakedDefault
        /// Default value as hex string
        /// </summary>
        public static string LowestUnbakedDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> LowestUnbaked
        ///  The lowest referendum index representing an unbaked referendum. Equal to
        ///  `ReferendumCount` if there isn't a unbaked referendum.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> LowestUnbaked(string blockhash, CancellationToken token)
        {
            string parameters = DemocracyStorage.LowestUnbakedParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ReferendumInfoOfParams
        ///  Information concerning any given referendum.
        /// 
        ///  TWOX-NOTE: SAFE as indexes are not under an attacker���s control.
        /// </summary>
        public static string ReferendumInfoOfParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Democracy", "ReferendumInfoOf", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ReferendumInfoOfDefault
        /// Default value as hex string
        /// </summary>
        public static string ReferendumInfoOfDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ReferendumInfoOf
        ///  Information concerning any given referendum.
        /// 
        ///  TWOX-NOTE: SAFE as indexes are not under an attacker���s control.
        /// </summary>
        public async Task<Bajun.NetApi.Generated.Model.pallet_democracy.types.EnumReferendumInfo> ReferendumInfoOf(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = DemocracyStorage.ReferendumInfoOfParams(key);
            var result = await _client.GetStorageAsync<Bajun.NetApi.Generated.Model.pallet_democracy.types.EnumReferendumInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> VotingOfParams
        ///  All votes for a particular voter. We store the balance for the number of votes that we
        ///  have recorded. The second item is the total amount of delegations, that will be added.
        /// 
        ///  TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway.
        /// </summary>
        public static string VotingOfParams(Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Democracy", "VotingOf", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> VotingOfDefault
        /// Default value as hex string
        /// </summary>
        public static string VotingOfDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "00000000000000000000000000000";
        }
        
        /// <summary>
        /// >> VotingOf
        ///  All votes for a particular voter. We store the balance for the number of votes that we
        ///  have recorded. The second item is the total amount of delegations, that will be added.
        /// 
        ///  TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway.
        /// </summary>
        public async Task<Bajun.NetApi.Generated.Model.pallet_democracy.vote.EnumVoting> VotingOf(Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = DemocracyStorage.VotingOfParams(key);
            var result = await _client.GetStorageAsync<Bajun.NetApi.Generated.Model.pallet_democracy.vote.EnumVoting>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LastTabledWasExternalParams
        ///  True if the last referendum tabled was submitted externally. False if it was a public
        ///  proposal.
        /// </summary>
        public static string LastTabledWasExternalParams()
        {
            return RequestGenerator.GetStorage("Democracy", "LastTabledWasExternal", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> LastTabledWasExternalDefault
        /// Default value as hex string
        /// </summary>
        public static string LastTabledWasExternalDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> LastTabledWasExternal
        ///  True if the last referendum tabled was submitted externally. False if it was a public
        ///  proposal.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> LastTabledWasExternal(string blockhash, CancellationToken token)
        {
            string parameters = DemocracyStorage.LastTabledWasExternalParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NextExternalParams
        ///  The referendum to be tabled whenever it would be valid to table an external proposal.
        ///  This happens when a referendum needs to be tabled and one of two conditions are met:
        ///  - `LastTabledWasExternal` is `false`; or
        ///  - `PublicProps` is empty.
        /// </summary>
        public static string NextExternalParams()
        {
            return RequestGenerator.GetStorage("Democracy", "NextExternal", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextExternalDefault
        /// Default value as hex string
        /// </summary>
        public static string NextExternalDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> NextExternal
        ///  The referendum to be tabled whenever it would be valid to table an external proposal.
        ///  This happens when a referendum needs to be tabled and one of two conditions are met:
        ///  - `LastTabledWasExternal` is `false`; or
        ///  - `PublicProps` is empty.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Bajun.NetApi.Generated.Model.frame_support.traits.preimages.EnumBounded, Bajun.NetApi.Generated.Model.pallet_democracy.vote_threshold.EnumVoteThreshold>> NextExternal(string blockhash, CancellationToken token)
        {
            string parameters = DemocracyStorage.NextExternalParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Bajun.NetApi.Generated.Model.frame_support.traits.preimages.EnumBounded, Bajun.NetApi.Generated.Model.pallet_democracy.vote_threshold.EnumVoteThreshold>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BlacklistParams
        ///  A record of who vetoed what. Maps proposal hash to a possible existent block number
        ///  (until when it may not be resubmitted) and who vetoed it.
        /// </summary>
        public static string BlacklistParams(Bajun.NetApi.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("Democracy", "Blacklist", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BlacklistDefault
        /// Default value as hex string
        /// </summary>
        public static string BlacklistDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Blacklist
        ///  A record of who vetoed what. Maps proposal hash to a possible existent block number
        ///  (until when it may not be resubmitted) and who vetoed it.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Bajun.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT48>> Blacklist(Bajun.NetApi.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = DemocracyStorage.BlacklistParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Bajun.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT48>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CancellationsParams
        ///  Record of all proposals that have been subject to emergency cancellation.
        /// </summary>
        public static string CancellationsParams(Bajun.NetApi.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("Democracy", "Cancellations", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CancellationsDefault
        /// Default value as hex string
        /// </summary>
        public static string CancellationsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Cancellations
        ///  Record of all proposals that have been subject to emergency cancellation.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> Cancellations(Bajun.NetApi.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = DemocracyStorage.CancellationsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MetadataOfParams
        ///  General information concerning any proposal or referendum.
        ///  The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON
        ///  dump or IPFS hash of a JSON file.
        /// 
        ///  Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)
        ///  large preimages.
        /// </summary>
        public static string MetadataOfParams(Bajun.NetApi.Generated.Model.pallet_democracy.types.EnumMetadataOwner key)
        {
            return RequestGenerator.GetStorage("Democracy", "MetadataOf", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MetadataOfDefault
        /// Default value as hex string
        /// </summary>
        public static string MetadataOfDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MetadataOf
        ///  General information concerning any proposal or referendum.
        ///  The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON
        ///  dump or IPFS hash of a JSON file.
        /// 
        ///  Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)
        ///  large preimages.
        /// </summary>
        public async Task<Bajun.NetApi.Generated.Model.primitive_types.H256> MetadataOf(Bajun.NetApi.Generated.Model.pallet_democracy.types.EnumMetadataOwner key, string blockhash, CancellationToken token)
        {
            string parameters = DemocracyStorage.MetadataOfParams(key);
            var result = await _client.GetStorageAsync<Bajun.NetApi.Generated.Model.primitive_types.H256>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> DemocracyCalls
    /// </summary>
    public sealed class DemocracyCalls
    {
        
        /// <summary>
        /// >> propose
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Propose(Bajun.NetApi.Generated.Model.frame_support.traits.preimages.EnumBounded proposal, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal.Encode());
            byteArray.AddRange(value.Encode());
            return new Method(46, "Democracy", 0, "propose", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> second
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Second(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> proposal)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal.Encode());
            return new Method(46, "Democracy", 1, "second", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> vote
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Vote(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> ref_index, Bajun.NetApi.Generated.Model.pallet_democracy.vote.EnumAccountVote vote)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(ref_index.Encode());
            byteArray.AddRange(vote.Encode());
            return new Method(46, "Democracy", 2, "vote", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> emergency_cancel
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method EmergencyCancel(Substrate.NetApi.Model.Types.Primitive.U32 ref_index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(ref_index.Encode());
            return new Method(46, "Democracy", 3, "emergency_cancel", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> external_propose
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ExternalPropose(Bajun.NetApi.Generated.Model.frame_support.traits.preimages.EnumBounded proposal)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal.Encode());
            return new Method(46, "Democracy", 4, "external_propose", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> external_propose_majority
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ExternalProposeMajority(Bajun.NetApi.Generated.Model.frame_support.traits.preimages.EnumBounded proposal)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal.Encode());
            return new Method(46, "Democracy", 5, "external_propose_majority", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> external_propose_default
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ExternalProposeDefault(Bajun.NetApi.Generated.Model.frame_support.traits.preimages.EnumBounded proposal)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal.Encode());
            return new Method(46, "Democracy", 6, "external_propose_default", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> fast_track
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method FastTrack(Bajun.NetApi.Generated.Model.primitive_types.H256 proposal_hash, Substrate.NetApi.Model.Types.Primitive.U32 voting_period, Substrate.NetApi.Model.Types.Primitive.U32 delay)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal_hash.Encode());
            byteArray.AddRange(voting_period.Encode());
            byteArray.AddRange(delay.Encode());
            return new Method(46, "Democracy", 7, "fast_track", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> veto_external
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method VetoExternal(Bajun.NetApi.Generated.Model.primitive_types.H256 proposal_hash)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal_hash.Encode());
            return new Method(46, "Democracy", 8, "veto_external", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel_referendum
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CancelReferendum(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> ref_index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(ref_index.Encode());
            return new Method(46, "Democracy", 9, "cancel_referendum", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> delegate
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Delegate(Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress to, Bajun.NetApi.Generated.Model.pallet_democracy.conviction.EnumConviction conviction, Substrate.NetApi.Model.Types.Primitive.U128 balance)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(to.Encode());
            byteArray.AddRange(conviction.Encode());
            byteArray.AddRange(balance.Encode());
            return new Method(46, "Democracy", 10, "delegate", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> undelegate
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Undelegate()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(46, "Democracy", 11, "undelegate", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> clear_public_proposals
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClearPublicProposals()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(46, "Democracy", 12, "clear_public_proposals", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unlock
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Unlock(Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress target)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(target.Encode());
            return new Method(46, "Democracy", 13, "unlock", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_vote
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveVote(Substrate.NetApi.Model.Types.Primitive.U32 index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(index.Encode());
            return new Method(46, "Democracy", 14, "remove_vote", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_other_vote
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveOtherVote(Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress target, Substrate.NetApi.Model.Types.Primitive.U32 index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(target.Encode());
            byteArray.AddRange(index.Encode());
            return new Method(46, "Democracy", 15, "remove_other_vote", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> blacklist
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Blacklist(Bajun.NetApi.Generated.Model.primitive_types.H256 proposal_hash, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> maybe_ref_index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal_hash.Encode());
            byteArray.AddRange(maybe_ref_index.Encode());
            return new Method(46, "Democracy", 16, "blacklist", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel_proposal
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CancelProposal(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> prop_index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(prop_index.Encode());
            return new Method(46, "Democracy", 17, "cancel_proposal", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_metadata
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetMetadata(Bajun.NetApi.Generated.Model.pallet_democracy.types.EnumMetadataOwner owner, Substrate.NetApi.Model.Types.Base.BaseOpt<Bajun.NetApi.Generated.Model.primitive_types.H256> maybe_hash)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(owner.Encode());
            byteArray.AddRange(maybe_hash.Encode());
            return new Method(46, "Democracy", 18, "set_metadata", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> DemocracyConstants
    /// </summary>
    public sealed class DemocracyConstants
    {
        
        /// <summary>
        /// >> EnactmentPeriod
        ///  The period between a proposal being approved and enacted.
        /// 
        ///  It should generally be a little more than the unstake period to ensure that
        ///  voting stakers have an opportunity to remove themselves from the system in the case
        ///  where they are on the losing side of a vote.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 EnactmentPeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xC0890100");
            return result;
        }
        
        /// <summary>
        /// >> LaunchPeriod
        ///  How often (in blocks) new public referenda are launched.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 LaunchPeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xC0890100");
            return result;
        }
        
        /// <summary>
        /// >> VotingPeriod
        ///  How often (in blocks) to check for new votes.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 VotingPeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00270600");
            return result;
        }
        
        /// <summary>
        /// >> VoteLockingPeriod
        ///  The minimum period of vote locking.
        /// 
        ///  It should be no shorter than enactment period to ensure that in the case of an approval,
        ///  those successful voters are locked into the consequences that their votes entail.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 VoteLockingPeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xC0890100");
            return result;
        }
        
        /// <summary>
        /// >> MinimumDeposit
        ///  The minimum amount to be used as a deposit for a public referendum proposal.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinimumDeposit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00406352BFC601000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> InstantAllowed
        ///  Indicator for whether an emergency origin is even allowed to happen. Some chains may
        ///  want to set this permanently to `false`, others may want to condition it on things such
        ///  as an upgrade having happened recently.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool InstantAllowed()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.Bool();
            result.Create("0x01");
            return result;
        }
        
        /// <summary>
        /// >> FastTrackVotingPeriod
        ///  Minimum voting period allowed for a fast-track referendum.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 FastTrackVotingPeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xC0A80000");
            return result;
        }
        
        /// <summary>
        /// >> CooloffPeriod
        ///  Period in blocks where an external proposal may not be re-submitted after being vetoed.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 CooloffPeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00270600");
            return result;
        }
        
        /// <summary>
        /// >> MaxVotes
        ///  The maximum number of votes for an account.
        /// 
        ///  Also used to compute weight, an overly big value can
        ///  lead to extrinsic with very big weight: see `delegate` for instance.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxVotes()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxProposals
        ///  The maximum number of public proposals that can exist at any time.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxProposals()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxDeposits
        ///  The maximum number of deposits a public proposal may have at any time.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxDeposits()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxBlacklisted
        ///  The maximum number of items which can be blacklisted.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxBlacklisted()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> DemocracyErrors
    /// </summary>
    public enum DemocracyErrors
    {
        
        /// <summary>
        /// >> ValueLow
        /// Value too low
        /// </summary>
        ValueLow,
        
        /// <summary>
        /// >> ProposalMissing
        /// Proposal does not exist
        /// </summary>
        ProposalMissing,
        
        /// <summary>
        /// >> AlreadyCanceled
        /// Cannot cancel the same proposal twice
        /// </summary>
        AlreadyCanceled,
        
        /// <summary>
        /// >> DuplicateProposal
        /// Proposal already made
        /// </summary>
        DuplicateProposal,
        
        /// <summary>
        /// >> ProposalBlacklisted
        /// Proposal still blacklisted
        /// </summary>
        ProposalBlacklisted,
        
        /// <summary>
        /// >> NotSimpleMajority
        /// Next external proposal not simple majority
        /// </summary>
        NotSimpleMajority,
        
        /// <summary>
        /// >> InvalidHash
        /// Invalid hash
        /// </summary>
        InvalidHash,
        
        /// <summary>
        /// >> NoProposal
        /// No external proposal
        /// </summary>
        NoProposal,
        
        /// <summary>
        /// >> AlreadyVetoed
        /// Identity may not veto a proposal twice
        /// </summary>
        AlreadyVetoed,
        
        /// <summary>
        /// >> ReferendumInvalid
        /// Vote given for invalid referendum
        /// </summary>
        ReferendumInvalid,
        
        /// <summary>
        /// >> NoneWaiting
        /// No proposals waiting
        /// </summary>
        NoneWaiting,
        
        /// <summary>
        /// >> NotVoter
        /// The given account did not vote on the referendum.
        /// </summary>
        NotVoter,
        
        /// <summary>
        /// >> NoPermission
        /// The actor has no permission to conduct the action.
        /// </summary>
        NoPermission,
        
        /// <summary>
        /// >> AlreadyDelegating
        /// The account is already delegating.
        /// </summary>
        AlreadyDelegating,
        
        /// <summary>
        /// >> InsufficientFunds
        /// Too high a balance was provided that the account cannot afford.
        /// </summary>
        InsufficientFunds,
        
        /// <summary>
        /// >> NotDelegating
        /// The account is not currently delegating.
        /// </summary>
        NotDelegating,
        
        /// <summary>
        /// >> VotesExist
        /// The account currently has votes attached to it and the operation cannot succeed until
        /// these are removed, either through `unvote` or `reap_vote`.
        /// </summary>
        VotesExist,
        
        /// <summary>
        /// >> InstantNotAllowed
        /// The instant referendum origin is currently disallowed.
        /// </summary>
        InstantNotAllowed,
        
        /// <summary>
        /// >> Nonsense
        /// Delegation to oneself makes no sense.
        /// </summary>
        Nonsense,
        
        /// <summary>
        /// >> WrongUpperBound
        /// Invalid upper bound.
        /// </summary>
        WrongUpperBound,
        
        /// <summary>
        /// >> MaxVotesReached
        /// Maximum number of votes reached.
        /// </summary>
        MaxVotesReached,
        
        /// <summary>
        /// >> TooMany
        /// Maximum number of items reached.
        /// </summary>
        TooMany,
        
        /// <summary>
        /// >> VotingPeriodLow
        /// Voting period too low
        /// </summary>
        VotingPeriodLow,
        
        /// <summary>
        /// >> PreimageNotExist
        /// The preimage does not exist.
        /// </summary>
        PreimageNotExist,
    }
}
