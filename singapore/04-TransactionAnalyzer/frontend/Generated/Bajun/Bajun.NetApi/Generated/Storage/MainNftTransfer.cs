//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Bajun.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> NftTransferStorage
    /// </summary>
    public sealed class NftTransferStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> NftTransferStorage Constructor
        /// </summary>
        public NftTransferStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NftTransfer", "NftStatuses"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Bajun.NetApi.Generated.Model.primitive_types.H256>), typeof(Bajun.NetApi.Generated.Model.pallet_ajuna_nft_transfer.pallet.EnumNftStatus)));
        }
        
        /// <summary>
        /// >> NftStatusesParams
        /// </summary>
        public static string NftStatusesParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Bajun.NetApi.Generated.Model.primitive_types.H256> key)
        {
            return RequestGenerator.GetStorage("NftTransfer", "NftStatuses", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, key.Value);
        }
        
        /// <summary>
        /// >> NftStatusesDefault
        /// Default value as hex string
        /// </summary>
        public static string NftStatusesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> NftStatuses
        /// </summary>
        public async Task<Bajun.NetApi.Generated.Model.pallet_ajuna_nft_transfer.pallet.EnumNftStatus> NftStatuses(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Bajun.NetApi.Generated.Model.primitive_types.H256> key, string blockhash, CancellationToken token)
        {
            string parameters = NftTransferStorage.NftStatusesParams(key);
            var result = await _client.GetStorageAsync<Bajun.NetApi.Generated.Model.pallet_ajuna_nft_transfer.pallet.EnumNftStatus>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> NftTransferCalls
    /// </summary>
    public sealed class NftTransferCalls
    {
    }
    
    /// <summary>
    /// >> NftTransferConstants
    /// </summary>
    public sealed class NftTransferConstants
    {
        
        /// <summary>
        /// >> PalletId
        ///  The NFT-transfer's pallet id, used for deriving its sovereign account ID.
        /// </summary>
        public Bajun.NetApi.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new Bajun.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x616A2F6E66747472");
            return result;
        }
        
        /// <summary>
        /// >> KeyLimit
        ///  The maximum length of an attribute key.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 KeyLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x20000000");
            return result;
        }
        
        /// <summary>
        /// >> ValueLimit
        ///  The maximum length of an attribute value.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 ValueLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x40000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> NftTransferErrors
    /// </summary>
    public enum NftTransferErrors
    {
        
        /// <summary>
        /// >> EmptyIpfsUrl
        /// IPFS URL must not be an empty string.
        /// </summary>
        EmptyIpfsUrl,
        
        /// <summary>
        /// >> DuplicateItemCode
        /// Item code must be different to attribute codes.
        /// </summary>
        DuplicateItemCode,
        
        /// <summary>
        /// >> UnknownItem
        /// The given NFT item doesn't exist.
        /// </summary>
        UnknownItem,
        
        /// <summary>
        /// >> UnknownClaim
        /// The given claim doesn't exist.
        /// </summary>
        UnknownClaim,
        
        /// <summary>
        /// >> NftNotOwned
        /// The given NFT is not owned by the requester.
        /// </summary>
        NftNotOwned,
        
        /// <summary>
        /// >> NftOutsideOfChain
        /// The given NFT is currently outside of the chain, transfer it back before attempting a
        /// restore.
        /// </summary>
        NftOutsideOfChain,
        
        /// <summary>
        /// >> ItemRestoreFailure
        /// The process of restoring an NFT into an item has failed.
        /// </summary>
        ItemRestoreFailure,
    }
}
