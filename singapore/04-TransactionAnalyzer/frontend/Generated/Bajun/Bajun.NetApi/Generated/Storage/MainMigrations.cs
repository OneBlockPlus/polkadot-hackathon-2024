//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Bajun.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> MigrationsStorage
    /// </summary>
    public sealed class MigrationsStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> MigrationsStorage Constructor
        /// </summary>
        public MigrationsStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Migrations", "Cursor"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Bajun.NetApi.Generated.Model.pallet_migrations.EnumMigrationCursor)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Migrations", "Historic"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Bajun.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT17), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
        }
        
        /// <summary>
        /// >> CursorParams
        ///  The currently active migration to run and its cursor.
        /// 
        ///  `None` indicates that no migration is running.
        /// </summary>
        public static string CursorParams()
        {
            return RequestGenerator.GetStorage("Migrations", "Cursor", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CursorDefault
        /// Default value as hex string
        /// </summary>
        public static string CursorDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Cursor
        ///  The currently active migration to run and its cursor.
        /// 
        ///  `None` indicates that no migration is running.
        /// </summary>
        public async Task<Bajun.NetApi.Generated.Model.pallet_migrations.EnumMigrationCursor> Cursor(string blockhash, CancellationToken token)
        {
            string parameters = MigrationsStorage.CursorParams();
            var result = await _client.GetStorageAsync<Bajun.NetApi.Generated.Model.pallet_migrations.EnumMigrationCursor>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> HistoricParams
        ///  Set of all successfully executed migrations.
        /// 
        ///  This is used as blacklist, to not re-execute migrations that have not been removed from the
        ///  codebase yet. Governance can regularly clear this out via `clear_historic`.
        /// </summary>
        public static string HistoricParams(Bajun.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT17 key)
        {
            return RequestGenerator.GetStorage("Migrations", "Historic", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> HistoricDefault
        /// Default value as hex string
        /// </summary>
        public static string HistoricDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Historic
        ///  Set of all successfully executed migrations.
        /// 
        ///  This is used as blacklist, to not re-execute migrations that have not been removed from the
        ///  codebase yet. Governance can regularly clear this out via `clear_historic`.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> Historic(Bajun.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT17 key, string blockhash, CancellationToken token)
        {
            string parameters = MigrationsStorage.HistoricParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> MigrationsCalls
    /// </summary>
    public sealed class MigrationsCalls
    {
        
        /// <summary>
        /// >> force_set_cursor
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceSetCursor(Substrate.NetApi.Model.Types.Base.BaseOpt<Bajun.NetApi.Generated.Model.pallet_migrations.EnumMigrationCursor> cursor)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(cursor.Encode());
            return new Method(10, "Migrations", 0, "force_set_cursor", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_set_active_cursor
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceSetActiveCursor(Substrate.NetApi.Model.Types.Primitive.U32 index, Substrate.NetApi.Model.Types.Base.BaseOpt<Bajun.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT16> inner_cursor, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> started_at)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(index.Encode());
            byteArray.AddRange(inner_cursor.Encode());
            byteArray.AddRange(started_at.Encode());
            return new Method(10, "Migrations", 1, "force_set_active_cursor", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_onboard_mbms
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceOnboardMbms()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(10, "Migrations", 2, "force_onboard_mbms", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> clear_historic
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClearHistoric(Bajun.NetApi.Generated.Model.pallet_migrations.EnumHistoricCleanupSelector selector)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(selector.Encode());
            return new Method(10, "Migrations", 3, "clear_historic", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> MigrationsConstants
    /// </summary>
    public sealed class MigrationsConstants
    {
        
        /// <summary>
        /// >> CursorMaxLen
        ///  The maximal length of an encoded cursor.
        /// 
        ///  A good default needs to selected such that no migration will ever have a cursor with MEL
        ///  above this limit. This is statically checked in `integrity_test`.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 CursorMaxLen()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00000100");
            return result;
        }
        
        /// <summary>
        /// >> IdentifierMaxLen
        ///  The maximal length of an encoded identifier.
        /// 
        ///  A good default needs to selected such that no migration will ever have an identifier
        ///  with MEL above this limit. This is statically checked in `integrity_test`.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 IdentifierMaxLen()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00010000");
            return result;
        }
    }
    
    /// <summary>
    /// >> MigrationsErrors
    /// </summary>
    public enum MigrationsErrors
    {
        
        /// <summary>
        /// >> Ongoing
        /// The operation cannot complete since some MBMs are ongoing.
        /// </summary>
        Ongoing,
    }
}
