//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Bajun.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> AwesomeAvatarsStorage
    /// </summary>
    public sealed class AwesomeAvatarsStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> AwesomeAvatarsStorage Constructor
        /// </summary>
        public AwesomeAvatarsStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AwesomeAvatars", "Organizer"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AwesomeAvatars", "Treasurer"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Primitive.U16), typeof(Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AwesomeAvatars", "WhitelistedAccounts"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Bajun.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT51)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AwesomeAvatars", "CurrentSeasonStatus"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.season.SeasonStatus)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AwesomeAvatars", "Seasons"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Primitive.U16), typeof(Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.season.Season)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AwesomeAvatars", "SeasonMetas"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Primitive.U16), typeof(Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.season.SeasonMeta)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AwesomeAvatars", "SeasonSchedules"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Primitive.U16), typeof(Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.season.SeasonSchedule)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AwesomeAvatars", "SeasonTradeFilters"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Primitive.U16), typeof(Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.season.TradeFilters)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AwesomeAvatars", "SeasonUnlocks"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Primitive.U16), typeof(Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.config.UnlockConfigs)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AwesomeAvatars", "Treasury"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Primitive.U16), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AwesomeAvatars", "GlobalConfigs"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.config.GlobalConfig)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AwesomeAvatars", "Avatars"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Bajun.NetApi.Generated.Model.primitive_types.H256), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32, Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.avatar.Avatar>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AwesomeAvatars", "Owners"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U16>), typeof(Bajun.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT52)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AwesomeAvatars", "LockedAvatars"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Bajun.NetApi.Generated.Model.primitive_types.H256), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AwesomeAvatars", "CollectionId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AwesomeAvatars", "PlayerConfigs"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.account.PlayerConfig)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AwesomeAvatars", "PlayerSeasonConfigs"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U16>), typeof(Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.account.PlayerSeasonConfig)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AwesomeAvatars", "TradeStatsMap"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AwesomeAvatars", "SeasonStats"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32>), typeof(Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.account.SeasonInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AwesomeAvatars", "Trade"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, Bajun.NetApi.Generated.Model.primitive_types.H256>), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AwesomeAvatars", "ServiceAccount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AwesomeAvatars", "Preparation"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Bajun.NetApi.Generated.Model.primitive_types.H256), typeof(Bajun.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT10)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AwesomeAvatars", "TournamentRankers"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, Substrate.NetApi.Model.Types.Primitive.U32>), typeof(Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.avatar.tournament.AvatarRanker)));
        }
        
        /// <summary>
        /// >> OrganizerParams
        /// </summary>
        public static string OrganizerParams()
        {
            return RequestGenerator.GetStorage("AwesomeAvatars", "Organizer", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> OrganizerDefault
        /// Default value as hex string
        /// </summary>
        public static string OrganizerDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Organizer
        /// </summary>
        public async Task<Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32> Organizer(string blockhash, CancellationToken token)
        {
            string parameters = AwesomeAvatarsStorage.OrganizerParams();
            var result = await _client.GetStorageAsync<Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TreasurerParams
        /// </summary>
        public static string TreasurerParams(Substrate.NetApi.Model.Types.Primitive.U16 key)
        {
            return RequestGenerator.GetStorage("AwesomeAvatars", "Treasurer", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> TreasurerDefault
        /// Default value as hex string
        /// </summary>
        public static string TreasurerDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Treasurer
        /// </summary>
        public async Task<Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32> Treasurer(Substrate.NetApi.Model.Types.Primitive.U16 key, string blockhash, CancellationToken token)
        {
            string parameters = AwesomeAvatarsStorage.TreasurerParams(key);
            var result = await _client.GetStorageAsync<Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> WhitelistedAccountsParams
        ///  List of accounts allowed to transfer free mints.
        ///  A maximum of 3 different accounts can be on the list.
        /// </summary>
        public static string WhitelistedAccountsParams()
        {
            return RequestGenerator.GetStorage("AwesomeAvatars", "WhitelistedAccounts", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> WhitelistedAccountsDefault
        /// Default value as hex string
        /// </summary>
        public static string WhitelistedAccountsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> WhitelistedAccounts
        ///  List of accounts allowed to transfer free mints.
        ///  A maximum of 3 different accounts can be on the list.
        /// </summary>
        public async Task<Bajun.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT51> WhitelistedAccounts(string blockhash, CancellationToken token)
        {
            string parameters = AwesomeAvatarsStorage.WhitelistedAccountsParams();
            var result = await _client.GetStorageAsync<Bajun.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT51>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CurrentSeasonStatusParams
        /// </summary>
        public static string CurrentSeasonStatusParams()
        {
            return RequestGenerator.GetStorage("AwesomeAvatars", "CurrentSeasonStatus", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CurrentSeasonStatusDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrentSeasonStatusDefault()
        {
            return "0x000000000000000000";
        }
        
        /// <summary>
        /// >> CurrentSeasonStatus
        /// </summary>
        public async Task<Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.season.SeasonStatus> CurrentSeasonStatus(string blockhash, CancellationToken token)
        {
            string parameters = AwesomeAvatarsStorage.CurrentSeasonStatusParams();
            var result = await _client.GetStorageAsync<Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.season.SeasonStatus>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SeasonsParams
        ///  Storage for the seasons.
        /// </summary>
        public static string SeasonsParams(Substrate.NetApi.Model.Types.Primitive.U16 key)
        {
            return RequestGenerator.GetStorage("AwesomeAvatars", "Seasons", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SeasonsDefault
        /// Default value as hex string
        /// </summary>
        public static string SeasonsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Seasons
        ///  Storage for the seasons.
        /// </summary>
        public async Task<Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.season.Season> Seasons(Substrate.NetApi.Model.Types.Primitive.U16 key, string blockhash, CancellationToken token)
        {
            string parameters = AwesomeAvatarsStorage.SeasonsParams(key);
            var result = await _client.GetStorageAsync<Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.season.Season>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SeasonMetasParams
        ///  Storage for the season's metadata.
        /// </summary>
        public static string SeasonMetasParams(Substrate.NetApi.Model.Types.Primitive.U16 key)
        {
            return RequestGenerator.GetStorage("AwesomeAvatars", "SeasonMetas", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SeasonMetasDefault
        /// Default value as hex string
        /// </summary>
        public static string SeasonMetasDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SeasonMetas
        ///  Storage for the season's metadata.
        /// </summary>
        public async Task<Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.season.SeasonMeta> SeasonMetas(Substrate.NetApi.Model.Types.Primitive.U16 key, string blockhash, CancellationToken token)
        {
            string parameters = AwesomeAvatarsStorage.SeasonMetasParams(key);
            var result = await _client.GetStorageAsync<Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.season.SeasonMeta>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SeasonSchedulesParams
        ///  Storage for the season's schedules.
        /// </summary>
        public static string SeasonSchedulesParams(Substrate.NetApi.Model.Types.Primitive.U16 key)
        {
            return RequestGenerator.GetStorage("AwesomeAvatars", "SeasonSchedules", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SeasonSchedulesDefault
        /// Default value as hex string
        /// </summary>
        public static string SeasonSchedulesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SeasonSchedules
        ///  Storage for the season's schedules.
        /// </summary>
        public async Task<Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.season.SeasonSchedule> SeasonSchedules(Substrate.NetApi.Model.Types.Primitive.U16 key, string blockhash, CancellationToken token)
        {
            string parameters = AwesomeAvatarsStorage.SeasonSchedulesParams(key);
            var result = await _client.GetStorageAsync<Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.season.SeasonSchedule>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SeasonTradeFiltersParams
        ///  Storage for the season's trade filters.
        /// </summary>
        public static string SeasonTradeFiltersParams(Substrate.NetApi.Model.Types.Primitive.U16 key)
        {
            return RequestGenerator.GetStorage("AwesomeAvatars", "SeasonTradeFilters", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SeasonTradeFiltersDefault
        /// Default value as hex string
        /// </summary>
        public static string SeasonTradeFiltersDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SeasonTradeFilters
        ///  Storage for the season's trade filters.
        /// </summary>
        public async Task<Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.season.TradeFilters> SeasonTradeFilters(Substrate.NetApi.Model.Types.Primitive.U16 key, string blockhash, CancellationToken token)
        {
            string parameters = AwesomeAvatarsStorage.SeasonTradeFiltersParams(key);
            var result = await _client.GetStorageAsync<Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.season.TradeFilters>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SeasonUnlocksParams
        ///  Storage for the season's different unlock-ables.
        /// </summary>
        public static string SeasonUnlocksParams(Substrate.NetApi.Model.Types.Primitive.U16 key)
        {
            return RequestGenerator.GetStorage("AwesomeAvatars", "SeasonUnlocks", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SeasonUnlocksDefault
        /// Default value as hex string
        /// </summary>
        public static string SeasonUnlocksDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SeasonUnlocks
        ///  Storage for the season's different unlock-ables.
        /// </summary>
        public async Task<Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.config.UnlockConfigs> SeasonUnlocks(Substrate.NetApi.Model.Types.Primitive.U16 key, string blockhash, CancellationToken token)
        {
            string parameters = AwesomeAvatarsStorage.SeasonUnlocksParams(key);
            var result = await _client.GetStorageAsync<Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.config.UnlockConfigs>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TreasuryParams
        /// </summary>
        public static string TreasuryParams(Substrate.NetApi.Model.Types.Primitive.U16 key)
        {
            return RequestGenerator.GetStorage("AwesomeAvatars", "Treasury", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> TreasuryDefault
        /// Default value as hex string
        /// </summary>
        public static string TreasuryDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> Treasury
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> Treasury(Substrate.NetApi.Model.Types.Primitive.U16 key, string blockhash, CancellationToken token)
        {
            string parameters = AwesomeAvatarsStorage.TreasuryParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> GlobalConfigsParams
        /// </summary>
        public static string GlobalConfigsParams()
        {
            return RequestGenerator.GetStorage("AwesomeAvatars", "GlobalConfigs", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> GlobalConfigsDefault
        /// Default value as hex string
        /// </summary>
        public static string GlobalConfigsDefault()
        {
            return "0x000000000000000000000000000000000000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> GlobalConfigs
        /// </summary>
        public async Task<Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.config.GlobalConfig> GlobalConfigs(string blockhash, CancellationToken token)
        {
            string parameters = AwesomeAvatarsStorage.GlobalConfigsParams();
            var result = await _client.GetStorageAsync<Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.config.GlobalConfig>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AvatarsParams
        /// </summary>
        public static string AvatarsParams(Bajun.NetApi.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("AwesomeAvatars", "Avatars", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AvatarsDefault
        /// Default value as hex string
        /// </summary>
        public static string AvatarsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Avatars
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32, Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.avatar.Avatar>> Avatars(Bajun.NetApi.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = AwesomeAvatarsStorage.AvatarsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32, Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.avatar.Avatar>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OwnersParams
        /// </summary>
        public static string OwnersParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U16> key)
        {
            return RequestGenerator.GetStorage("AwesomeAvatars", "Owners", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, key.Value);
        }
        
        /// <summary>
        /// >> OwnersDefault
        /// Default value as hex string
        /// </summary>
        public static string OwnersDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Owners
        /// </summary>
        public async Task<Bajun.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT52> Owners(Substrate.NetApi.Model.Types.Base.BaseTuple<Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U16> key, string blockhash, CancellationToken token)
        {
            string parameters = AwesomeAvatarsStorage.OwnersParams(key);
            var result = await _client.GetStorageAsync<Bajun.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT52>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LockedAvatarsParams
        /// </summary>
        public static string LockedAvatarsParams(Bajun.NetApi.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("AwesomeAvatars", "LockedAvatars", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> LockedAvatarsDefault
        /// Default value as hex string
        /// </summary>
        public static string LockedAvatarsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> LockedAvatars
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> LockedAvatars(Bajun.NetApi.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = AwesomeAvatarsStorage.LockedAvatarsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CollectionIdParams
        /// </summary>
        public static string CollectionIdParams()
        {
            return RequestGenerator.GetStorage("AwesomeAvatars", "CollectionId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CollectionIdDefault
        /// Default value as hex string
        /// </summary>
        public static string CollectionIdDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CollectionId
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CollectionId(string blockhash, CancellationToken token)
        {
            string parameters = AwesomeAvatarsStorage.CollectionIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PlayerConfigsParams
        /// </summary>
        public static string PlayerConfigsParams(Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("AwesomeAvatars", "PlayerConfigs", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PlayerConfigsDefault
        /// Default value as hex string
        /// </summary>
        public static string PlayerConfigsDefault()
        {
            return "0x0000";
        }
        
        /// <summary>
        /// >> PlayerConfigs
        /// </summary>
        public async Task<Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.account.PlayerConfig> PlayerConfigs(Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = AwesomeAvatarsStorage.PlayerConfigsParams(key);
            var result = await _client.GetStorageAsync<Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.account.PlayerConfig>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PlayerSeasonConfigsParams
        /// </summary>
        public static string PlayerSeasonConfigsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U16> key)
        {
            return RequestGenerator.GetStorage("AwesomeAvatars", "PlayerSeasonConfigs", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, key.Value);
        }
        
        /// <summary>
        /// >> PlayerSeasonConfigsDefault
        /// Default value as hex string
        /// </summary>
        public static string PlayerSeasonConfigsDefault()
        {
            return "0x1900000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> PlayerSeasonConfigs
        /// </summary>
        public async Task<Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.account.PlayerSeasonConfig> PlayerSeasonConfigs(Substrate.NetApi.Model.Types.Base.BaseTuple<Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U16> key, string blockhash, CancellationToken token)
        {
            string parameters = AwesomeAvatarsStorage.PlayerSeasonConfigsParams(key);
            var result = await _client.GetStorageAsync<Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.account.PlayerSeasonConfig>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TradeStatsMapParams
        ///  This is only an intermediate storage that is being used during the multiblock runtime
        ///  migration of v5 to v6. It should be removed afterward.
        /// </summary>
        public static string TradeStatsMapParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("AwesomeAvatars", "TradeStatsMap", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, key.Value);
        }
        
        /// <summary>
        /// >> TradeStatsMapDefault
        /// Default value as hex string
        /// </summary>
        public static string TradeStatsMapDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> TradeStatsMap
        ///  This is only an intermediate storage that is being used during the multiblock runtime
        ///  migration of v5 to v6. It should be removed afterward.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>> TradeStatsMap(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = AwesomeAvatarsStorage.TradeStatsMapParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SeasonStatsParams
        /// </summary>
        public static string SeasonStatsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("AwesomeAvatars", "SeasonStats", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, key.Value);
        }
        
        /// <summary>
        /// >> SeasonStatsDefault
        /// Default value as hex string
        /// </summary>
        public static string SeasonStatsDefault()
        {
            return "0x0000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> SeasonStats
        /// </summary>
        public async Task<Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.account.SeasonInfo> SeasonStats(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = AwesomeAvatarsStorage.SeasonStatsParams(key);
            var result = await _client.GetStorageAsync<Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.account.SeasonInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TradeParams
        /// </summary>
        public static string TradeParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, Bajun.NetApi.Generated.Model.primitive_types.H256> key)
        {
            return RequestGenerator.GetStorage("AwesomeAvatars", "Trade", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, key.Value);
        }
        
        /// <summary>
        /// >> TradeDefault
        /// Default value as hex string
        /// </summary>
        public static string TradeDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Trade
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> Trade(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, Bajun.NetApi.Generated.Model.primitive_types.H256> key, string blockhash, CancellationToken token)
        {
            string parameters = AwesomeAvatarsStorage.TradeParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ServiceAccountParams
        /// </summary>
        public static string ServiceAccountParams()
        {
            return RequestGenerator.GetStorage("AwesomeAvatars", "ServiceAccount", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ServiceAccountDefault
        /// Default value as hex string
        /// </summary>
        public static string ServiceAccountDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ServiceAccount
        /// </summary>
        public async Task<Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32> ServiceAccount(string blockhash, CancellationToken token)
        {
            string parameters = AwesomeAvatarsStorage.ServiceAccountParams();
            var result = await _client.GetStorageAsync<Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PreparationParams
        /// </summary>
        public static string PreparationParams(Bajun.NetApi.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("AwesomeAvatars", "Preparation", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PreparationDefault
        /// Default value as hex string
        /// </summary>
        public static string PreparationDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Preparation
        /// </summary>
        public async Task<Bajun.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT10> Preparation(Bajun.NetApi.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = AwesomeAvatarsStorage.PreparationParams(key);
            var result = await _client.GetStorageAsync<Bajun.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT10>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TournamentRankersParams
        /// </summary>
        public static string TournamentRankersParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, Substrate.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("AwesomeAvatars", "TournamentRankers", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, key.Value);
        }
        
        /// <summary>
        /// >> TournamentRankersDefault
        /// Default value as hex string
        /// </summary>
        public static string TournamentRankersDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> TournamentRankers
        /// </summary>
        public async Task<Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.avatar.tournament.AvatarRanker> TournamentRankers(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, Substrate.NetApi.Model.Types.Primitive.U32> key, string blockhash, CancellationToken token)
        {
            string parameters = AwesomeAvatarsStorage.TournamentRankersParams(key);
            var result = await _client.GetStorageAsync<Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.avatar.tournament.AvatarRanker>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> AwesomeAvatarsCalls
    /// </summary>
    public sealed class AwesomeAvatarsCalls
    {
        
        /// <summary>
        /// >> mint
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Mint(Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.config.MintOption mint_option)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(mint_option.Encode());
            return new Method(51, "AwesomeAvatars", 0, "mint", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> forge
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Forge(Bajun.NetApi.Generated.Model.primitive_types.H256 leader, Substrate.NetApi.Model.Types.Base.BaseVec<Bajun.NetApi.Generated.Model.primitive_types.H256> sacrifices)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(leader.Encode());
            byteArray.AddRange(sacrifices.Encode());
            return new Method(51, "AwesomeAvatars", 1, "forge", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> transfer_avatar
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method TransferAvatar(Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32 to, Bajun.NetApi.Generated.Model.primitive_types.H256 avatar_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(to.Encode());
            byteArray.AddRange(avatar_id.Encode());
            return new Method(51, "AwesomeAvatars", 2, "transfer_avatar", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> transfer_free_mints
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method TransferFreeMints(Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32 to, Substrate.NetApi.Model.Types.Primitive.U16 how_many)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(to.Encode());
            byteArray.AddRange(how_many.Encode());
            return new Method(51, "AwesomeAvatars", 3, "transfer_free_mints", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_price
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetPrice(Bajun.NetApi.Generated.Model.primitive_types.H256 avatar_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> price)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(avatar_id.Encode());
            byteArray.AddRange(price.Encode());
            return new Method(51, "AwesomeAvatars", 4, "set_price", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_price
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemovePrice(Bajun.NetApi.Generated.Model.primitive_types.H256 avatar_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(avatar_id.Encode());
            return new Method(51, "AwesomeAvatars", 5, "remove_price", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> buy
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Buy(Bajun.NetApi.Generated.Model.primitive_types.H256 avatar_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(avatar_id.Encode());
            return new Method(51, "AwesomeAvatars", 6, "buy", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> upgrade_storage
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpgradeStorage(Substrate.NetApi.Model.Types.Base.BaseOpt<Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32> beneficiary, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U16> in_season)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(beneficiary.Encode());
            byteArray.AddRange(in_season.Encode());
            return new Method(51, "AwesomeAvatars", 7, "upgrade_storage", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_organizer
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetOrganizer(Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32 organizer)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(organizer.Encode());
            return new Method(51, "AwesomeAvatars", 8, "set_organizer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_treasurer
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetTreasurer(Substrate.NetApi.Model.Types.Primitive.U16 season_id, Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32 treasurer)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(season_id.Encode());
            byteArray.AddRange(treasurer.Encode());
            return new Method(51, "AwesomeAvatars", 9, "set_treasurer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim_treasury
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClaimTreasury(Substrate.NetApi.Model.Types.Primitive.U16 season_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(season_id.Encode());
            return new Method(51, "AwesomeAvatars", 10, "claim_treasury", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_season
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetSeason(Substrate.NetApi.Model.Types.Primitive.U16 season_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.season.Season> season, Substrate.NetApi.Model.Types.Base.BaseOpt<Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.season.SeasonMeta> season_meta, Substrate.NetApi.Model.Types.Base.BaseOpt<Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.season.SeasonSchedule> season_schedule, Substrate.NetApi.Model.Types.Base.BaseOpt<Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.season.TradeFilters> trade_filters)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(season_id.Encode());
            byteArray.AddRange(season.Encode());
            byteArray.AddRange(season_meta.Encode());
            byteArray.AddRange(season_schedule.Encode());
            byteArray.AddRange(trade_filters.Encode());
            return new Method(51, "AwesomeAvatars", 11, "set_season", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_global_config
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateGlobalConfig(Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.config.GlobalConfig new_global_config)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(new_global_config.Encode());
            return new Method(51, "AwesomeAvatars", 12, "update_global_config", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_free_mints
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetFreeMints(Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32 target, Substrate.NetApi.Model.Types.Primitive.U16 how_many)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(target.Encode());
            byteArray.AddRange(how_many.Encode());
            return new Method(51, "AwesomeAvatars", 13, "set_free_mints", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_collection_id
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetCollectionId(Substrate.NetApi.Model.Types.Primitive.U32 collection_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection_id.Encode());
            return new Method(51, "AwesomeAvatars", 14, "set_collection_id", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> lock_avatar
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method LockAvatar(Bajun.NetApi.Generated.Model.primitive_types.H256 avatar_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(avatar_id.Encode());
            return new Method(51, "AwesomeAvatars", 15, "lock_avatar", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unlock_avatar
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UnlockAvatar(Bajun.NetApi.Generated.Model.primitive_types.H256 avatar_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(avatar_id.Encode());
            return new Method(51, "AwesomeAvatars", 16, "unlock_avatar", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_service_account
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetServiceAccount(Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32 service_account)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(service_account.Encode());
            return new Method(51, "AwesomeAvatars", 17, "set_service_account", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> prepare_avatar
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method PrepareAvatar(Bajun.NetApi.Generated.Model.primitive_types.H256 avatar_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(avatar_id.Encode());
            return new Method(51, "AwesomeAvatars", 18, "prepare_avatar", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unprepare_avatar
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UnprepareAvatar(Bajun.NetApi.Generated.Model.primitive_types.H256 avatar_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(avatar_id.Encode());
            return new Method(51, "AwesomeAvatars", 19, "unprepare_avatar", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> prepare_ipfs
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method PrepareIpfs(Bajun.NetApi.Generated.Model.primitive_types.H256 avatar_id, Bajun.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT10 url)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(avatar_id.Encode());
            byteArray.AddRange(url.Encode());
            return new Method(51, "AwesomeAvatars", 20, "prepare_ipfs", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> modify_freemint_whitelist
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ModifyFreemintWhitelist(Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32 account, Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.pallet.EnumWhitelistOperation operation)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(account.Encode());
            byteArray.AddRange(operation.Encode());
            return new Method(51, "AwesomeAvatars", 21, "modify_freemint_whitelist", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_affiliation
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddAffiliation(Substrate.NetApi.Model.Types.Base.BaseOpt<Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32> target_affiliatee, Substrate.NetApi.Model.Types.Primitive.U32 affiliate_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(target_affiliatee.Encode());
            byteArray.AddRange(affiliate_id.Encode());
            return new Method(51, "AwesomeAvatars", 22, "add_affiliation", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> enable_affiliator
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method EnableAffiliator(Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.config.EnumUnlockTarget target, Substrate.NetApi.Model.Types.Primitive.U16 season_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(target.Encode());
            byteArray.AddRange(season_id.Encode());
            return new Method(51, "AwesomeAvatars", 23, "enable_affiliator", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_affiliation
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveAffiliation(Bajun.NetApi.Generated.Model.sp_core.crypto.AccountId32 account)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(account.Encode());
            return new Method(51, "AwesomeAvatars", 24, "remove_affiliation", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_rule_for
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetRuleFor(Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.affiliates.EnumAffiliateMethods rule_id, Bajun.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT21 rule)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(rule_id.Encode());
            byteArray.AddRange(rule.Encode());
            return new Method(51, "AwesomeAvatars", 25, "set_rule_for", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> clear_rule_for
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClearRuleFor(Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.affiliates.EnumAffiliateMethods rule_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(rule_id.Encode());
            return new Method(51, "AwesomeAvatars", 26, "clear_rule_for", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> enable_set_avatar_price
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method EnableSetAvatarPrice(Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.config.EnumUnlockTarget target, Substrate.NetApi.Model.Types.Primitive.U16 season_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(target.Encode());
            byteArray.AddRange(season_id.Encode());
            return new Method(51, "AwesomeAvatars", 27, "enable_set_avatar_price", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> enable_avatar_transfer
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method EnableAvatarTransfer(Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.config.EnumUnlockTarget target, Substrate.NetApi.Model.Types.Primitive.U16 season_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(target.Encode());
            byteArray.AddRange(season_id.Encode());
            return new Method(51, "AwesomeAvatars", 28, "enable_avatar_transfer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_unlock_config
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetUnlockConfig(Substrate.NetApi.Model.Types.Primitive.U16 season_id, Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.config.UnlockConfigs unlock_configs)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(season_id.Encode());
            byteArray.AddRange(unlock_configs.Encode());
            return new Method(51, "AwesomeAvatars", 29, "set_unlock_config", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> create_tournament
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CreateTournament(Substrate.NetApi.Model.Types.Primitive.U16 season_id, Bajun.NetApi.Generated.Model.pallet_ajuna_tournament.config.TournamentConfig config, Bajun.NetApi.Generated.Model.pallet_ajuna_awesome_avatars.types.avatar.tournament.AvatarRanker with_ranker)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(season_id.Encode());
            byteArray.AddRange(config.Encode());
            byteArray.AddRange(with_ranker.Encode());
            return new Method(51, "AwesomeAvatars", 30, "create_tournament", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_latest_tournament
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveLatestTournament(Substrate.NetApi.Model.Types.Primitive.U16 season_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(season_id.Encode());
            return new Method(51, "AwesomeAvatars", 31, "remove_latest_tournament", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim_tournament_reward_for
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClaimTournamentRewardFor(Substrate.NetApi.Model.Types.Primitive.U16 season_id, Bajun.NetApi.Generated.Model.primitive_types.H256 avatar_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(season_id.Encode());
            byteArray.AddRange(avatar_id.Encode());
            return new Method(51, "AwesomeAvatars", 32, "claim_tournament_reward_for", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim_golden_duck_for
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClaimGoldenDuckFor(Substrate.NetApi.Model.Types.Primitive.U16 season_id, Bajun.NetApi.Generated.Model.primitive_types.H256 avatar_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(season_id.Encode());
            byteArray.AddRange(avatar_id.Encode());
            return new Method(51, "AwesomeAvatars", 33, "claim_golden_duck_for", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> AwesomeAvatarsConstants
    /// </summary>
    public sealed class AwesomeAvatarsConstants
    {
        
        /// <summary>
        /// >> PalletId
        /// </summary>
        public Bajun.NetApi.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new Bajun.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x616A2F6161617472");
            return result;
        }
        
        /// <summary>
        /// >> KeyLimit
        ///  The maximum length of an attribute key.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 KeyLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x20000000");
            return result;
        }
        
        /// <summary>
        /// >> ValueLimit
        ///  The maximum length of an attribute value.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 ValueLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x40000000");
            return result;
        }
        
        /// <summary>
        /// >> FeeChainMaxLength
        ///  The maximum depth of the propagation fee chain,
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 FeeChainMaxLength()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x02000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> AwesomeAvatarsErrors
    /// </summary>
    public enum AwesomeAvatarsErrors
    {
        
        /// <summary>
        /// >> OrganizerNotSet
        /// There is no account set as the organizer
        /// </summary>
        OrganizerNotSet,
        
        /// <summary>
        /// >> CollectionIdNotSet
        /// There is no collection ID set for NFT handler.
        /// </summary>
        CollectionIdNotSet,
        
        /// <summary>
        /// >> EarlyStartTooEarly
        /// The season starts before the previous season has ended.
        /// </summary>
        EarlyStartTooEarly,
        
        /// <summary>
        /// >> EarlyStartTooLate
        /// The season season start later than its early access
        /// </summary>
        EarlyStartTooLate,
        
        /// <summary>
        /// >> SeasonStartTooLate
        /// The season start date is newer than its end date.
        /// </summary>
        SeasonStartTooLate,
        
        /// <summary>
        /// >> SeasonEndTooLate
        /// The season ends after the new season has started.
        /// </summary>
        SeasonEndTooLate,
        
        /// <summary>
        /// >> PeriodConfigOverflow
        /// The season's per period and periods configuration overflows.
        /// </summary>
        PeriodConfigOverflow,
        
        /// <summary>
        /// >> PeriodsIndivisible
        /// The season's periods configuration is indivisible by max variation.
        /// </summary>
        PeriodsIndivisible,
        
        /// <summary>
        /// >> UnknownSeason
        /// The season doesn't exist.
        /// </summary>
        UnknownSeason,
        
        /// <summary>
        /// >> UnknownAvatar
        /// The avatar doesn't exist.
        /// </summary>
        UnknownAvatar,
        
        /// <summary>
        /// >> UnknownAvatarForSale
        /// The avatar for sale doesn't exist.
        /// </summary>
        UnknownAvatarForSale,
        
        /// <summary>
        /// >> UnknownTier
        /// The tier doesn't exist.
        /// </summary>
        UnknownTier,
        
        /// <summary>
        /// >> UnknownTreasurer
        /// The treasurer doesn't exist.
        /// </summary>
        UnknownTreasurer,
        
        /// <summary>
        /// >> UnknownPreparation
        /// The preparation doesn't exist.
        /// </summary>
        UnknownPreparation,
        
        /// <summary>
        /// >> NonSequentialSeasonId
        /// The season ID of a season to create is not sequential.
        /// </summary>
        NonSequentialSeasonId,
        
        /// <summary>
        /// >> SingleMintProbsOverflow
        /// The sum of the given single mint probabilities overflows.
        /// </summary>
        SingleMintProbsOverflow,
        
        /// <summary>
        /// >> BatchMintProbsOverflow
        /// The sum of the given batch mint probabilities overflows.
        /// </summary>
        BatchMintProbsOverflow,
        
        /// <summary>
        /// >> IncorrectRarityPercentages
        /// Rarity percentages don't add up to 100
        /// </summary>
        IncorrectRarityPercentages,
        
        /// <summary>
        /// >> TooManyRarityPercentages
        /// Max tier is achievable through forging only. Therefore the number of rarity percentages
        /// must be less than that of tiers for a season.
        /// </summary>
        TooManyRarityPercentages,
        
        /// <summary>
        /// >> BaseProbTooHigh
        /// The given base probability is too high. It must be less than 100.
        /// </summary>
        BaseProbTooHigh,
        
        /// <summary>
        /// >> DuplicatedRarityTier
        /// Some rarity tier are duplicated.
        /// </summary>
        DuplicatedRarityTier,
        
        /// <summary>
        /// >> MintClosed
        /// Minting is not available at the moment.
        /// </summary>
        MintClosed,
        
        /// <summary>
        /// >> ForgeClosed
        /// Forging is not available at the moment.
        /// </summary>
        ForgeClosed,
        
        /// <summary>
        /// >> TransferClosed
        /// Transfer is not available at the moment.
        /// </summary>
        TransferClosed,
        
        /// <summary>
        /// >> TradeClosed
        /// Trading is not available at the moment.
        /// </summary>
        TradeClosed,
        
        /// <summary>
        /// >> NftTransferClosed
        /// NFT transfer is not available at the moment.
        /// </summary>
        NftTransferClosed,
        
        /// <summary>
        /// >> FreeMintTransferClosed
        /// Free mint transfer is not available at the moment.
        /// </summary>
        FreeMintTransferClosed,
        
        /// <summary>
        /// >> SeasonClosed
        /// Attempt to mint or forge outside of an active season.
        /// </summary>
        SeasonClosed,
        
        /// <summary>
        /// >> PrematureSeasonEnd
        /// Attempt to mint when the season has ended prematurely.
        /// </summary>
        PrematureSeasonEnd,
        
        /// <summary>
        /// >> MaxOwnershipReached
        /// Max ownership reached.
        /// </summary>
        MaxOwnershipReached,
        
        /// <summary>
        /// >> MaxStorageTierReached
        /// Max storage tier reached.
        /// </summary>
        MaxStorageTierReached,
        
        /// <summary>
        /// >> Ownership
        /// Avatar belongs to someone else.
        /// </summary>
        Ownership,
        
        /// <summary>
        /// >> AlreadyOwned
        /// Attempt to buy his or her own avatar.
        /// </summary>
        AlreadyOwned,
        
        /// <summary>
        /// >> IncorrectDna
        /// Incorrect DNA.
        /// </summary>
        IncorrectDna,
        
        /// <summary>
        /// >> IncorrectData
        /// Incorrect data.
        /// </summary>
        IncorrectData,
        
        /// <summary>
        /// >> IncorrectAvatarId
        /// Incorrect Avatar ID.
        /// </summary>
        IncorrectAvatarId,
        
        /// <summary>
        /// >> IncorrectSeasonId
        /// Incorrect season ID.
        /// </summary>
        IncorrectSeasonId,
        
        /// <summary>
        /// >> MintCooldown
        /// The player must wait cooldown period.
        /// </summary>
        MintCooldown,
        
        /// <summary>
        /// >> MaxComponentsTooLow
        /// The season's max components value is less than the minimum allowed (1).
        /// </summary>
        MaxComponentsTooLow,
        
        /// <summary>
        /// >> MaxComponentsTooHigh
        /// The season's max components value is more than the maximum allowed (random byte: 32).
        /// </summary>
        MaxComponentsTooHigh,
        
        /// <summary>
        /// >> MaxVariationsTooLow
        /// The season's max variations value is less than the minimum allowed (1).
        /// </summary>
        MaxVariationsTooLow,
        
        /// <summary>
        /// >> MaxVariationsTooHigh
        /// The season's max variations value is more than the maximum allowed (15).
        /// </summary>
        MaxVariationsTooHigh,
        
        /// <summary>
        /// >> InsufficientFreeMints
        /// The player has not enough free mints available.
        /// </summary>
        InsufficientFreeMints,
        
        /// <summary>
        /// >> InsufficientBalance
        /// The player has not enough balance available.
        /// </summary>
        InsufficientBalance,
        
        /// <summary>
        /// >> TooLowFreeMints
        /// Attempt to transfer, issue or withdraw free mints lower than the minimum allowed.
        /// </summary>
        TooLowFreeMints,
        
        /// <summary>
        /// >> TooFewSacrifices
        /// Less than minimum allowed sacrifices are used for forging.
        /// </summary>
        TooFewSacrifices,
        
        /// <summary>
        /// >> TooManySacrifices
        /// More than maximum allowed sacrifices are used for forging.
        /// </summary>
        TooManySacrifices,
        
        /// <summary>
        /// >> LeaderSacrificed
        /// Leader is being sacrificed.
        /// </summary>
        LeaderSacrificed,
        
        /// <summary>
        /// >> AvatarCannotBeTraded
        /// This avatar cannot be used in trades.
        /// </summary>
        AvatarCannotBeTraded,
        
        /// <summary>
        /// >> AvatarInTrade
        /// An avatar listed for trade is used to forge.
        /// </summary>
        AvatarInTrade,
        
        /// <summary>
        /// >> AvatarLocked
        /// The avatar is currently locked and cannot be used.
        /// </summary>
        AvatarLocked,
        
        /// <summary>
        /// >> AvatarNotLocked
        /// The avatar is not currently locked and cannot be unlocked.
        /// </summary>
        AvatarNotLocked,
        
        /// <summary>
        /// >> AvatarUnlocked
        /// The avatar is currently unlocked and cannot be locked again.
        /// </summary>
        AvatarUnlocked,
        
        /// <summary>
        /// >> IncorrectAvatarSeason
        /// Tried to forge avatars from different seasons.
        /// </summary>
        IncorrectAvatarSeason,
        
        /// <summary>
        /// >> IncompatibleAvatarVersions
        /// Tried to forge avatars with different DNA versions.
        /// </summary>
        IncompatibleAvatarVersions,
        
        /// <summary>
        /// >> InsufficientStorageForForging
        /// There's not enough space to hold the forging results
        /// </summary>
        InsufficientStorageForForging,
        
        /// <summary>
        /// >> CannotTransferToSelf
        /// Tried transferring to his or her own account.
        /// </summary>
        CannotTransferToSelf,
        
        /// <summary>
        /// >> CannotTransferFromInactiveAccount
        /// Tried transferring while the account still hasn't minted and forged anything.
        /// </summary>
        CannotTransferFromInactiveAccount,
        
        /// <summary>
        /// >> CannotClaimDuringSeason
        /// Tried claiming treasury during a season.
        /// </summary>
        CannotClaimDuringSeason,
        
        /// <summary>
        /// >> CannotClaimZero
        /// Tried claiming treasury which is zero.
        /// </summary>
        CannotClaimZero,
        
        /// <summary>
        /// >> IncompatibleMintComponents
        /// The components tried to mint were not compatible.
        /// </summary>
        IncompatibleMintComponents,
        
        /// <summary>
        /// >> IncompatibleForgeComponents
        /// The components tried to forge were not compatible.
        /// </summary>
        IncompatibleForgeComponents,
        
        /// <summary>
        /// >> InsufficientSacrifices
        /// The amount of sacrifices is not sufficient for forging.
        /// </summary>
        InsufficientSacrifices,
        
        /// <summary>
        /// >> ExcessiveSacrifices
        /// The amount of sacrifices is too much for forging.
        /// </summary>
        ExcessiveSacrifices,
        
        /// <summary>
        /// >> AlreadyPrepared
        /// Tried to prepare an already prepared avatar.
        /// </summary>
        AlreadyPrepared,
        
        /// <summary>
        /// >> NotPrepared
        /// Tried to prepare an IPFS URL for an avatar, that is not yet prepared.
        /// </summary>
        NotPrepared,
        
        /// <summary>
        /// >> NoServiceAccount
        /// No service account has been set.
        /// </summary>
        NoServiceAccount,
        
        /// <summary>
        /// >> EmptyIpfsUrl
        /// Tried to prepare an IPFS URL for an avatar with an empty URL.
        /// </summary>
        EmptyIpfsUrl,
        
        /// <summary>
        /// >> AccountAlreadyInWhitelist
        /// The account trying to be whitelisted is already in the whitelist
        /// </summary>
        AccountAlreadyInWhitelist,
        
        /// <summary>
        /// >> WhitelistedAccountsLimitReached
        /// Cannot add more accounts to the whitelist.
        /// </summary>
        WhitelistedAccountsLimitReached,
        
        /// <summary>
        /// >> AffiliatorNotFound
        /// No account matches the provided affiliator identifier
        /// </summary>
        AffiliatorNotFound,
        
        /// <summary>
        /// >> FeatureLocked
        /// The feature is locked for the current player
        /// </summary>
        FeatureLocked,
        
        /// <summary>
        /// >> FeatureLockedInSeason
        /// The feature trying to be unlocked is not available for the selected season
        /// </summary>
        FeatureLockedInSeason,
        
        /// <summary>
        /// >> FeatureLockedThroughPayment
        /// The feature trying to be unlocked cannot be unlocked with payment
        /// </summary>
        FeatureLockedThroughPayment,
        
        /// <summary>
        /// >> UnlockCriteriaNotFulfilled
        /// The feature trying to be unlocked has missing requirements to be fulfilled by
        /// the account trying to unlock it
        /// </summary>
        UnlockCriteriaNotFulfilled,
        
        /// <summary>
        /// >> TournamentRankerNotFound
        /// Couldn't find a tournament ranker for the active tournament; qed
        /// </summary>
        TournamentRankerNotFound,
        
        /// <summary>
        /// >> AffiliateOthersOnlyWhiteListed
        /// Only whitelisted accounts can affiliate for others
        /// </summary>
        AffiliateOthersOnlyWhiteListed,
    }
}
