//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace Bajun.NetApi.Generated.Model.pallet_assets.pallet
{
    
    
    /// <summary>
    /// >> Call
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public enum Call
    {
        
        /// <summary>
        /// >> create
        /// Issue a new class of fungible assets from a public origin.
        /// 
        /// This new asset class has no assets initially and its owner is the origin.
        /// 
        /// The origin must conform to the configured `CreateOrigin` and have sufficient funds free.
        /// 
        /// Funds of sender are reserved by `AssetDeposit`.
        /// 
        /// Parameters:
        /// - `id`: The identifier of the new asset. This must not be currently in use to identify
        /// an existing asset.
        /// - `admin`: The admin of this class of assets. The admin is the initial address of each
        /// member of the asset class's admin team.
        /// - `min_balance`: The minimum balance of this new asset that any single account must
        /// have. If an account's balance is reduced below this, then it collapses to zero.
        /// 
        /// Emits `Created` event when successful.
        /// 
        /// Weight: `O(1)`
        /// </summary>
        create = 0,
        
        /// <summary>
        /// >> force_create
        /// Issue a new class of fungible assets from a privileged origin.
        /// 
        /// This new asset class has no assets initially.
        /// 
        /// The origin must conform to `ForceOrigin`.
        /// 
        /// Unlike `create`, no funds are reserved.
        /// 
        /// - `id`: The identifier of the new asset. This must not be currently in use to identify
        /// an existing asset.
        /// - `owner`: The owner of this class of assets. The owner has full superuser permissions
        /// over this asset, but may later change and configure the permissions using
        /// `transfer_ownership` and `set_team`.
        /// - `min_balance`: The minimum balance of this new asset that any single account must
        /// have. If an account's balance is reduced below this, then it collapses to zero.
        /// 
        /// Emits `ForceCreated` event when successful.
        /// 
        /// Weight: `O(1)`
        /// </summary>
        force_create = 1,
        
        /// <summary>
        /// >> start_destroy
        /// Start the process of destroying a fungible asset class.
        /// 
        /// `start_destroy` is the first in a series of extrinsics that should be called, to allow
        /// destruction of an asset class.
        /// 
        /// The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.
        /// 
        /// - `id`: The identifier of the asset to be destroyed. This must identify an existing
        ///   asset.
        /// 
        /// The asset class must be frozen before calling `start_destroy`.
        /// </summary>
        start_destroy = 2,
        
        /// <summary>
        /// >> destroy_accounts
        /// Destroy all accounts associated with a given asset.
        /// 
        /// `destroy_accounts` should only be called after `start_destroy` has been called, and the
        /// asset is in a `Destroying` state.
        /// 
        /// Due to weight restrictions, this function may need to be called multiple times to fully
        /// destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.
        /// 
        /// - `id`: The identifier of the asset to be destroyed. This must identify an existing
        ///   asset.
        /// 
        /// Each call emits the `Event::DestroyedAccounts` event.
        /// </summary>
        destroy_accounts = 3,
        
        /// <summary>
        /// >> destroy_approvals
        /// Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).
        /// 
        /// `destroy_approvals` should only be called after `start_destroy` has been called, and the
        /// asset is in a `Destroying` state.
        /// 
        /// Due to weight restrictions, this function may need to be called multiple times to fully
        /// destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.
        /// 
        /// - `id`: The identifier of the asset to be destroyed. This must identify an existing
        ///   asset.
        /// 
        /// Each call emits the `Event::DestroyedApprovals` event.
        /// </summary>
        destroy_approvals = 4,
        
        /// <summary>
        /// >> finish_destroy
        /// Complete destroying asset and unreserve currency.
        /// 
        /// `finish_destroy` should only be called after `start_destroy` has been called, and the
        /// asset is in a `Destroying` state. All accounts or approvals should be destroyed before
        /// hand.
        /// 
        /// - `id`: The identifier of the asset to be destroyed. This must identify an existing
        ///   asset.
        /// 
        /// Each successful call emits the `Event::Destroyed` event.
        /// </summary>
        finish_destroy = 5,
        
        /// <summary>
        /// >> mint
        /// Mint assets of a particular class.
        /// 
        /// The origin must be Signed and the sender must be the Issuer of the asset `id`.
        /// 
        /// - `id`: The identifier of the asset to have some amount minted.
        /// - `beneficiary`: The account to be credited with the minted assets.
        /// - `amount`: The amount of the asset to be minted.
        /// 
        /// Emits `Issued` event when successful.
        /// 
        /// Weight: `O(1)`
        /// Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`.
        /// </summary>
        mint = 6,
        
        /// <summary>
        /// >> burn
        /// Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.
        /// 
        /// Origin must be Signed and the sender should be the Manager of the asset `id`.
        /// 
        /// Bails with `NoAccount` if the `who` is already dead.
        /// 
        /// - `id`: The identifier of the asset to have some amount burned.
        /// - `who`: The account to be debited from.
        /// - `amount`: The maximum amount by which `who`'s balance should be reduced.
        /// 
        /// Emits `Burned` with the actual amount burned. If this takes the balance to below the
        /// minimum for the asset, then the amount burned is increased to take it to zero.
        /// 
        /// Weight: `O(1)`
        /// Modes: Post-existence of `who`; Pre & post Zombie-status of `who`.
        /// </summary>
        burn = 7,
        
        /// <summary>
        /// >> transfer
        /// Move some assets from the sender account to another.
        /// 
        /// Origin must be Signed.
        /// 
        /// - `id`: The identifier of the asset to have some amount transferred.
        /// - `target`: The account to be credited.
        /// - `amount`: The amount by which the sender's balance of assets should be reduced and
        /// `target`'s balance increased. The amount actually transferred may be slightly greater in
        /// the case that the transfer would otherwise take the sender balance above zero but below
        /// the minimum balance. Must be greater than zero.
        /// 
        /// Emits `Transferred` with the actual amount transferred. If this takes the source balance
        /// to below the minimum for the asset, then the amount transferred is increased to take it
        /// to zero.
        /// 
        /// Weight: `O(1)`
        /// Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
        /// `target`.
        /// </summary>
        transfer = 8,
        
        /// <summary>
        /// >> transfer_keep_alive
        /// Move some assets from the sender account to another, keeping the sender account alive.
        /// 
        /// Origin must be Signed.
        /// 
        /// - `id`: The identifier of the asset to have some amount transferred.
        /// - `target`: The account to be credited.
        /// - `amount`: The amount by which the sender's balance of assets should be reduced and
        /// `target`'s balance increased. The amount actually transferred may be slightly greater in
        /// the case that the transfer would otherwise take the sender balance above zero but below
        /// the minimum balance. Must be greater than zero.
        /// 
        /// Emits `Transferred` with the actual amount transferred. If this takes the source balance
        /// to below the minimum for the asset, then the amount transferred is increased to take it
        /// to zero.
        /// 
        /// Weight: `O(1)`
        /// Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
        /// `target`.
        /// </summary>
        transfer_keep_alive = 9,
        
        /// <summary>
        /// >> force_transfer
        /// Move some assets from one account to another.
        /// 
        /// Origin must be Signed and the sender should be the Admin of the asset `id`.
        /// 
        /// - `id`: The identifier of the asset to have some amount transferred.
        /// - `source`: The account to be debited.
        /// - `dest`: The account to be credited.
        /// - `amount`: The amount by which the `source`'s balance of assets should be reduced and
        /// `dest`'s balance increased. The amount actually transferred may be slightly greater in
        /// the case that the transfer would otherwise take the `source` balance above zero but
        /// below the minimum balance. Must be greater than zero.
        /// 
        /// Emits `Transferred` with the actual amount transferred. If this takes the source balance
        /// to below the minimum for the asset, then the amount transferred is increased to take it
        /// to zero.
        /// 
        /// Weight: `O(1)`
        /// Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of
        /// `dest`.
        /// </summary>
        force_transfer = 10,
        
        /// <summary>
        /// >> freeze
        /// Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`
        /// must already exist as an entry in `Account`s of the asset. If you want to freeze an
        /// account that does not have an entry, use `touch_other` first.
        /// 
        /// Origin must be Signed and the sender should be the Freezer of the asset `id`.
        /// 
        /// - `id`: The identifier of the asset to be frozen.
        /// - `who`: The account to be frozen.
        /// 
        /// Emits `Frozen`.
        /// 
        /// Weight: `O(1)`
        /// </summary>
        freeze = 11,
        
        /// <summary>
        /// >> thaw
        /// Allow unprivileged transfers to and from an account again.
        /// 
        /// Origin must be Signed and the sender should be the Admin of the asset `id`.
        /// 
        /// - `id`: The identifier of the asset to be frozen.
        /// - `who`: The account to be unfrozen.
        /// 
        /// Emits `Thawed`.
        /// 
        /// Weight: `O(1)`
        /// </summary>
        thaw = 12,
        
        /// <summary>
        /// >> freeze_asset
        /// Disallow further unprivileged transfers for the asset class.
        /// 
        /// Origin must be Signed and the sender should be the Freezer of the asset `id`.
        /// 
        /// - `id`: The identifier of the asset to be frozen.
        /// 
        /// Emits `Frozen`.
        /// 
        /// Weight: `O(1)`
        /// </summary>
        freeze_asset = 13,
        
        /// <summary>
        /// >> thaw_asset
        /// Allow unprivileged transfers for the asset again.
        /// 
        /// Origin must be Signed and the sender should be the Admin of the asset `id`.
        /// 
        /// - `id`: The identifier of the asset to be thawed.
        /// 
        /// Emits `Thawed`.
        /// 
        /// Weight: `O(1)`
        /// </summary>
        thaw_asset = 14,
        
        /// <summary>
        /// >> transfer_ownership
        /// Change the Owner of an asset.
        /// 
        /// Origin must be Signed and the sender should be the Owner of the asset `id`.
        /// 
        /// - `id`: The identifier of the asset.
        /// - `owner`: The new Owner of this asset.
        /// 
        /// Emits `OwnerChanged`.
        /// 
        /// Weight: `O(1)`
        /// </summary>
        transfer_ownership = 15,
        
        /// <summary>
        /// >> set_team
        /// Change the Issuer, Admin and Freezer of an asset.
        /// 
        /// Origin must be Signed and the sender should be the Owner of the asset `id`.
        /// 
        /// - `id`: The identifier of the asset to be frozen.
        /// - `issuer`: The new Issuer of this asset.
        /// - `admin`: The new Admin of this asset.
        /// - `freezer`: The new Freezer of this asset.
        /// 
        /// Emits `TeamChanged`.
        /// 
        /// Weight: `O(1)`
        /// </summary>
        set_team = 16,
        
        /// <summary>
        /// >> set_metadata
        /// Set the metadata for an asset.
        /// 
        /// Origin must be Signed and the sender should be the Owner of the asset `id`.
        /// 
        /// Funds of sender are reserved according to the formula:
        /// `MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into
        /// account any already reserved funds.
        /// 
        /// - `id`: The identifier of the asset to update.
        /// - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
        /// - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
        /// - `decimals`: The number of decimals this asset uses to represent one unit.
        /// 
        /// Emits `MetadataSet`.
        /// 
        /// Weight: `O(1)`
        /// </summary>
        set_metadata = 17,
        
        /// <summary>
        /// >> clear_metadata
        /// Clear the metadata for an asset.
        /// 
        /// Origin must be Signed and the sender should be the Owner of the asset `id`.
        /// 
        /// Any deposit is freed for the asset owner.
        /// 
        /// - `id`: The identifier of the asset to clear.
        /// 
        /// Emits `MetadataCleared`.
        /// 
        /// Weight: `O(1)`
        /// </summary>
        clear_metadata = 18,
        
        /// <summary>
        /// >> force_set_metadata
        /// Force the metadata for an asset to some value.
        /// 
        /// Origin must be ForceOrigin.
        /// 
        /// Any deposit is left alone.
        /// 
        /// - `id`: The identifier of the asset to update.
        /// - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
        /// - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
        /// - `decimals`: The number of decimals this asset uses to represent one unit.
        /// 
        /// Emits `MetadataSet`.
        /// 
        /// Weight: `O(N + S)` where N and S are the length of the name and symbol respectively.
        /// </summary>
        force_set_metadata = 19,
        
        /// <summary>
        /// >> force_clear_metadata
        /// Clear the metadata for an asset.
        /// 
        /// Origin must be ForceOrigin.
        /// 
        /// Any deposit is returned.
        /// 
        /// - `id`: The identifier of the asset to clear.
        /// 
        /// Emits `MetadataCleared`.
        /// 
        /// Weight: `O(1)`
        /// </summary>
        force_clear_metadata = 20,
        
        /// <summary>
        /// >> force_asset_status
        /// Alter the attributes of a given asset.
        /// 
        /// Origin must be `ForceOrigin`.
        /// 
        /// - `id`: The identifier of the asset.
        /// - `owner`: The new Owner of this asset.
        /// - `issuer`: The new Issuer of this asset.
        /// - `admin`: The new Admin of this asset.
        /// - `freezer`: The new Freezer of this asset.
        /// - `min_balance`: The minimum balance of this new asset that any single account must
        /// have. If an account's balance is reduced below this, then it collapses to zero.
        /// - `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient
        /// value to account for the state bloat associated with its balance storage. If set to
        /// `true`, then non-zero balances may be stored without a `consumer` reference (and thus
        /// an ED in the Balances pallet or whatever else is used to control user-account state
        /// growth).
        /// - `is_frozen`: Whether this asset class is frozen except for permissioned/admin
        /// instructions.
        /// 
        /// Emits `AssetStatusChanged` with the identity of the asset.
        /// 
        /// Weight: `O(1)`
        /// </summary>
        force_asset_status = 21,
        
        /// <summary>
        /// >> approve_transfer
        /// Approve an amount of asset for transfer by a delegated third-party account.
        /// 
        /// Origin must be Signed.
        /// 
        /// Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account
        /// for the purpose of holding the approval. If some non-zero amount of assets is already
        /// approved from signing account to `delegate`, then it is topped up or unreserved to
        /// meet the right value.
        /// 
        /// NOTE: The signing account does not need to own `amount` of assets at the point of
        /// making this call.
        /// 
        /// - `id`: The identifier of the asset.
        /// - `delegate`: The account to delegate permission to transfer asset.
        /// - `amount`: The amount of asset that may be transferred by `delegate`. If there is
        /// already an approval in place, then this acts additively.
        /// 
        /// Emits `ApprovedTransfer` on success.
        /// 
        /// Weight: `O(1)`
        /// </summary>
        approve_transfer = 22,
        
        /// <summary>
        /// >> cancel_approval
        /// Cancel all of some asset approved for delegated transfer by a third-party account.
        /// 
        /// Origin must be Signed and there must be an approval in place between signer and
        /// `delegate`.
        /// 
        /// Unreserves any deposit previously reserved by `approve_transfer` for the approval.
        /// 
        /// - `id`: The identifier of the asset.
        /// - `delegate`: The account delegated permission to transfer asset.
        /// 
        /// Emits `ApprovalCancelled` on success.
        /// 
        /// Weight: `O(1)`
        /// </summary>
        cancel_approval = 23,
        
        /// <summary>
        /// >> force_cancel_approval
        /// Cancel all of some asset approved for delegated transfer by a third-party account.
        /// 
        /// Origin must be either ForceOrigin or Signed origin with the signer being the Admin
        /// account of the asset `id`.
        /// 
        /// Unreserves any deposit previously reserved by `approve_transfer` for the approval.
        /// 
        /// - `id`: The identifier of the asset.
        /// - `delegate`: The account delegated permission to transfer asset.
        /// 
        /// Emits `ApprovalCancelled` on success.
        /// 
        /// Weight: `O(1)`
        /// </summary>
        force_cancel_approval = 24,
        
        /// <summary>
        /// >> transfer_approved
        /// Transfer some asset balance from a previously delegated account to some third-party
        /// account.
        /// 
        /// Origin must be Signed and there must be an approval in place by the `owner` to the
        /// signer.
        /// 
        /// If the entire amount approved for transfer is transferred, then any deposit previously
        /// reserved by `approve_transfer` is unreserved.
        /// 
        /// - `id`: The identifier of the asset.
        /// - `owner`: The account which previously approved for a transfer of at least `amount` and
        /// from which the asset balance will be withdrawn.
        /// - `destination`: The account to which the asset balance of `amount` will be transferred.
        /// - `amount`: The amount of assets to transfer.
        /// 
        /// Emits `TransferredApproved` on success.
        /// 
        /// Weight: `O(1)`
        /// </summary>
        transfer_approved = 25,
        
        /// <summary>
        /// >> touch
        /// Create an asset account for non-provider assets.
        /// 
        /// A deposit will be taken from the signer account.
        /// 
        /// - `origin`: Must be Signed; the signer account must have sufficient funds for a deposit
        ///   to be taken.
        /// - `id`: The identifier of the asset for the account to be created.
        /// 
        /// Emits `Touched` event when successful.
        /// </summary>
        touch = 26,
        
        /// <summary>
        /// >> refund
        /// Return the deposit (if any) of an asset account or a consumer reference (if any) of an
        /// account.
        /// 
        /// The origin must be Signed.
        /// 
        /// - `id`: The identifier of the asset for which the caller would like the deposit
        ///   refunded.
        /// - `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.
        /// 
        /// Emits `Refunded` event when successful.
        /// </summary>
        refund = 27,
        
        /// <summary>
        /// >> set_min_balance
        /// Sets the minimum balance of an asset.
        /// 
        /// Only works if there aren't any accounts that are holding the asset or if
        /// the new value of `min_balance` is less than the old one.
        /// 
        /// Origin must be Signed and the sender has to be the Owner of the
        /// asset `id`.
        /// 
        /// - `id`: The identifier of the asset.
        /// - `min_balance`: The new value of `min_balance`.
        /// 
        /// Emits `AssetMinBalanceChanged` event when successful.
        /// </summary>
        set_min_balance = 28,
        
        /// <summary>
        /// >> touch_other
        /// Create an asset account for `who`.
        /// 
        /// A deposit will be taken from the signer account.
        /// 
        /// - `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account
        ///   must have sufficient funds for a deposit to be taken.
        /// - `id`: The identifier of the asset for the account to be created.
        /// - `who`: The account to be created.
        /// 
        /// Emits `Touched` event when successful.
        /// </summary>
        touch_other = 29,
        
        /// <summary>
        /// >> refund_other
        /// Return the deposit (if any) of a target asset account. Useful if you are the depositor.
        /// 
        /// The origin must be Signed and either the account owner, depositor, or asset `Admin`. In
        /// order to burn a non-zero balance of the asset, the caller must be the account and should
        /// use `refund`.
        /// 
        /// - `id`: The identifier of the asset for the account holding a deposit.
        /// - `who`: The account to refund.
        /// 
        /// Emits `Refunded` event when successful.
        /// </summary>
        refund_other = 30,
        
        /// <summary>
        /// >> block
        /// Disallow further unprivileged transfers of an asset `id` to and from an account `who`.
        /// 
        /// Origin must be Signed and the sender should be the Freezer of the asset `id`.
        /// 
        /// - `id`: The identifier of the account's asset.
        /// - `who`: The account to be unblocked.
        /// 
        /// Emits `Blocked`.
        /// 
        /// Weight: `O(1)`
        /// </summary>
        block = 31,
    }
    
    /// <summary>
    /// >> 444 - Variant[pallet_assets.pallet.Call]
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public sealed class EnumCall : BaseEnumExt<Call, BaseTuple<Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.NetApi.Model.Types.Primitive.U128>, BaseTuple<Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.NetApi.Model.Types.Primitive.Bool, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>>, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, BaseTuple<Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>>, BaseTuple<Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>>, BaseTuple<Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>>, BaseTuple<Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>>, BaseTuple<Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>>, BaseTuple<Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress>, BaseTuple<Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress>, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, BaseTuple<Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress>, BaseTuple<Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress>, BaseTuple<Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>, Substrate.NetApi.Model.Types.Primitive.U8>, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, BaseTuple<Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>, Substrate.NetApi.Model.Types.Primitive.U8, Substrate.NetApi.Model.Types.Primitive.Bool>, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, BaseTuple<Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>, Substrate.NetApi.Model.Types.Primitive.Bool, Substrate.NetApi.Model.Types.Primitive.Bool>, BaseTuple<Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>>, BaseTuple<Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress>, BaseTuple<Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress>, BaseTuple<Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>>, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, BaseTuple<Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Primitive.Bool>, BaseTuple<Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Primitive.U128>, BaseTuple<Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress>, BaseTuple<Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress>, BaseTuple<Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>, Bajun.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress>>
    {
    }
}
