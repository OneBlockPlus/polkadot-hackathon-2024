//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Hydration.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> CollatorRewardsStorage
    /// </summary>
    public sealed class CollatorRewardsStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> CollatorRewardsStorage Constructor
        /// </summary>
        public CollatorRewardsStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CollatorRewards", "Collators"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT33)));
        }
        
        /// <summary>
        /// >> CollatorsParams
        ///  Stores the collators per session (index).
        /// </summary>
        public static string CollatorsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("CollatorRewards", "Collators", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CollatorsDefault
        /// Default value as hex string
        /// </summary>
        public static string CollatorsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Collators
        ///  Stores the collators per session (index).
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT33> Collators(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = CollatorRewardsStorage.CollatorsParams(key);
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT33>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> CollatorRewardsCalls
    /// </summary>
    public sealed class CollatorRewardsCalls
    {
    }
    
    /// <summary>
    /// >> CollatorRewardsConstants
    /// </summary>
    public sealed class CollatorRewardsConstants
    {
        
        /// <summary>
        /// >> RewardPerCollator
        ///  Reward amount per one collator.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 RewardPerCollator()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x78FA8B75289E01000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> RewardCurrencyId
        ///  Reward Asset Id
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 RewardCurrencyId()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> CollatorRewardsErrors
    /// </summary>
    public enum CollatorRewardsErrors
    {
    }
}
