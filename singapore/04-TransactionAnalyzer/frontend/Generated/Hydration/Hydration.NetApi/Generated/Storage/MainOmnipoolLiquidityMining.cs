//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Hydration.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> OmnipoolLiquidityMiningStorage
    /// </summary>
    public sealed class OmnipoolLiquidityMiningStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> OmnipoolLiquidityMiningStorage Constructor
        /// </summary>
        public OmnipoolLiquidityMiningStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("OmnipoolLiquidityMining", "OmniPositionId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
        }
        
        /// <summary>
        /// >> OmniPositionIdParams
        ///  Map of omnipool position's ids to LM's deposit ids.
        /// </summary>
        public static string OmniPositionIdParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("OmnipoolLiquidityMining", "OmniPositionId", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> OmniPositionIdDefault
        /// Default value as hex string
        /// </summary>
        public static string OmniPositionIdDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> OmniPositionId
        ///  Map of omnipool position's ids to LM's deposit ids.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> OmniPositionId(Substrate.NetApi.Model.Types.Primitive.U128 key, string blockhash, CancellationToken token)
        {
            string parameters = OmnipoolLiquidityMiningStorage.OmniPositionIdParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> OmnipoolLiquidityMiningCalls
    /// </summary>
    public sealed class OmnipoolLiquidityMiningCalls
    {
        
        /// <summary>
        /// >> create_global_farm
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CreateGlobalFarm(Substrate.NetApi.Model.Types.Primitive.U128 total_rewards, Substrate.NetApi.Model.Types.Primitive.U32 planned_yielding_periods, Substrate.NetApi.Model.Types.Primitive.U32 blocks_per_period, Substrate.NetApi.Model.Types.Primitive.U32 reward_currency, Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 owner, Hydration.NetApi.Generated.Model.sp_arithmetic.per_things.Perquintill yield_per_period, Substrate.NetApi.Model.Types.Primitive.U128 min_deposit, Hydration.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128 lrna_price_adjustment)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(total_rewards.Encode());
            byteArray.AddRange(planned_yielding_periods.Encode());
            byteArray.AddRange(blocks_per_period.Encode());
            byteArray.AddRange(reward_currency.Encode());
            byteArray.AddRange(owner.Encode());
            byteArray.AddRange(yield_per_period.Encode());
            byteArray.AddRange(min_deposit.Encode());
            byteArray.AddRange(lrna_price_adjustment.Encode());
            return new Method(63, "OmnipoolLiquidityMining", 0, "create_global_farm", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> terminate_global_farm
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method TerminateGlobalFarm(Substrate.NetApi.Model.Types.Primitive.U32 global_farm_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(global_farm_id.Encode());
            return new Method(63, "OmnipoolLiquidityMining", 2, "terminate_global_farm", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> create_yield_farm
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CreateYieldFarm(Substrate.NetApi.Model.Types.Primitive.U32 global_farm_id, Substrate.NetApi.Model.Types.Primitive.U32 asset_id, Hydration.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128 multiplier, Substrate.NetApi.Model.Types.Base.BaseOpt<Hydration.NetApi.Generated.Model.pallet_liquidity_mining.types.LoyaltyCurve> loyalty_curve)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(global_farm_id.Encode());
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(multiplier.Encode());
            byteArray.AddRange(loyalty_curve.Encode());
            return new Method(63, "OmnipoolLiquidityMining", 3, "create_yield_farm", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_yield_farm
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateYieldFarm(Substrate.NetApi.Model.Types.Primitive.U32 global_farm_id, Substrate.NetApi.Model.Types.Primitive.U32 asset_id, Hydration.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128 multiplier)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(global_farm_id.Encode());
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(multiplier.Encode());
            return new Method(63, "OmnipoolLiquidityMining", 4, "update_yield_farm", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> stop_yield_farm
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method StopYieldFarm(Substrate.NetApi.Model.Types.Primitive.U32 global_farm_id, Substrate.NetApi.Model.Types.Primitive.U32 asset_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(global_farm_id.Encode());
            byteArray.AddRange(asset_id.Encode());
            return new Method(63, "OmnipoolLiquidityMining", 5, "stop_yield_farm", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> resume_yield_farm
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ResumeYieldFarm(Substrate.NetApi.Model.Types.Primitive.U32 global_farm_id, Substrate.NetApi.Model.Types.Primitive.U32 yield_farm_id, Substrate.NetApi.Model.Types.Primitive.U32 asset_id, Hydration.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128 multiplier)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(global_farm_id.Encode());
            byteArray.AddRange(yield_farm_id.Encode());
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(multiplier.Encode());
            return new Method(63, "OmnipoolLiquidityMining", 6, "resume_yield_farm", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> terminate_yield_farm
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method TerminateYieldFarm(Substrate.NetApi.Model.Types.Primitive.U32 global_farm_id, Substrate.NetApi.Model.Types.Primitive.U32 yield_farm_id, Substrate.NetApi.Model.Types.Primitive.U32 asset_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(global_farm_id.Encode());
            byteArray.AddRange(yield_farm_id.Encode());
            byteArray.AddRange(asset_id.Encode());
            return new Method(63, "OmnipoolLiquidityMining", 7, "terminate_yield_farm", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> deposit_shares
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method DepositShares(Substrate.NetApi.Model.Types.Primitive.U32 global_farm_id, Substrate.NetApi.Model.Types.Primitive.U32 yield_farm_id, Substrate.NetApi.Model.Types.Primitive.U128 position_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(global_farm_id.Encode());
            byteArray.AddRange(yield_farm_id.Encode());
            byteArray.AddRange(position_id.Encode());
            return new Method(63, "OmnipoolLiquidityMining", 8, "deposit_shares", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> redeposit_shares
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RedepositShares(Substrate.NetApi.Model.Types.Primitive.U32 global_farm_id, Substrate.NetApi.Model.Types.Primitive.U32 yield_farm_id, Substrate.NetApi.Model.Types.Primitive.U128 deposit_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(global_farm_id.Encode());
            byteArray.AddRange(yield_farm_id.Encode());
            byteArray.AddRange(deposit_id.Encode());
            return new Method(63, "OmnipoolLiquidityMining", 9, "redeposit_shares", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim_rewards
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClaimRewards(Substrate.NetApi.Model.Types.Primitive.U128 deposit_id, Substrate.NetApi.Model.Types.Primitive.U32 yield_farm_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(deposit_id.Encode());
            byteArray.AddRange(yield_farm_id.Encode());
            return new Method(63, "OmnipoolLiquidityMining", 10, "claim_rewards", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> withdraw_shares
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method WithdrawShares(Substrate.NetApi.Model.Types.Primitive.U128 deposit_id, Substrate.NetApi.Model.Types.Primitive.U32 yield_farm_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(deposit_id.Encode());
            byteArray.AddRange(yield_farm_id.Encode());
            return new Method(63, "OmnipoolLiquidityMining", 11, "withdraw_shares", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> OmnipoolLiquidityMiningConstants
    /// </summary>
    public sealed class OmnipoolLiquidityMiningConstants
    {
        
        /// <summary>
        /// >> NFTCollectionId
        ///  NFT collection id for liquidity mining's deposit nfts.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 NFTCollectionId()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x180A0000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> OracleSource
        ///  Identifier of oracle data soruce
        /// </summary>
        public Hydration.NetApi.Generated.Types.Base.Arr8U8 OracleSource()
        {
            var result = new Hydration.NetApi.Generated.Types.Base.Arr8U8();
            result.Create("0x6F6D6E69706F6F6C");
            return result;
        }
        
        /// <summary>
        /// >> OraclePeriod
        ///  Oracle's price aggregation period.
        /// </summary>
        public Hydration.NetApi.Generated.Model.hydradx_traits.oracle.EnumOraclePeriod OraclePeriod()
        {
            var result = new Hydration.NetApi.Generated.Model.hydradx_traits.oracle.EnumOraclePeriod();
            result.Create("0x02");
            return result;
        }
    }
    
    /// <summary>
    /// >> OmnipoolLiquidityMiningErrors
    /// </summary>
    public enum OmnipoolLiquidityMiningErrors
    {
        
        /// <summary>
        /// >> AssetNotFound
        /// Asset is not in the omnipool.
        /// </summary>
        AssetNotFound,
        
        /// <summary>
        /// >> Forbidden
        /// Signed account is not owner of the deposit.
        /// </summary>
        Forbidden,
        
        /// <summary>
        /// >> ZeroClaimedRewards
        /// Rewards to claim are 0.
        /// </summary>
        ZeroClaimedRewards,
        
        /// <summary>
        /// >> InconsistentState
        /// Action cannot be completed because unexpected error has occurred. This should be reported
        /// to protocol maintainers.
        /// </summary>
        InconsistentState,
        
        /// <summary>
        /// >> OracleNotAvailable
        /// Oracle could not be found for requested assets.
        /// </summary>
        OracleNotAvailable,
        
        /// <summary>
        /// >> PriceAdjustmentNotAvailable
        /// Oracle providing `price_adjustment` could not be found for requested assets.
        /// </summary>
        PriceAdjustmentNotAvailable,
    }
}
