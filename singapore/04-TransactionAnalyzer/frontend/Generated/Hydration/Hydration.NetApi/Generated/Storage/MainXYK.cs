//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Hydration.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> XYKStorage
    /// </summary>
    public sealed class XYKStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> XYKStorage Constructor
        /// </summary>
        public XYKStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("XYK", "ShareToken"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("XYK", "TotalLiquidity"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("XYK", "PoolAssets"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>)));
        }
        
        /// <summary>
        /// >> ShareTokenParams
        ///  Asset id storage for shared pool tokens
        /// </summary>
        public static string ShareTokenParams(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("XYK", "ShareToken", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ShareTokenDefault
        /// Default value as hex string
        /// </summary>
        public static string ShareTokenDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> ShareToken
        ///  Asset id storage for shared pool tokens
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> ShareToken(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = XYKStorage.ShareTokenParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TotalLiquidityParams
        ///  Total liquidity in a pool.
        /// </summary>
        public static string TotalLiquidityParams(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("XYK", "TotalLiquidity", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> TotalLiquidityDefault
        /// Default value as hex string
        /// </summary>
        public static string TotalLiquidityDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> TotalLiquidity
        ///  Total liquidity in a pool.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> TotalLiquidity(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = XYKStorage.TotalLiquidityParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PoolAssetsParams
        ///  Asset pair in a pool.
        /// </summary>
        public static string PoolAssetsParams(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("XYK", "PoolAssets", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PoolAssetsDefault
        /// Default value as hex string
        /// </summary>
        public static string PoolAssetsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PoolAssets
        ///  Asset pair in a pool.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>> PoolAssets(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = XYKStorage.PoolAssetsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> XYKCalls
    /// </summary>
    public sealed class XYKCalls
    {
        
        /// <summary>
        /// >> create_pool
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CreatePool(Substrate.NetApi.Model.Types.Primitive.U32 asset_a, Substrate.NetApi.Model.Types.Primitive.U128 amount_a, Substrate.NetApi.Model.Types.Primitive.U32 asset_b, Substrate.NetApi.Model.Types.Primitive.U128 amount_b)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_a.Encode());
            byteArray.AddRange(amount_a.Encode());
            byteArray.AddRange(asset_b.Encode());
            byteArray.AddRange(amount_b.Encode());
            return new Method(74, "XYK", 0, "create_pool", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_liquidity
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddLiquidity(Substrate.NetApi.Model.Types.Primitive.U32 asset_a, Substrate.NetApi.Model.Types.Primitive.U32 asset_b, Substrate.NetApi.Model.Types.Primitive.U128 amount_a, Substrate.NetApi.Model.Types.Primitive.U128 amount_b_max_limit)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_a.Encode());
            byteArray.AddRange(asset_b.Encode());
            byteArray.AddRange(amount_a.Encode());
            byteArray.AddRange(amount_b_max_limit.Encode());
            return new Method(74, "XYK", 1, "add_liquidity", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_liquidity
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveLiquidity(Substrate.NetApi.Model.Types.Primitive.U32 asset_a, Substrate.NetApi.Model.Types.Primitive.U32 asset_b, Substrate.NetApi.Model.Types.Primitive.U128 liquidity_amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_a.Encode());
            byteArray.AddRange(asset_b.Encode());
            byteArray.AddRange(liquidity_amount.Encode());
            return new Method(74, "XYK", 2, "remove_liquidity", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> sell
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Sell(Substrate.NetApi.Model.Types.Primitive.U32 asset_in, Substrate.NetApi.Model.Types.Primitive.U32 asset_out, Substrate.NetApi.Model.Types.Primitive.U128 amount, Substrate.NetApi.Model.Types.Primitive.U128 max_limit, Substrate.NetApi.Model.Types.Primitive.Bool discount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_in.Encode());
            byteArray.AddRange(asset_out.Encode());
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(max_limit.Encode());
            byteArray.AddRange(discount.Encode());
            return new Method(74, "XYK", 3, "sell", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> buy
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Buy(Substrate.NetApi.Model.Types.Primitive.U32 asset_out, Substrate.NetApi.Model.Types.Primitive.U32 asset_in, Substrate.NetApi.Model.Types.Primitive.U128 amount, Substrate.NetApi.Model.Types.Primitive.U128 max_limit, Substrate.NetApi.Model.Types.Primitive.Bool discount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_out.Encode());
            byteArray.AddRange(asset_in.Encode());
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(max_limit.Encode());
            byteArray.AddRange(discount.Encode());
            return new Method(74, "XYK", 4, "buy", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> XYKConstants
    /// </summary>
    public sealed class XYKConstants
    {
        
        /// <summary>
        /// >> NativeAssetId
        ///  Native Asset Id
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 NativeAssetId()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00000000");
            return result;
        }
        
        /// <summary>
        /// >> GetExchangeFee
        ///  Trading fee rate
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> GetExchangeFee()
        {
            var result = new Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>();
            result.Create("0x03000000E8030000");
            return result;
        }
        
        /// <summary>
        /// >> MinTradingLimit
        ///  Minimum trading limit
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinTradingLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0xE8030000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MinPoolLiquidity
        ///  Minimum pool liquidity
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinPoolLiquidity()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x40420F00000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxInRatio
        ///  Max fraction of pool to sell in single transaction
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MaxInRatio()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x03000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxOutRatio
        ///  Max fraction of pool to buy in single transaction
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MaxOutRatio()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x03000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> OracleSource
        ///  Oracle source identifier for this pallet.
        /// </summary>
        public Hydration.NetApi.Generated.Types.Base.Arr8U8 OracleSource()
        {
            var result = new Hydration.NetApi.Generated.Types.Base.Arr8U8();
            result.Create("0x687964726178796B");
            return result;
        }
    }
    
    /// <summary>
    /// >> XYKErrors
    /// </summary>
    public enum XYKErrors
    {
        
        /// <summary>
        /// >> CannotCreatePoolWithSameAssets
        /// It is not allowed to create a pool between same assets.
        /// </summary>
        CannotCreatePoolWithSameAssets,
        
        /// <summary>
        /// >> InsufficientLiquidity
        /// Liquidity has not reached the required minimum.
        /// </summary>
        InsufficientLiquidity,
        
        /// <summary>
        /// >> InsufficientTradingAmount
        /// Amount is less than min trading limit.
        /// </summary>
        InsufficientTradingAmount,
        
        /// <summary>
        /// >> ZeroLiquidity
        /// Liquidity is zero.
        /// </summary>
        ZeroLiquidity,
        
        /// <summary>
        /// >> ZeroInitialPrice
        /// It is not allowed to create a pool with zero initial price.
        /// Not used, kept for backward compatibility
        /// </summary>
        ZeroInitialPrice,
        
        /// <summary>
        /// >> CreatePoolAssetAmountInvalid
        /// Overflow
        /// Not used, kept for backward compatibility
        /// </summary>
        CreatePoolAssetAmountInvalid,
        
        /// <summary>
        /// >> InvalidMintedLiquidity
        /// Overflow
        /// </summary>
        InvalidMintedLiquidity,
        
        /// <summary>
        /// >> InvalidLiquidityAmount
        /// Overflow
        /// </summary>
        InvalidLiquidityAmount,
        
        /// <summary>
        /// >> AssetAmountExceededLimit
        /// Asset amount has exceeded given limit.
        /// </summary>
        AssetAmountExceededLimit,
        
        /// <summary>
        /// >> AssetAmountNotReachedLimit
        /// Asset amount has not reached given limit.
        /// </summary>
        AssetAmountNotReachedLimit,
        
        /// <summary>
        /// >> InsufficientAssetBalance
        /// Asset balance is not sufficient.
        /// </summary>
        InsufficientAssetBalance,
        
        /// <summary>
        /// >> InsufficientPoolAssetBalance
        /// Not enough asset liquidity in the pool.
        /// </summary>
        InsufficientPoolAssetBalance,
        
        /// <summary>
        /// >> InsufficientNativeCurrencyBalance
        /// Not enough core asset liquidity in the pool.
        /// </summary>
        InsufficientNativeCurrencyBalance,
        
        /// <summary>
        /// >> TokenPoolNotFound
        /// Liquidity pool for given assets does not exist.
        /// </summary>
        TokenPoolNotFound,
        
        /// <summary>
        /// >> TokenPoolAlreadyExists
        /// Liquidity pool for given assets already exists.
        /// </summary>
        TokenPoolAlreadyExists,
        
        /// <summary>
        /// >> AddAssetAmountInvalid
        /// Overflow
        /// </summary>
        AddAssetAmountInvalid,
        
        /// <summary>
        /// >> RemoveAssetAmountInvalid
        /// Overflow
        /// </summary>
        RemoveAssetAmountInvalid,
        
        /// <summary>
        /// >> SellAssetAmountInvalid
        /// Overflow
        /// </summary>
        SellAssetAmountInvalid,
        
        /// <summary>
        /// >> BuyAssetAmountInvalid
        /// Overflow
        /// </summary>
        BuyAssetAmountInvalid,
        
        /// <summary>
        /// >> FeeAmountInvalid
        /// Overflow
        /// </summary>
        FeeAmountInvalid,
        
        /// <summary>
        /// >> CannotApplyDiscount
        /// Overflow
        /// </summary>
        CannotApplyDiscount,
        
        /// <summary>
        /// >> MaxOutRatioExceeded
        /// Max fraction of pool to buy in single transaction has been exceeded.
        /// </summary>
        MaxOutRatioExceeded,
        
        /// <summary>
        /// >> MaxInRatioExceeded
        /// Max fraction of pool to sell in single transaction has been exceeded.
        /// </summary>
        MaxInRatioExceeded,
        
        /// <summary>
        /// >> Overflow
        /// Overflow
        /// </summary>
        Overflow,
        
        /// <summary>
        /// >> CannotCreatePool
        /// Pool cannot be created due to outside factors.
        /// </summary>
        CannotCreatePool,
    }
}
