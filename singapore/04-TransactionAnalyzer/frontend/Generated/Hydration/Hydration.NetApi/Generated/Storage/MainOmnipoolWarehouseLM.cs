//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Hydration.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> OmnipoolWarehouseLMStorage
    /// </summary>
    public sealed class OmnipoolWarehouseLMStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> OmnipoolWarehouseLMStorage Constructor
        /// </summary>
        public OmnipoolWarehouseLMStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("OmnipoolWarehouseLM", "FarmSequencer"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("OmnipoolWarehouseLM", "DepositSequencer"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("OmnipoolWarehouseLM", "GlobalFarm"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Hydration.NetApi.Generated.Model.pallet_liquidity_mining.types.GlobalFarmDataT1)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("OmnipoolWarehouseLM", "YieldFarm"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>), typeof(Hydration.NetApi.Generated.Model.pallet_liquidity_mining.types.YieldFarmDataT1)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("OmnipoolWarehouseLM", "Deposit"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(Hydration.NetApi.Generated.Model.pallet_liquidity_mining.types.DepositDataT1)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("OmnipoolWarehouseLM", "ActiveYieldFarm"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
        }
        
        /// <summary>
        /// >> FarmSequencerParams
        ///  Id sequencer for `GlobalFarm` and `YieldFarm`.
        /// </summary>
        public static string FarmSequencerParams()
        {
            return RequestGenerator.GetStorage("OmnipoolWarehouseLM", "FarmSequencer", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> FarmSequencerDefault
        /// Default value as hex string
        /// </summary>
        public static string FarmSequencerDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> FarmSequencer
        ///  Id sequencer for `GlobalFarm` and `YieldFarm`.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> FarmSequencer(string blockhash, CancellationToken token)
        {
            string parameters = OmnipoolWarehouseLMStorage.FarmSequencerParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DepositSequencerParams
        /// </summary>
        public static string DepositSequencerParams()
        {
            return RequestGenerator.GetStorage("OmnipoolWarehouseLM", "DepositSequencer", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> DepositSequencerDefault
        /// Default value as hex string
        /// </summary>
        public static string DepositSequencerDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> DepositSequencer
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> DepositSequencer(string blockhash, CancellationToken token)
        {
            string parameters = OmnipoolWarehouseLMStorage.DepositSequencerParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> GlobalFarmParams
        /// </summary>
        public static string GlobalFarmParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("OmnipoolWarehouseLM", "GlobalFarm", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> GlobalFarmDefault
        /// Default value as hex string
        /// </summary>
        public static string GlobalFarmDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> GlobalFarm
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.pallet_liquidity_mining.types.GlobalFarmDataT1> GlobalFarm(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = OmnipoolWarehouseLMStorage.GlobalFarmParams(key);
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.pallet_liquidity_mining.types.GlobalFarmDataT1>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> YieldFarmParams
        ///  Yield farm details.
        /// </summary>
        public static string YieldFarmParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("OmnipoolWarehouseLM", "YieldFarm", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> YieldFarmDefault
        /// Default value as hex string
        /// </summary>
        public static string YieldFarmDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> YieldFarm
        ///  Yield farm details.
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.pallet_liquidity_mining.types.YieldFarmDataT1> YieldFarm(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> key, string blockhash, CancellationToken token)
        {
            string parameters = OmnipoolWarehouseLMStorage.YieldFarmParams(key);
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.pallet_liquidity_mining.types.YieldFarmDataT1>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DepositParams
        ///  Deposit details.
        /// </summary>
        public static string DepositParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("OmnipoolWarehouseLM", "Deposit", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> DepositDefault
        /// Default value as hex string
        /// </summary>
        public static string DepositDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Deposit
        ///  Deposit details.
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.pallet_liquidity_mining.types.DepositDataT1> Deposit(Substrate.NetApi.Model.Types.Primitive.U128 key, string blockhash, CancellationToken token)
        {
            string parameters = OmnipoolWarehouseLMStorage.DepositParams(key);
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.pallet_liquidity_mining.types.DepositDataT1>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ActiveYieldFarmParams
        ///  Active(farms able to receive LP shares deposits) yield farms.
        /// </summary>
        public static string ActiveYieldFarmParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("OmnipoolWarehouseLM", "ActiveYieldFarm", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ActiveYieldFarmDefault
        /// Default value as hex string
        /// </summary>
        public static string ActiveYieldFarmDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ActiveYieldFarm
        ///  Active(farms able to receive LP shares deposits) yield farms.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> ActiveYieldFarm(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> key, string blockhash, CancellationToken token)
        {
            string parameters = OmnipoolWarehouseLMStorage.ActiveYieldFarmParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> OmnipoolWarehouseLMCalls
    /// </summary>
    public sealed class OmnipoolWarehouseLMCalls
    {
    }
    
    /// <summary>
    /// >> OmnipoolWarehouseLMConstants
    /// </summary>
    public sealed class OmnipoolWarehouseLMConstants
    {
        
        /// <summary>
        /// >> PalletId
        ///  Pallet id.
        /// </summary>
        public Hydration.NetApi.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new Hydration.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x4F6D6E6957684C4D");
            return result;
        }
        
        /// <summary>
        /// >> TreasuryAccountId
        ///  Treasury account to receive claimed rewards lower than ED
        /// </summary>
        public Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 TreasuryAccountId()
        {
            var result = new Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32();
            result.Create("0x6D6F646C70792F74727372790000000000000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MinTotalFarmRewards
        ///  Minimum total rewards to distribute from global farm during liquidity mining.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinTotalFarmRewards()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0010A5D4E80000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MinPlannedYieldingPeriods
        ///  Minimum number of periods to run liquidity mining program.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MinPlannedYieldingPeriods()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x68380000");
            return result;
        }
        
        /// <summary>
        /// >> MaxFarmEntriesPerDeposit
        ///  Maximum number of yield farms same LP shares can be re/deposited into. This value always
        ///  MUST BE >= 1.         
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxFarmEntriesPerDeposit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x05000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxYieldFarmsPerGlobalFarm
        ///  Max number of yield farms can exist in global farm. This includes all farms in the
        ///  storage(active, stopped, terminated).
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxYieldFarmsPerGlobalFarm()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x32000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> OmnipoolWarehouseLMErrors
    /// </summary>
    public enum OmnipoolWarehouseLMErrors
    {
        
        /// <summary>
        /// >> GlobalFarmNotFound
        /// Global farm does not exist.
        /// </summary>
        GlobalFarmNotFound,
        
        /// <summary>
        /// >> YieldFarmNotFound
        /// Yield farm does not exist.
        /// </summary>
        YieldFarmNotFound,
        
        /// <summary>
        /// >> DoubleClaimInPeriod
        /// Multiple claims in the same period is not allowed.
        /// </summary>
        DoubleClaimInPeriod,
        
        /// <summary>
        /// >> LiquidityMiningCanceled
        /// Liquidity mining is canceled.
        /// </summary>
        LiquidityMiningCanceled,
        
        /// <summary>
        /// >> LiquidityMiningIsActive
        /// Liquidity mining is not canceled.
        /// </summary>
        LiquidityMiningIsActive,
        
        /// <summary>
        /// >> LiquidityMiningIsNotStopped
        /// Liquidity mining is in `active` or `terminated` state and action cannot be completed.
        /// </summary>
        LiquidityMiningIsNotStopped,
        
        /// <summary>
        /// >> InvalidDepositAmount
        /// LP shares amount is not valid.
        /// </summary>
        InvalidDepositAmount,
        
        /// <summary>
        /// >> Forbidden
        /// Account is not allowed to perform action.
        /// </summary>
        Forbidden,
        
        /// <summary>
        /// >> InvalidMultiplier
        /// Yield farm multiplier can't be 0.
        /// </summary>
        InvalidMultiplier,
        
        /// <summary>
        /// >> YieldFarmAlreadyExists
        /// Yield farm with given `amm_pool_id` already exists in global farm.
        /// </summary>
        YieldFarmAlreadyExists,
        
        /// <summary>
        /// >> InvalidInitialRewardPercentage
        /// Loyalty curve's initial reward percentage is not valid. Valid range is: [0, 1).
        /// </summary>
        InvalidInitialRewardPercentage,
        
        /// <summary>
        /// >> GlobalFarmIsNotEmpty
        /// One or more yield farms exist in global farm.
        /// </summary>
        GlobalFarmIsNotEmpty,
        
        /// <summary>
        /// >> MissingIncentivizedAsset
        /// Farm's `incentivized_asset` is missing in provided asset pair.
        /// </summary>
        MissingIncentivizedAsset,
        
        /// <summary>
        /// >> InsufficientRewardCurrencyBalance
        /// Reward currency balance is not sufficient.
        /// </summary>
        InsufficientRewardCurrencyBalance,
        
        /// <summary>
        /// >> InvalidBlocksPerPeriod
        /// Blocks per period can't be 0.
        /// </summary>
        InvalidBlocksPerPeriod,
        
        /// <summary>
        /// >> InvalidYieldPerPeriod
        /// Yield per period can't be 0.
        /// </summary>
        InvalidYieldPerPeriod,
        
        /// <summary>
        /// >> InvalidTotalRewards
        /// Total rewards is less than `MinTotalFarmRewards`.
        /// </summary>
        InvalidTotalRewards,
        
        /// <summary>
        /// >> InvalidPlannedYieldingPeriods
        /// Planned yielding periods is less than `MinPlannedYieldingPeriods`.
        /// </summary>
        InvalidPlannedYieldingPeriods,
        
        /// <summary>
        /// >> MaxEntriesPerDeposit
        /// Maximum number of locks reached for deposit.
        /// </summary>
        MaxEntriesPerDeposit,
        
        /// <summary>
        /// >> DoubleLock
        /// Trying to lock LP shares into already locked yield farm.
        /// </summary>
        DoubleLock,
        
        /// <summary>
        /// >> YieldFarmEntryNotFound
        /// Yield farm entry doesn't exist for given deposit.
        /// </summary>
        YieldFarmEntryNotFound,
        
        /// <summary>
        /// >> GlobalFarmIsFull
        /// Max number of yield farms in global farm was reached. Global farm can't accept new
        /// yield farms until some yield farm is not removed from storage.
        /// </summary>
        GlobalFarmIsFull,
        
        /// <summary>
        /// >> InvalidMinDeposit
        /// Invalid min. deposit was set for global farm.
        /// </summary>
        InvalidMinDeposit,
        
        /// <summary>
        /// >> InvalidPriceAdjustment
        /// Price adjustment multiplier can't be 0.
        /// </summary>
        InvalidPriceAdjustment,
        
        /// <summary>
        /// >> ErrorGetAccountId
        /// Account creation from id failed.
        /// </summary>
        ErrorGetAccountId,
        
        /// <summary>
        /// >> IncorrectValuedShares
        /// Value of deposited shares amount in reward currency is bellow min. limit.
        /// </summary>
        IncorrectValuedShares,
        
        /// <summary>
        /// >> RewardCurrencyNotRegistered
        /// `reward_currency` is not registered in asset registry.
        /// </summary>
        RewardCurrencyNotRegistered,
        
        /// <summary>
        /// >> IncentivizedAssetNotRegistered
        /// `incentivized_asset` is not registered in asset registry.
        /// </summary>
        IncentivizedAssetNotRegistered,
        
        /// <summary>
        /// >> InconsistentState
        /// Action cannot be completed because unexpected error has occurred. This should be reported
        /// to protocol maintainers.
        /// </summary>
        InconsistentState,
    }
}
