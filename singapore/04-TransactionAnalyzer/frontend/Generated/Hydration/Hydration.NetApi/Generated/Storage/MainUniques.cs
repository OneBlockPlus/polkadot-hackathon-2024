//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Hydration.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> UniquesStorage
    /// </summary>
    public sealed class UniquesStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> UniquesStorage Constructor
        /// </summary>
        public UniquesStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Uniques", "Class"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(Hydration.NetApi.Generated.Model.pallet_uniques.types.CollectionDetails)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Uniques", "OwnershipAcceptance"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Uniques", "Account"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Uniques", "ClassAccount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Uniques", "Asset"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>), typeof(Hydration.NetApi.Generated.Model.pallet_uniques.types.ItemDetails)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Uniques", "ClassMetadataOf"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(Hydration.NetApi.Generated.Model.pallet_uniques.types.CollectionMetadata)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Uniques", "InstanceMetadataOf"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>), typeof(Hydration.NetApi.Generated.Model.pallet_uniques.types.ItemMetadata)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Uniques", "Attribute"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128>, Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT3>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4, Substrate.NetApi.Model.Types.Primitive.U128>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Uniques", "ItemPriceOf"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Base.BaseOpt<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32>>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Uniques", "CollectionMaxSupply"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
        }
        
        /// <summary>
        /// >> ClassParams
        ///  Details of a collection.
        /// </summary>
        public static string ClassParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("Uniques", "Class", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ClassDefault
        /// Default value as hex string
        /// </summary>
        public static string ClassDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Class
        ///  Details of a collection.
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.pallet_uniques.types.CollectionDetails> Class(Substrate.NetApi.Model.Types.Primitive.U128 key, string blockhash, CancellationToken token)
        {
            string parameters = UniquesStorage.ClassParams(key);
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.pallet_uniques.types.CollectionDetails>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OwnershipAcceptanceParams
        ///  The collection, if any, of which an account is willing to take ownership.
        /// </summary>
        public static string OwnershipAcceptanceParams(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Uniques", "OwnershipAcceptance", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> OwnershipAcceptanceDefault
        /// Default value as hex string
        /// </summary>
        public static string OwnershipAcceptanceDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> OwnershipAcceptance
        ///  The collection, if any, of which an account is willing to take ownership.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> OwnershipAcceptance(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = UniquesStorage.OwnershipAcceptanceParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AccountParams
        ///  The items held by any given account; set out this way so that items owned by a single
        ///  account can be enumerated.
        /// </summary>
        public static string AccountParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key)
        {
            return RequestGenerator.GetStorage("Uniques", "Account", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> AccountDefault
        /// Default value as hex string
        /// </summary>
        public static string AccountDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Account
        ///  The items held by any given account; set out this way so that items owned by a single
        ///  account can be enumerated.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> Account(Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key, string blockhash, CancellationToken token)
        {
            string parameters = UniquesStorage.AccountParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ClassAccountParams
        ///  The collections owned by any given account; set out this way so that collections owned by
        ///  a single account can be enumerated.
        /// </summary>
        public static string ClassAccountParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128> key)
        {
            return RequestGenerator.GetStorage("Uniques", "ClassAccount", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ClassAccountDefault
        /// Default value as hex string
        /// </summary>
        public static string ClassAccountDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ClassAccount
        ///  The collections owned by any given account; set out this way so that collections owned by
        ///  a single account can be enumerated.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> ClassAccount(Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128> key, string blockhash, CancellationToken token)
        {
            string parameters = UniquesStorage.ClassAccountParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AssetParams
        ///  The items in existence and their ownership details.
        /// </summary>
        public static string AssetParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key)
        {
            return RequestGenerator.GetStorage("Uniques", "Asset", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> AssetDefault
        /// Default value as hex string
        /// </summary>
        public static string AssetDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Asset
        ///  The items in existence and their ownership details.
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.pallet_uniques.types.ItemDetails> Asset(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key, string blockhash, CancellationToken token)
        {
            string parameters = UniquesStorage.AssetParams(key);
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.pallet_uniques.types.ItemDetails>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ClassMetadataOfParams
        ///  Metadata of a collection.
        /// </summary>
        public static string ClassMetadataOfParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("Uniques", "ClassMetadataOf", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ClassMetadataOfDefault
        /// Default value as hex string
        /// </summary>
        public static string ClassMetadataOfDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ClassMetadataOf
        ///  Metadata of a collection.
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.pallet_uniques.types.CollectionMetadata> ClassMetadataOf(Substrate.NetApi.Model.Types.Primitive.U128 key, string blockhash, CancellationToken token)
        {
            string parameters = UniquesStorage.ClassMetadataOfParams(key);
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.pallet_uniques.types.CollectionMetadata>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> InstanceMetadataOfParams
        ///  Metadata of an item.
        /// </summary>
        public static string InstanceMetadataOfParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key)
        {
            return RequestGenerator.GetStorage("Uniques", "InstanceMetadataOf", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> InstanceMetadataOfDefault
        /// Default value as hex string
        /// </summary>
        public static string InstanceMetadataOfDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> InstanceMetadataOf
        ///  Metadata of an item.
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.pallet_uniques.types.ItemMetadata> InstanceMetadataOf(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key, string blockhash, CancellationToken token)
        {
            string parameters = UniquesStorage.InstanceMetadataOfParams(key);
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.pallet_uniques.types.ItemMetadata>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AttributeParams
        ///  Attributes of a collection.
        /// </summary>
        public static string AttributeParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128>, Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT3> key)
        {
            return RequestGenerator.GetStorage("Uniques", "Attribute", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> AttributeDefault
        /// Default value as hex string
        /// </summary>
        public static string AttributeDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Attribute
        ///  Attributes of a collection.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4, Substrate.NetApi.Model.Types.Primitive.U128>> Attribute(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128>, Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT3> key, string blockhash, CancellationToken token)
        {
            string parameters = UniquesStorage.AttributeParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4, Substrate.NetApi.Model.Types.Primitive.U128>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ItemPriceOfParams
        ///  Price of an asset instance.
        /// </summary>
        public static string ItemPriceOfParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key)
        {
            return RequestGenerator.GetStorage("Uniques", "ItemPriceOf", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ItemPriceOfDefault
        /// Default value as hex string
        /// </summary>
        public static string ItemPriceOfDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ItemPriceOf
        ///  Price of an asset instance.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Base.BaseOpt<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32>>> ItemPriceOf(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key, string blockhash, CancellationToken token)
        {
            string parameters = UniquesStorage.ItemPriceOfParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Base.BaseOpt<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32>>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CollectionMaxSupplyParams
        ///  Keeps track of the number of items a collection might have.
        /// </summary>
        public static string CollectionMaxSupplyParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("Uniques", "CollectionMaxSupply", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CollectionMaxSupplyDefault
        /// Default value as hex string
        /// </summary>
        public static string CollectionMaxSupplyDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CollectionMaxSupply
        ///  Keeps track of the number of items a collection might have.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CollectionMaxSupply(Substrate.NetApi.Model.Types.Primitive.U128 key, string blockhash, CancellationToken token)
        {
            string parameters = UniquesStorage.CollectionMaxSupplyParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> UniquesCalls
    /// </summary>
    public sealed class UniquesCalls
    {
        
        /// <summary>
        /// >> create
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Create(Substrate.NetApi.Model.Types.Primitive.U128 collection, Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 admin)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(admin.Encode());
            return new Method(32, "Uniques", 0, "create", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_create
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceCreate(Substrate.NetApi.Model.Types.Primitive.U128 collection, Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 owner, Substrate.NetApi.Model.Types.Primitive.Bool free_holding)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(owner.Encode());
            byteArray.AddRange(free_holding.Encode());
            return new Method(32, "Uniques", 1, "force_create", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> destroy
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Destroy(Substrate.NetApi.Model.Types.Primitive.U128 collection, Hydration.NetApi.Generated.Model.pallet_uniques.types.DestroyWitness witness)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(witness.Encode());
            return new Method(32, "Uniques", 2, "destroy", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> mint
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Mint(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 item, Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 owner)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            byteArray.AddRange(owner.Encode());
            return new Method(32, "Uniques", 3, "mint", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> burn
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Burn(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 item, Substrate.NetApi.Model.Types.Base.BaseOpt<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32> check_owner)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            byteArray.AddRange(check_owner.Encode());
            return new Method(32, "Uniques", 4, "burn", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> transfer
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Transfer(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 item, Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 dest)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            byteArray.AddRange(dest.Encode());
            return new Method(32, "Uniques", 5, "transfer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> redeposit
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Redeposit(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U128> items)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(items.Encode());
            return new Method(32, "Uniques", 6, "redeposit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> freeze
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Freeze(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 item)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            return new Method(32, "Uniques", 7, "freeze", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> thaw
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Thaw(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 item)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            return new Method(32, "Uniques", 8, "thaw", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> freeze_collection
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method FreezeCollection(Substrate.NetApi.Model.Types.Primitive.U128 collection)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            return new Method(32, "Uniques", 9, "freeze_collection", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> thaw_collection
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ThawCollection(Substrate.NetApi.Model.Types.Primitive.U128 collection)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            return new Method(32, "Uniques", 10, "thaw_collection", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> transfer_ownership
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method TransferOwnership(Substrate.NetApi.Model.Types.Primitive.U128 collection, Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 new_owner)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(new_owner.Encode());
            return new Method(32, "Uniques", 11, "transfer_ownership", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_team
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetTeam(Substrate.NetApi.Model.Types.Primitive.U128 collection, Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 issuer, Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 admin, Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 freezer)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(issuer.Encode());
            byteArray.AddRange(admin.Encode());
            byteArray.AddRange(freezer.Encode());
            return new Method(32, "Uniques", 12, "set_team", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> approve_transfer
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ApproveTransfer(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 item, Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 @delegate)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            byteArray.AddRange(@delegate.Encode());
            return new Method(32, "Uniques", 13, "approve_transfer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel_approval
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CancelApproval(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 item, Substrate.NetApi.Model.Types.Base.BaseOpt<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32> maybe_check_delegate)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            byteArray.AddRange(maybe_check_delegate.Encode());
            return new Method(32, "Uniques", 14, "cancel_approval", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_item_status
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceItemStatus(Substrate.NetApi.Model.Types.Primitive.U128 collection, Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 owner, Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 issuer, Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 admin, Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 freezer, Substrate.NetApi.Model.Types.Primitive.Bool free_holding, Substrate.NetApi.Model.Types.Primitive.Bool is_frozen)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(owner.Encode());
            byteArray.AddRange(issuer.Encode());
            byteArray.AddRange(admin.Encode());
            byteArray.AddRange(freezer.Encode());
            byteArray.AddRange(free_holding.Encode());
            byteArray.AddRange(is_frozen.Encode());
            return new Method(32, "Uniques", 15, "force_item_status", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_attribute
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetAttribute(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> maybe_item, Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT3 key, Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4 value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(maybe_item.Encode());
            byteArray.AddRange(key.Encode());
            byteArray.AddRange(value.Encode());
            return new Method(32, "Uniques", 16, "set_attribute", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> clear_attribute
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClearAttribute(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> maybe_item, Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT3 key)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(maybe_item.Encode());
            byteArray.AddRange(key.Encode());
            return new Method(32, "Uniques", 17, "clear_attribute", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_metadata
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetMetadata(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 item, Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT2 data, Substrate.NetApi.Model.Types.Primitive.Bool is_frozen)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            byteArray.AddRange(data.Encode());
            byteArray.AddRange(is_frozen.Encode());
            return new Method(32, "Uniques", 18, "set_metadata", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> clear_metadata
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClearMetadata(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 item)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            return new Method(32, "Uniques", 19, "clear_metadata", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_collection_metadata
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetCollectionMetadata(Substrate.NetApi.Model.Types.Primitive.U128 collection, Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT2 data, Substrate.NetApi.Model.Types.Primitive.Bool is_frozen)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(data.Encode());
            byteArray.AddRange(is_frozen.Encode());
            return new Method(32, "Uniques", 20, "set_collection_metadata", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> clear_collection_metadata
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClearCollectionMetadata(Substrate.NetApi.Model.Types.Primitive.U128 collection)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            return new Method(32, "Uniques", 21, "clear_collection_metadata", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_accept_ownership
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetAcceptOwnership(Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> maybe_collection)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(maybe_collection.Encode());
            return new Method(32, "Uniques", 22, "set_accept_ownership", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_collection_max_supply
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetCollectionMaxSupply(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U32 max_supply)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(max_supply.Encode());
            return new Method(32, "Uniques", 23, "set_collection_max_supply", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_price
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetPrice(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 item, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> price, Substrate.NetApi.Model.Types.Base.BaseOpt<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32> whitelisted_buyer)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            byteArray.AddRange(price.Encode());
            byteArray.AddRange(whitelisted_buyer.Encode());
            return new Method(32, "Uniques", 24, "set_price", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> buy_item
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method BuyItem(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 item, Substrate.NetApi.Model.Types.Primitive.U128 bid_price)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            byteArray.AddRange(bid_price.Encode());
            return new Method(32, "Uniques", 25, "buy_item", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> UniquesConstants
    /// </summary>
    public sealed class UniquesConstants
    {
        
        /// <summary>
        /// >> CollectionDeposit
        ///  The basic amount of funds that must be reserved for collection.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 CollectionDeposit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> ItemDeposit
        ///  The basic amount of funds that must be reserved for an item.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 ItemDeposit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MetadataDepositBase
        ///  The basic amount of funds that must be reserved when adding metadata to your item.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MetadataDepositBase()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0080C6A47E8D03000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> AttributeDepositBase
        ///  The basic amount of funds that must be reserved when adding an attribute to an item.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 AttributeDepositBase()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0010A5D4E80000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> DepositPerByte
        ///  The additional funds that must be reserved for the number of bytes store in metadata,
        ///  either "normal" metadata or attribute metadata.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 DepositPerByte()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0010A5D4E80000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> StringLimit
        ///  The maximum length of data stored on-chain.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 StringLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x48000000");
            return result;
        }
        
        /// <summary>
        /// >> KeyLimit
        ///  The maximum length of an attribute key.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 KeyLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00010000");
            return result;
        }
        
        /// <summary>
        /// >> ValueLimit
        ///  The maximum length of an attribute value.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 ValueLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00040000");
            return result;
        }
    }
    
    /// <summary>
    /// >> UniquesErrors
    /// </summary>
    public enum UniquesErrors
    {
        
        /// <summary>
        /// >> NoPermission
        /// The signing account has no permission to do the operation.
        /// </summary>
        NoPermission,
        
        /// <summary>
        /// >> UnknownCollection
        /// The given item ID is unknown.
        /// </summary>
        UnknownCollection,
        
        /// <summary>
        /// >> AlreadyExists
        /// The item ID has already been used for an item.
        /// </summary>
        AlreadyExists,
        
        /// <summary>
        /// >> WrongOwner
        /// The owner turned out to be different to what was expected.
        /// </summary>
        WrongOwner,
        
        /// <summary>
        /// >> BadWitness
        /// Invalid witness data given.
        /// </summary>
        BadWitness,
        
        /// <summary>
        /// >> InUse
        /// The item ID is already taken.
        /// </summary>
        InUse,
        
        /// <summary>
        /// >> Frozen
        /// The item or collection is frozen.
        /// </summary>
        Frozen,
        
        /// <summary>
        /// >> WrongDelegate
        /// The delegate turned out to be different to what was expected.
        /// </summary>
        WrongDelegate,
        
        /// <summary>
        /// >> NoDelegate
        /// There is no delegate approved.
        /// </summary>
        NoDelegate,
        
        /// <summary>
        /// >> Unapproved
        /// No approval exists that would allow the transfer.
        /// </summary>
        Unapproved,
        
        /// <summary>
        /// >> Unaccepted
        /// The named owner has not signed ownership of the collection is acceptable.
        /// </summary>
        Unaccepted,
        
        /// <summary>
        /// >> Locked
        /// The item is locked.
        /// </summary>
        Locked,
        
        /// <summary>
        /// >> MaxSupplyReached
        /// All items have been minted.
        /// </summary>
        MaxSupplyReached,
        
        /// <summary>
        /// >> MaxSupplyAlreadySet
        /// The max supply has already been set.
        /// </summary>
        MaxSupplyAlreadySet,
        
        /// <summary>
        /// >> MaxSupplyTooSmall
        /// The provided max supply is less to the amount of items a collection already has.
        /// </summary>
        MaxSupplyTooSmall,
        
        /// <summary>
        /// >> UnknownItem
        /// The given item ID is unknown.
        /// </summary>
        UnknownItem,
        
        /// <summary>
        /// >> NotForSale
        /// Item is not for sale.
        /// </summary>
        NotForSale,
        
        /// <summary>
        /// >> BidTooLow
        /// The provided bid is too low.
        /// </summary>
        BidTooLow,
    }
}
