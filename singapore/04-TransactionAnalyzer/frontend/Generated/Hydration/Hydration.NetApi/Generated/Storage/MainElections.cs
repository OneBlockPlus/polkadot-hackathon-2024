//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Hydration.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> ElectionsStorage
    /// </summary>
    public sealed class ElectionsStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> ElectionsStorage Constructor
        /// </summary>
        public ElectionsStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Elections", "Members"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Hydration.NetApi.Generated.Model.pallet_elections_phragmen.SeatHolder>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Elections", "RunnersUp"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Hydration.NetApi.Generated.Model.pallet_elections_phragmen.SeatHolder>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Elections", "Candidates"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128>>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Elections", "ElectionRounds"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Elections", "Voting"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Hydration.NetApi.Generated.Model.pallet_elections_phragmen.Voter)));
        }
        
        /// <summary>
        /// >> MembersParams
        ///  The current elected members.
        /// 
        ///  Invariant: Always sorted based on account id.
        /// </summary>
        public static string MembersParams()
        {
            return RequestGenerator.GetStorage("Elections", "Members", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> MembersDefault
        /// Default value as hex string
        /// </summary>
        public static string MembersDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Members
        ///  The current elected members.
        /// 
        ///  Invariant: Always sorted based on account id.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Hydration.NetApi.Generated.Model.pallet_elections_phragmen.SeatHolder>> Members(string blockhash, CancellationToken token)
        {
            string parameters = ElectionsStorage.MembersParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Hydration.NetApi.Generated.Model.pallet_elections_phragmen.SeatHolder>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RunnersUpParams
        ///  The current reserved runners-up.
        /// 
        ///  Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the
        ///  last (i.e. _best_) runner-up will be replaced.
        /// </summary>
        public static string RunnersUpParams()
        {
            return RequestGenerator.GetStorage("Elections", "RunnersUp", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> RunnersUpDefault
        /// Default value as hex string
        /// </summary>
        public static string RunnersUpDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> RunnersUp
        ///  The current reserved runners-up.
        /// 
        ///  Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the
        ///  last (i.e. _best_) runner-up will be replaced.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Hydration.NetApi.Generated.Model.pallet_elections_phragmen.SeatHolder>> RunnersUp(string blockhash, CancellationToken token)
        {
            string parameters = ElectionsStorage.RunnersUpParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Hydration.NetApi.Generated.Model.pallet_elections_phragmen.SeatHolder>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CandidatesParams
        ///  The present candidate list. A current member or runner-up can never enter this vector
        ///  and is always implicitly assumed to be a candidate.
        /// 
        ///  Second element is the deposit.
        /// 
        ///  Invariant: Always sorted based on account id.
        /// </summary>
        public static string CandidatesParams()
        {
            return RequestGenerator.GetStorage("Elections", "Candidates", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CandidatesDefault
        /// Default value as hex string
        /// </summary>
        public static string CandidatesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Candidates
        ///  The present candidate list. A current member or runner-up can never enter this vector
        ///  and is always implicitly assumed to be a candidate.
        /// 
        ///  Second element is the deposit.
        /// 
        ///  Invariant: Always sorted based on account id.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128>>> Candidates(string blockhash, CancellationToken token)
        {
            string parameters = ElectionsStorage.CandidatesParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128>>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ElectionRoundsParams
        ///  The total number of vote rounds that have happened, excluding the upcoming one.
        /// </summary>
        public static string ElectionRoundsParams()
        {
            return RequestGenerator.GetStorage("Elections", "ElectionRounds", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ElectionRoundsDefault
        /// Default value as hex string
        /// </summary>
        public static string ElectionRoundsDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> ElectionRounds
        ///  The total number of vote rounds that have happened, excluding the upcoming one.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> ElectionRounds(string blockhash, CancellationToken token)
        {
            string parameters = ElectionsStorage.ElectionRoundsParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> VotingParams
        ///  Votes and locked stake of a particular voter.
        /// 
        ///  TWOX-NOTE: SAFE as `AccountId` is a crypto hash.
        /// </summary>
        public static string VotingParams(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Elections", "Voting", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> VotingDefault
        /// Default value as hex string
        /// </summary>
        public static string VotingDefault()
        {
            return "0x000000000000000000000000000000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> Voting
        ///  Votes and locked stake of a particular voter.
        /// 
        ///  TWOX-NOTE: SAFE as `AccountId` is a crypto hash.
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.pallet_elections_phragmen.Voter> Voting(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = ElectionsStorage.VotingParams(key);
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.pallet_elections_phragmen.Voter>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> ElectionsCalls
    /// </summary>
    public sealed class ElectionsCalls
    {
        
        /// <summary>
        /// >> vote
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Vote(Substrate.NetApi.Model.Types.Base.BaseVec<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32> votes, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(votes.Encode());
            byteArray.AddRange(value.Encode());
            return new Method(21, "Elections", 0, "vote", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_voter
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveVoter()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(21, "Elections", 1, "remove_voter", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> submit_candidacy
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SubmitCandidacy(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> candidate_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(candidate_count.Encode());
            return new Method(21, "Elections", 2, "submit_candidacy", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> renounce_candidacy
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RenounceCandidacy(Hydration.NetApi.Generated.Model.pallet_elections_phragmen.EnumRenouncing renouncing)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(renouncing.Encode());
            return new Method(21, "Elections", 3, "renounce_candidacy", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_member
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveMember(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 who, Substrate.NetApi.Model.Types.Primitive.Bool slash_bond, Substrate.NetApi.Model.Types.Primitive.Bool rerun_election)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(slash_bond.Encode());
            byteArray.AddRange(rerun_election.Encode());
            return new Method(21, "Elections", 4, "remove_member", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> clean_defunct_voters
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CleanDefunctVoters(Substrate.NetApi.Model.Types.Primitive.U32 num_voters, Substrate.NetApi.Model.Types.Primitive.U32 num_defunct)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(num_voters.Encode());
            byteArray.AddRange(num_defunct.Encode());
            return new Method(21, "Elections", 5, "clean_defunct_voters", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> ElectionsConstants
    /// </summary>
    public sealed class ElectionsConstants
    {
        
        /// <summary>
        /// >> PalletId
        ///  Identifier for the elections-phragmen pallet's lock
        /// </summary>
        public Hydration.NetApi.Generated.Types.Base.Arr8U8 PalletId()
        {
            var result = new Hydration.NetApi.Generated.Types.Base.Arr8U8();
            result.Create("0x706872656C656374");
            return result;
        }
        
        /// <summary>
        /// >> CandidacyBond
        ///  How much should be locked up in order to submit one's candidacy.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 CandidacyBond()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00406352BFC601000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> VotingBondBase
        ///  Base deposit associated with voting.
        /// 
        ///  This should be sensibly high to economically ensure the pallet cannot be attacked by
        ///  creating a gigantic number of votes.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 VotingBondBase()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0010A5D4E80000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> VotingBondFactor
        ///  The amount of bond that need to be locked for each vote (32 bytes).
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 VotingBondFactor()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0010A5D4E80000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> DesiredMembers
        ///  Number of members to elect.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 DesiredMembers()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x0D000000");
            return result;
        }
        
        /// <summary>
        /// >> DesiredRunnersUp
        ///  Number of runners_up to keep.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 DesiredRunnersUp()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x0F000000");
            return result;
        }
        
        /// <summary>
        /// >> TermDuration
        ///  How long each seat is kept. This defines the next block number at which an election
        ///  round will happen. If set to zero, no elections are ever triggered and the module will
        ///  be in passive mode.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 TermDuration()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xE0C40000");
            return result;
        }
        
        /// <summary>
        /// >> MaxCandidates
        ///  The maximum number of candidates in a phragmen election.
        /// 
        ///  Warning: This impacts the size of the election which is run onchain. Chose wisely, and
        ///  consider how it will impact `T::WeightInfo::election_phragmen`.
        /// 
        ///  When this limit is reached no more candidates are accepted in the election.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxCandidates()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxVoters
        ///  The maximum number of voters to allow in a phragmen election.
        /// 
        ///  Warning: This impacts the size of the election which is run onchain. Chose wisely, and
        ///  consider how it will impact `T::WeightInfo::election_phragmen`.
        /// 
        ///  When the limit is reached the new voters are ignored.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxVoters()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00030000");
            return result;
        }
        
        /// <summary>
        /// >> MaxVotesPerVoter
        ///  Maximum numbers of votes per voter.
        /// 
        ///  Warning: This impacts the size of the election which is run onchain. Chose wisely, and
        ///  consider how it will impact `T::WeightInfo::election_phragmen`.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxVotesPerVoter()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x0A000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> ElectionsErrors
    /// </summary>
    public enum ElectionsErrors
    {
        
        /// <summary>
        /// >> UnableToVote
        /// Cannot vote when no candidates or members exist.
        /// </summary>
        UnableToVote,
        
        /// <summary>
        /// >> NoVotes
        /// Must vote for at least one candidate.
        /// </summary>
        NoVotes,
        
        /// <summary>
        /// >> TooManyVotes
        /// Cannot vote more than candidates.
        /// </summary>
        TooManyVotes,
        
        /// <summary>
        /// >> MaximumVotesExceeded
        /// Cannot vote more than maximum allowed.
        /// </summary>
        MaximumVotesExceeded,
        
        /// <summary>
        /// >> LowBalance
        /// Cannot vote with stake less than minimum balance.
        /// </summary>
        LowBalance,
        
        /// <summary>
        /// >> UnableToPayBond
        /// Voter can not pay voting bond.
        /// </summary>
        UnableToPayBond,
        
        /// <summary>
        /// >> MustBeVoter
        /// Must be a voter.
        /// </summary>
        MustBeVoter,
        
        /// <summary>
        /// >> DuplicatedCandidate
        /// Duplicated candidate submission.
        /// </summary>
        DuplicatedCandidate,
        
        /// <summary>
        /// >> TooManyCandidates
        /// Too many candidates have been created.
        /// </summary>
        TooManyCandidates,
        
        /// <summary>
        /// >> MemberSubmit
        /// Member cannot re-submit candidacy.
        /// </summary>
        MemberSubmit,
        
        /// <summary>
        /// >> RunnerUpSubmit
        /// Runner cannot re-submit candidacy.
        /// </summary>
        RunnerUpSubmit,
        
        /// <summary>
        /// >> InsufficientCandidateFunds
        /// Candidate does not have enough funds.
        /// </summary>
        InsufficientCandidateFunds,
        
        /// <summary>
        /// >> NotMember
        /// Not a member.
        /// </summary>
        NotMember,
        
        /// <summary>
        /// >> InvalidWitnessData
        /// The provided count of number of candidates is incorrect.
        /// </summary>
        InvalidWitnessData,
        
        /// <summary>
        /// >> InvalidVoteCount
        /// The provided count of number of votes is incorrect.
        /// </summary>
        InvalidVoteCount,
        
        /// <summary>
        /// >> InvalidRenouncing
        /// The renouncing origin presented a wrong `Renouncing` parameter.
        /// </summary>
        InvalidRenouncing,
        
        /// <summary>
        /// >> InvalidReplacement
        /// Prediction regarding replacement after member removal is wrong.
        /// </summary>
        InvalidReplacement,
    }
}
