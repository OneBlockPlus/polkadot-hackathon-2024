//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Hydration.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> OTCStorage
    /// </summary>
    public sealed class OTCStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> OTCStorage Constructor
        /// </summary>
        public OTCStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("OTC", "NextOrderId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("OTC", "Orders"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Hydration.NetApi.Generated.Model.pallet_otc.Order)));
        }
        
        /// <summary>
        /// >> NextOrderIdParams
        ///  ID sequencer for Orders
        /// </summary>
        public static string NextOrderIdParams()
        {
            return RequestGenerator.GetStorage("OTC", "NextOrderId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextOrderIdDefault
        /// Default value as hex string
        /// </summary>
        public static string NextOrderIdDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> NextOrderId
        ///  ID sequencer for Orders
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> NextOrderId(string blockhash, CancellationToken token)
        {
            string parameters = OTCStorage.NextOrderIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OrdersParams
        /// </summary>
        public static string OrdersParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("OTC", "Orders", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> OrdersDefault
        /// Default value as hex string
        /// </summary>
        public static string OrdersDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Orders
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.pallet_otc.Order> Orders(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = OTCStorage.OrdersParams(key);
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.pallet_otc.Order>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> OTCCalls
    /// </summary>
    public sealed class OTCCalls
    {
        
        /// <summary>
        /// >> place_order
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method PlaceOrder(Substrate.NetApi.Model.Types.Primitive.U32 asset_in, Substrate.NetApi.Model.Types.Primitive.U32 asset_out, Substrate.NetApi.Model.Types.Primitive.U128 amount_in, Substrate.NetApi.Model.Types.Primitive.U128 amount_out, Substrate.NetApi.Model.Types.Primitive.Bool partially_fillable)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_in.Encode());
            byteArray.AddRange(asset_out.Encode());
            byteArray.AddRange(amount_in.Encode());
            byteArray.AddRange(amount_out.Encode());
            byteArray.AddRange(partially_fillable.Encode());
            return new Method(64, "OTC", 0, "place_order", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> partial_fill_order
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method PartialFillOrder(Substrate.NetApi.Model.Types.Primitive.U32 order_id, Substrate.NetApi.Model.Types.Primitive.U128 amount_in)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(order_id.Encode());
            byteArray.AddRange(amount_in.Encode());
            return new Method(64, "OTC", 1, "partial_fill_order", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> fill_order
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method FillOrder(Substrate.NetApi.Model.Types.Primitive.U32 order_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(order_id.Encode());
            return new Method(64, "OTC", 2, "fill_order", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel_order
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CancelOrder(Substrate.NetApi.Model.Types.Primitive.U32 order_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(order_id.Encode());
            return new Method(64, "OTC", 3, "cancel_order", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> OTCConstants
    /// </summary>
    public sealed class OTCConstants
    {
        
        /// <summary>
        /// >> ExistentialDepositMultiplier
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U8 ExistentialDepositMultiplier()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U8();
            result.Create("0x05");
            return result;
        }
    }
    
    /// <summary>
    /// >> OTCErrors
    /// </summary>
    public enum OTCErrors
    {
        
        /// <summary>
        /// >> AssetNotRegistered
        /// Asset does not exist in registry
        /// </summary>
        AssetNotRegistered,
        
        /// <summary>
        /// >> OrderNotFound
        /// Order cannot be found
        /// </summary>
        OrderNotFound,
        
        /// <summary>
        /// >> OrderIdOutOfBound
        /// Size of order ID exceeds the bound
        /// </summary>
        OrderIdOutOfBound,
        
        /// <summary>
        /// >> OrderNotPartiallyFillable
        /// Cannot partially fill an order which is not partially fillable
        /// </summary>
        OrderNotPartiallyFillable,
        
        /// <summary>
        /// >> OrderAmountTooSmall
        /// Order amount_in and amount_out must at all times be greater than the existential deposit
        /// for the asset multiplied by the ExistentialDepositMultiplier.
        /// A fill order may not leave behind amounts smaller than this.
        /// </summary>
        OrderAmountTooSmall,
        
        /// <summary>
        /// >> MathError
        /// Error with math calculations
        /// </summary>
        MathError,
        
        /// <summary>
        /// >> Forbidden
        /// The caller does not have permission to complete the action
        /// </summary>
        Forbidden,
        
        /// <summary>
        /// >> InsufficientReservedAmount
        /// Reserved amount not sufficient.
        /// </summary>
        InsufficientReservedAmount,
    }
}
