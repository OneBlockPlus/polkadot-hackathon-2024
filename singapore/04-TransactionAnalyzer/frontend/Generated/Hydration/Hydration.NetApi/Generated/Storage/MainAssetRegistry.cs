//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Hydration.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> AssetRegistryStorage
    /// </summary>
    public sealed class AssetRegistryStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> AssetRegistryStorage Constructor
        /// </summary>
        public AssetRegistryStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AssetRegistry", "Assets"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Hydration.NetApi.Generated.Model.pallet_asset_registry.types.AssetDetails)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AssetRegistry", "NextAssetId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AssetRegistry", "AssetIds"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT5), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AssetRegistry", "AssetLocations"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Hydration.NetApi.Generated.Model.hydradx_runtime.xcm.AssetLocation)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AssetRegistry", "BannedAssets"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AssetRegistry", "LocationAssets"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Hydration.NetApi.Generated.Model.hydradx_runtime.xcm.AssetLocation), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AssetRegistry", "ExistentialDepositCounter"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
        }
        
        /// <summary>
        /// >> AssetsParams
        ///  Details of an asset.
        /// </summary>
        public static string AssetsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("AssetRegistry", "Assets", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AssetsDefault
        /// Default value as hex string
        /// </summary>
        public static string AssetsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Assets
        ///  Details of an asset.
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.pallet_asset_registry.types.AssetDetails> Assets(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = AssetRegistryStorage.AssetsParams(key);
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.pallet_asset_registry.types.AssetDetails>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NextAssetIdParams
        ///  Next available asset id. This is sequential id assigned for each new registered asset.
        /// </summary>
        public static string NextAssetIdParams()
        {
            return RequestGenerator.GetStorage("AssetRegistry", "NextAssetId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextAssetIdDefault
        /// Default value as hex string
        /// </summary>
        public static string NextAssetIdDefault()
        {
            return "0x01000000";
        }
        
        /// <summary>
        /// >> NextAssetId
        ///  Next available asset id. This is sequential id assigned for each new registered asset.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> NextAssetId(string blockhash, CancellationToken token)
        {
            string parameters = AssetRegistryStorage.NextAssetIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AssetIdsParams
        ///  Mapping between asset name and asset id.
        /// </summary>
        public static string AssetIdsParams(Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT5 key)
        {
            return RequestGenerator.GetStorage("AssetRegistry", "AssetIds", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AssetIdsDefault
        /// Default value as hex string
        /// </summary>
        public static string AssetIdsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AssetIds
        ///  Mapping between asset name and asset id.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> AssetIds(Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT5 key, string blockhash, CancellationToken token)
        {
            string parameters = AssetRegistryStorage.AssetIdsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AssetLocationsParams
        ///  Native location of an asset.
        /// </summary>
        public static string AssetLocationsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("AssetRegistry", "AssetLocations", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AssetLocationsDefault
        /// Default value as hex string
        /// </summary>
        public static string AssetLocationsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AssetLocations
        ///  Native location of an asset.
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.hydradx_runtime.xcm.AssetLocation> AssetLocations(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = AssetRegistryStorage.AssetLocationsParams(key);
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.hydradx_runtime.xcm.AssetLocation>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BannedAssetsParams
        ///  Non-native assets which transfer is banned.
        /// </summary>
        public static string BannedAssetsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("AssetRegistry", "BannedAssets", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BannedAssetsDefault
        /// Default value as hex string
        /// </summary>
        public static string BannedAssetsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> BannedAssets
        ///  Non-native assets which transfer is banned.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> BannedAssets(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = AssetRegistryStorage.BannedAssetsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LocationAssetsParams
        ///  Local asset for native location.
        /// </summary>
        public static string LocationAssetsParams(Hydration.NetApi.Generated.Model.hydradx_runtime.xcm.AssetLocation key)
        {
            return RequestGenerator.GetStorage("AssetRegistry", "LocationAssets", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> LocationAssetsDefault
        /// Default value as hex string
        /// </summary>
        public static string LocationAssetsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> LocationAssets
        ///  Local asset for native location.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> LocationAssets(Hydration.NetApi.Generated.Model.hydradx_runtime.xcm.AssetLocation key, string blockhash, CancellationToken token)
        {
            string parameters = AssetRegistryStorage.LocationAssetsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ExistentialDepositCounterParams
        ///  Number of accounts that paid existential deposits for insufficient assets.
        ///  This storage is used by `SufficiencyCheck`.
        /// </summary>
        public static string ExistentialDepositCounterParams()
        {
            return RequestGenerator.GetStorage("AssetRegistry", "ExistentialDepositCounter", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ExistentialDepositCounterDefault
        /// Default value as hex string
        /// </summary>
        public static string ExistentialDepositCounterDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> ExistentialDepositCounter
        ///  Number of accounts that paid existential deposits for insufficient assets.
        ///  This storage is used by `SufficiencyCheck`.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> ExistentialDepositCounter(string blockhash, CancellationToken token)
        {
            string parameters = AssetRegistryStorage.ExistentialDepositCounterParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> AssetRegistryCalls
    /// </summary>
    public sealed class AssetRegistryCalls
    {
        
        /// <summary>
        /// >> register
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Register(Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> asset_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT5> name, Hydration.NetApi.Generated.Model.pallet_asset_registry.types.EnumAssetType asset_type, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> existential_deposit, Substrate.NetApi.Model.Types.Base.BaseOpt<Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT5> symbol, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U8> decimals, Substrate.NetApi.Model.Types.Base.BaseOpt<Hydration.NetApi.Generated.Model.hydradx_runtime.xcm.AssetLocation> location, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> xcm_rate_limit, Substrate.NetApi.Model.Types.Primitive.Bool is_sufficient)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(name.Encode());
            byteArray.AddRange(asset_type.Encode());
            byteArray.AddRange(existential_deposit.Encode());
            byteArray.AddRange(symbol.Encode());
            byteArray.AddRange(decimals.Encode());
            byteArray.AddRange(location.Encode());
            byteArray.AddRange(xcm_rate_limit.Encode());
            byteArray.AddRange(is_sufficient.Encode());
            return new Method(51, "AssetRegistry", 0, "register", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Update(Substrate.NetApi.Model.Types.Primitive.U32 asset_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT5> name, Substrate.NetApi.Model.Types.Base.BaseOpt<Hydration.NetApi.Generated.Model.pallet_asset_registry.types.EnumAssetType> asset_type, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> existential_deposit, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> xcm_rate_limit, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.Bool> is_sufficient, Substrate.NetApi.Model.Types.Base.BaseOpt<Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT5> symbol, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U8> decimals, Substrate.NetApi.Model.Types.Base.BaseOpt<Hydration.NetApi.Generated.Model.hydradx_runtime.xcm.AssetLocation> location)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(name.Encode());
            byteArray.AddRange(asset_type.Encode());
            byteArray.AddRange(existential_deposit.Encode());
            byteArray.AddRange(xcm_rate_limit.Encode());
            byteArray.AddRange(is_sufficient.Encode());
            byteArray.AddRange(symbol.Encode());
            byteArray.AddRange(decimals.Encode());
            byteArray.AddRange(location.Encode());
            return new Method(51, "AssetRegistry", 1, "update", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> register_external
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RegisterExternal(Hydration.NetApi.Generated.Model.hydradx_runtime.xcm.AssetLocation location)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(location.Encode());
            return new Method(51, "AssetRegistry", 4, "register_external", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> ban_asset
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method BanAsset(Substrate.NetApi.Model.Types.Primitive.U32 asset_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            return new Method(51, "AssetRegistry", 5, "ban_asset", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unban_asset
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UnbanAsset(Substrate.NetApi.Model.Types.Primitive.U32 asset_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            return new Method(51, "AssetRegistry", 6, "unban_asset", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> AssetRegistryConstants
    /// </summary>
    public sealed class AssetRegistryConstants
    {
        
        /// <summary>
        /// >> SequentialIdStartAt
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 SequentialIdStartAt()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x40420F00");
            return result;
        }
        
        /// <summary>
        /// >> StringLimit
        ///  The maximum length of a name or symbol stored on-chain.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 StringLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x20000000");
            return result;
        }
        
        /// <summary>
        /// >> MinStringLimit
        ///  The min length of a name or symbol stored on-chain.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MinStringLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x03000000");
            return result;
        }
        
        /// <summary>
        /// >> RegExternalWeightMultiplier
        ///  Weight multiplier for `register_external` extrinsic
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 RegExternalWeightMultiplier()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0x0A00000000000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> AssetRegistryErrors
    /// </summary>
    public enum AssetRegistryErrors
    {
        
        /// <summary>
        /// >> NoIdAvailable
        /// Asset ID is not available. This only happens when it reaches the MAX value of given id type.
        /// </summary>
        NoIdAvailable,
        
        /// <summary>
        /// >> AssetNotFound
        /// Invalid asset name or symbol.
        /// </summary>
        AssetNotFound,
        
        /// <summary>
        /// >> TooShort
        /// Length of name or symbol is less than min. length.
        /// </summary>
        TooShort,
        
        /// <summary>
        /// >> InvalidSymbol
        /// Asset's symbol can't contain whitespace characters .
        /// </summary>
        InvalidSymbol,
        
        /// <summary>
        /// >> AssetNotRegistered
        /// Asset ID is not registered in the asset-registry.
        /// </summary>
        AssetNotRegistered,
        
        /// <summary>
        /// >> AssetAlreadyRegistered
        /// Asset is already registered.
        /// </summary>
        AssetAlreadyRegistered,
        
        /// <summary>
        /// >> InvalidSharedAssetLen
        /// Incorrect number of assets provided to create shared asset.
        /// </summary>
        InvalidSharedAssetLen,
        
        /// <summary>
        /// >> CannotUpdateLocation
        /// Cannot update asset location.
        /// </summary>
        CannotUpdateLocation,
        
        /// <summary>
        /// >> NotInReservedRange
        /// Selected asset id is out of reserved range.
        /// </summary>
        NotInReservedRange,
        
        /// <summary>
        /// >> LocationAlreadyRegistered
        /// Location already registered with different asset.
        /// </summary>
        LocationAlreadyRegistered,
        
        /// <summary>
        /// >> Forbidden
        /// Origin is forbidden to set/update value.
        /// </summary>
        Forbidden,
        
        /// <summary>
        /// >> InsufficientBalance
        /// Balance too low.
        /// </summary>
        InsufficientBalance,
        
        /// <summary>
        /// >> ForbiddenSufficiencyChange
        /// Sufficient assets can't be changed to insufficient.
        /// </summary>
        ForbiddenSufficiencyChange,
        
        /// <summary>
        /// >> AssetAlreadyBanned
        /// Asset is already banned.
        /// </summary>
        AssetAlreadyBanned,
        
        /// <summary>
        /// >> AssetNotBanned
        /// Asset is not banned.
        /// </summary>
        AssetNotBanned,
    }
}
