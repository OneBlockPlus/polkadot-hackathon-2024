//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Hydration.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> MultiTransactionPaymentStorage
    /// </summary>
    public sealed class MultiTransactionPaymentStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> MultiTransactionPaymentStorage Constructor
        /// </summary>
        public MultiTransactionPaymentStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MultiTransactionPayment", "AccountCurrencyMap"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MultiTransactionPayment", "AcceptedCurrencies"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Hydration.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MultiTransactionPayment", "AcceptedCurrencyPrice"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Hydration.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MultiTransactionPayment", "TransactionCurrencyOverride"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
        }
        
        /// <summary>
        /// >> AccountCurrencyMapParams
        ///  Account currency map
        /// </summary>
        public static string AccountCurrencyMapParams(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("MultiTransactionPayment", "AccountCurrencyMap", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AccountCurrencyMapDefault
        /// Default value as hex string
        /// </summary>
        public static string AccountCurrencyMapDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AccountCurrencyMap
        ///  Account currency map
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> AccountCurrencyMap(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = MultiTransactionPaymentStorage.AccountCurrencyMapParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AcceptedCurrenciesParams
        ///  Curated list of currencies which fees can be paid mapped to corresponding fallback price
        /// </summary>
        public static string AcceptedCurrenciesParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("MultiTransactionPayment", "AcceptedCurrencies", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AcceptedCurrenciesDefault
        /// Default value as hex string
        /// </summary>
        public static string AcceptedCurrenciesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AcceptedCurrencies
        ///  Curated list of currencies which fees can be paid mapped to corresponding fallback price
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128> AcceptedCurrencies(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = MultiTransactionPaymentStorage.AcceptedCurrenciesParams(key);
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AcceptedCurrencyPriceParams
        ///  Asset prices from the spot price provider or the fallback price if the price is not available. Updated at the beginning of every block.
        /// </summary>
        public static string AcceptedCurrencyPriceParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("MultiTransactionPayment", "AcceptedCurrencyPrice", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AcceptedCurrencyPriceDefault
        /// Default value as hex string
        /// </summary>
        public static string AcceptedCurrencyPriceDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AcceptedCurrencyPrice
        ///  Asset prices from the spot price provider or the fallback price if the price is not available. Updated at the beginning of every block.
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128> AcceptedCurrencyPrice(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = MultiTransactionPaymentStorage.AcceptedCurrencyPriceParams(key);
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TransactionCurrencyOverrideParams
        /// </summary>
        public static string TransactionCurrencyOverrideParams(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("MultiTransactionPayment", "TransactionCurrencyOverride", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> TransactionCurrencyOverrideDefault
        /// Default value as hex string
        /// </summary>
        public static string TransactionCurrencyOverrideDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> TransactionCurrencyOverride
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> TransactionCurrencyOverride(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = MultiTransactionPaymentStorage.TransactionCurrencyOverrideParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> MultiTransactionPaymentCalls
    /// </summary>
    public sealed class MultiTransactionPaymentCalls
    {
        
        /// <summary>
        /// >> set_currency
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetCurrency(Substrate.NetApi.Model.Types.Primitive.U32 currency)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency.Encode());
            return new Method(203, "MultiTransactionPayment", 0, "set_currency", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_currency
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddCurrency(Substrate.NetApi.Model.Types.Primitive.U32 currency, Hydration.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128 price)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency.Encode());
            byteArray.AddRange(price.Encode());
            return new Method(203, "MultiTransactionPayment", 1, "add_currency", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_currency
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveCurrency(Substrate.NetApi.Model.Types.Primitive.U32 currency)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency.Encode());
            return new Method(203, "MultiTransactionPayment", 2, "remove_currency", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> reset_payment_currency
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ResetPaymentCurrency(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 account_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(account_id.Encode());
            return new Method(203, "MultiTransactionPayment", 3, "reset_payment_currency", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> dispatch_permit
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method DispatchPermit(Hydration.NetApi.Generated.Model.primitive_types.H160 from, Hydration.NetApi.Generated.Model.primitive_types.H160 to, Hydration.NetApi.Generated.Model.primitive_types.U256 value, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> data, Substrate.NetApi.Model.Types.Primitive.U64 gas_limit, Hydration.NetApi.Generated.Model.primitive_types.U256 deadline, Substrate.NetApi.Model.Types.Primitive.U8 v, Hydration.NetApi.Generated.Model.primitive_types.H256 r, Hydration.NetApi.Generated.Model.primitive_types.H256 s)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(from.Encode());
            byteArray.AddRange(to.Encode());
            byteArray.AddRange(value.Encode());
            byteArray.AddRange(data.Encode());
            byteArray.AddRange(gas_limit.Encode());
            byteArray.AddRange(deadline.Encode());
            byteArray.AddRange(v.Encode());
            byteArray.AddRange(r.Encode());
            byteArray.AddRange(s.Encode());
            return new Method(203, "MultiTransactionPayment", 4, "dispatch_permit", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> MultiTransactionPaymentConstants
    /// </summary>
    public sealed class MultiTransactionPaymentConstants
    {
        
        /// <summary>
        /// >> NativeAssetId
        ///  Native Asset
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 NativeAssetId()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00000000");
            return result;
        }
        
        /// <summary>
        /// >> EvmAssetId
        ///  EVM Asset
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 EvmAssetId()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x14000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> MultiTransactionPaymentErrors
    /// </summary>
    public enum MultiTransactionPaymentErrors
    {
        
        /// <summary>
        /// >> UnsupportedCurrency
        /// Selected currency is not supported.
        /// </summary>
        UnsupportedCurrency,
        
        /// <summary>
        /// >> ZeroBalance
        /// Account balance should be non-zero.
        /// </summary>
        ZeroBalance,
        
        /// <summary>
        /// >> AlreadyAccepted
        /// Currency is already in the list of accepted currencies.
        /// </summary>
        AlreadyAccepted,
        
        /// <summary>
        /// >> CoreAssetNotAllowed
        /// It is not allowed to add Core Asset as accepted currency. Core asset is accepted by design.
        /// </summary>
        CoreAssetNotAllowed,
        
        /// <summary>
        /// >> ZeroPrice
        /// Fallback price cannot be zero.
        /// </summary>
        ZeroPrice,
        
        /// <summary>
        /// >> FallbackPriceNotFound
        /// Fallback price was not found.
        /// </summary>
        FallbackPriceNotFound,
        
        /// <summary>
        /// >> Overflow
        /// Math overflow
        /// </summary>
        Overflow,
        
        /// <summary>
        /// >> EvmAccountNotAllowed
        /// It is not allowed to change payment currency of an EVM account.
        /// </summary>
        EvmAccountNotAllowed,
        
        /// <summary>
        /// >> EvmPermitExpired
        /// EVM permit expired.
        /// </summary>
        EvmPermitExpired,
        
        /// <summary>
        /// >> EvmPermitInvalid
        /// EVM permit is invalid.
        /// </summary>
        EvmPermitInvalid,
        
        /// <summary>
        /// >> EvmPermitCallExecutionError
        /// EVM permit call failed.
        /// </summary>
        EvmPermitCallExecutionError,
        
        /// <summary>
        /// >> EvmPermitRunnerError
        /// EVM permit call failed.
        /// </summary>
        EvmPermitRunnerError,
    }
}
