//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Hydration.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> EVMAccountsStorage
    /// </summary>
    public sealed class EVMAccountsStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> EVMAccountsStorage Constructor
        /// </summary>
        public EVMAccountsStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EVMAccounts", "AccountExtension"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Hydration.NetApi.Generated.Model.primitive_types.H160), typeof(Hydration.NetApi.Generated.Types.Base.Arr12U8)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EVMAccounts", "ContractDeployer"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Hydration.NetApi.Generated.Model.primitive_types.H160), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
        }
        
        /// <summary>
        /// >> AccountExtensionParams
        ///  Maps an EVM address to the last 12 bytes of a substrate account.
        /// </summary>
        public static string AccountExtensionParams(Hydration.NetApi.Generated.Model.primitive_types.H160 key)
        {
            return RequestGenerator.GetStorage("EVMAccounts", "AccountExtension", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AccountExtensionDefault
        /// Default value as hex string
        /// </summary>
        public static string AccountExtensionDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AccountExtension
        ///  Maps an EVM address to the last 12 bytes of a substrate account.
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Types.Base.Arr12U8> AccountExtension(Hydration.NetApi.Generated.Model.primitive_types.H160 key, string blockhash, CancellationToken token)
        {
            string parameters = EVMAccountsStorage.AccountExtensionParams(key);
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Types.Base.Arr12U8>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ContractDeployerParams
        ///  Whitelisted addresses that are allowed to deploy smart contracts.
        /// </summary>
        public static string ContractDeployerParams(Hydration.NetApi.Generated.Model.primitive_types.H160 key)
        {
            return RequestGenerator.GetStorage("EVMAccounts", "ContractDeployer", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ContractDeployerDefault
        /// Default value as hex string
        /// </summary>
        public static string ContractDeployerDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ContractDeployer
        ///  Whitelisted addresses that are allowed to deploy smart contracts.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> ContractDeployer(Hydration.NetApi.Generated.Model.primitive_types.H160 key, string blockhash, CancellationToken token)
        {
            string parameters = EVMAccountsStorage.ContractDeployerParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> EVMAccountsCalls
    /// </summary>
    public sealed class EVMAccountsCalls
    {
        
        /// <summary>
        /// >> bind_evm_address
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method BindEvmAddress()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(93, "EVMAccounts", 0, "bind_evm_address", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_contract_deployer
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddContractDeployer(Hydration.NetApi.Generated.Model.primitive_types.H160 address)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(address.Encode());
            return new Method(93, "EVMAccounts", 1, "add_contract_deployer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_contract_deployer
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveContractDeployer(Hydration.NetApi.Generated.Model.primitive_types.H160 address)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(address.Encode());
            return new Method(93, "EVMAccounts", 2, "remove_contract_deployer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> renounce_contract_deployer
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RenounceContractDeployer()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(93, "EVMAccounts", 3, "renounce_contract_deployer", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> EVMAccountsConstants
    /// </summary>
    public sealed class EVMAccountsConstants
    {
        
        /// <summary>
        /// >> FeeMultiplier
        ///  Fee multiplier for the binding of addresses.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 FeeMultiplier()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x32000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> EVMAccountsErrors
    /// </summary>
    public enum EVMAccountsErrors
    {
        
        /// <summary>
        /// >> TruncatedAccountAlreadyUsed
        /// EVM Account's nonce is not zero
        /// </summary>
        TruncatedAccountAlreadyUsed,
        
        /// <summary>
        /// >> AddressAlreadyBound
        /// Address is already bound
        /// </summary>
        AddressAlreadyBound,
        
        /// <summary>
        /// >> BoundAddressCannotBeUsed
        /// Bound address cannot be used
        /// </summary>
        BoundAddressCannotBeUsed,
        
        /// <summary>
        /// >> AddressNotWhitelisted
        /// Address not whitelisted
        /// </summary>
        AddressNotWhitelisted,
    }
}
