//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Hydration.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> StableswapStorage
    /// </summary>
    public sealed class StableswapStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> StableswapStorage Constructor
        /// </summary>
        public StableswapStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Stableswap", "Pools"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Hydration.NetApi.Generated.Model.pallet_stableswap.types.PoolInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Stableswap", "AssetTradability"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>), typeof(Hydration.NetApi.Generated.Model.pallet_stableswap.types.Tradability)));
        }
        
        /// <summary>
        /// >> PoolsParams
        ///  Existing pools
        /// </summary>
        public static string PoolsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Stableswap", "Pools", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PoolsDefault
        /// Default value as hex string
        /// </summary>
        public static string PoolsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Pools
        ///  Existing pools
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.pallet_stableswap.types.PoolInfo> Pools(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = StableswapStorage.PoolsParams(key);
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.pallet_stableswap.types.PoolInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AssetTradabilityParams
        ///  Tradability state of pool assets.
        /// </summary>
        public static string AssetTradabilityParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("Stableswap", "AssetTradability", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> AssetTradabilityDefault
        /// Default value as hex string
        /// </summary>
        public static string AssetTradabilityDefault()
        {
            return "0x0F";
        }
        
        /// <summary>
        /// >> AssetTradability
        ///  Tradability state of pool assets.
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.pallet_stableswap.types.Tradability> AssetTradability(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> key, string blockhash, CancellationToken token)
        {
            string parameters = StableswapStorage.AssetTradabilityParams(key);
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.pallet_stableswap.types.Tradability>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> StableswapCalls
    /// </summary>
    public sealed class StableswapCalls
    {
        
        /// <summary>
        /// >> create_pool
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CreatePool(Substrate.NetApi.Model.Types.Primitive.U32 share_asset, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U32> assets, Substrate.NetApi.Model.Types.Primitive.U16 amplification, Hydration.NetApi.Generated.Model.sp_arithmetic.per_things.Permill fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(share_asset.Encode());
            byteArray.AddRange(assets.Encode());
            byteArray.AddRange(amplification.Encode());
            byteArray.AddRange(fee.Encode());
            return new Method(70, "Stableswap", 0, "create_pool", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_pool_fee
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdatePoolFee(Substrate.NetApi.Model.Types.Primitive.U32 pool_id, Hydration.NetApi.Generated.Model.sp_arithmetic.per_things.Permill fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(fee.Encode());
            return new Method(70, "Stableswap", 1, "update_pool_fee", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_amplification
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateAmplification(Substrate.NetApi.Model.Types.Primitive.U32 pool_id, Substrate.NetApi.Model.Types.Primitive.U16 final_amplification, Substrate.NetApi.Model.Types.Primitive.U32 start_block, Substrate.NetApi.Model.Types.Primitive.U32 end_block)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(final_amplification.Encode());
            byteArray.AddRange(start_block.Encode());
            byteArray.AddRange(end_block.Encode());
            return new Method(70, "Stableswap", 2, "update_amplification", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_liquidity
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddLiquidity(Substrate.NetApi.Model.Types.Primitive.U32 pool_id, Substrate.NetApi.Model.Types.Base.BaseVec<Hydration.NetApi.Generated.Model.pallet_stableswap.types.AssetAmount> assets)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(assets.Encode());
            return new Method(70, "Stableswap", 3, "add_liquidity", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_liquidity_shares
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddLiquidityShares(Substrate.NetApi.Model.Types.Primitive.U32 pool_id, Substrate.NetApi.Model.Types.Primitive.U128 shares, Substrate.NetApi.Model.Types.Primitive.U32 asset_id, Substrate.NetApi.Model.Types.Primitive.U128 max_asset_amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(shares.Encode());
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(max_asset_amount.Encode());
            return new Method(70, "Stableswap", 4, "add_liquidity_shares", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_liquidity_one_asset
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveLiquidityOneAsset(Substrate.NetApi.Model.Types.Primitive.U32 pool_id, Substrate.NetApi.Model.Types.Primitive.U32 asset_id, Substrate.NetApi.Model.Types.Primitive.U128 share_amount, Substrate.NetApi.Model.Types.Primitive.U128 min_amount_out)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(share_amount.Encode());
            byteArray.AddRange(min_amount_out.Encode());
            return new Method(70, "Stableswap", 5, "remove_liquidity_one_asset", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> withdraw_asset_amount
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method WithdrawAssetAmount(Substrate.NetApi.Model.Types.Primitive.U32 pool_id, Substrate.NetApi.Model.Types.Primitive.U32 asset_id, Substrate.NetApi.Model.Types.Primitive.U128 amount, Substrate.NetApi.Model.Types.Primitive.U128 max_share_amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(max_share_amount.Encode());
            return new Method(70, "Stableswap", 6, "withdraw_asset_amount", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> sell
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Sell(Substrate.NetApi.Model.Types.Primitive.U32 pool_id, Substrate.NetApi.Model.Types.Primitive.U32 asset_in, Substrate.NetApi.Model.Types.Primitive.U32 asset_out, Substrate.NetApi.Model.Types.Primitive.U128 amount_in, Substrate.NetApi.Model.Types.Primitive.U128 min_buy_amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(asset_in.Encode());
            byteArray.AddRange(asset_out.Encode());
            byteArray.AddRange(amount_in.Encode());
            byteArray.AddRange(min_buy_amount.Encode());
            return new Method(70, "Stableswap", 7, "sell", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> buy
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Buy(Substrate.NetApi.Model.Types.Primitive.U32 pool_id, Substrate.NetApi.Model.Types.Primitive.U32 asset_out, Substrate.NetApi.Model.Types.Primitive.U32 asset_in, Substrate.NetApi.Model.Types.Primitive.U128 amount_out, Substrate.NetApi.Model.Types.Primitive.U128 max_sell_amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(asset_out.Encode());
            byteArray.AddRange(asset_in.Encode());
            byteArray.AddRange(amount_out.Encode());
            byteArray.AddRange(max_sell_amount.Encode());
            return new Method(70, "Stableswap", 8, "buy", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_asset_tradable_state
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetAssetTradableState(Substrate.NetApi.Model.Types.Primitive.U32 pool_id, Substrate.NetApi.Model.Types.Primitive.U32 asset_id, Hydration.NetApi.Generated.Model.pallet_stableswap.types.Tradability state)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(state.Encode());
            return new Method(70, "Stableswap", 9, "set_asset_tradable_state", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> StableswapConstants
    /// </summary>
    public sealed class StableswapConstants
    {
        
        /// <summary>
        /// >> MinPoolLiquidity
        ///  Minimum pool liquidity
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinPoolLiquidity()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x40420F00000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MinTradingLimit
        ///  Minimum trading amount
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinTradingLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0xE8030000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> AmplificationRange
        ///  Amplification inclusive range. Pool's amp can be selected from the range only.
        /// </summary>
        public Hydration.NetApi.Generated.Types.Base.RangeInclusive AmplificationRange()
        {
            var result = new Hydration.NetApi.Generated.Types.Base.RangeInclusive();
            result.Create("0x02001027");
            return result;
        }
    }
    
    /// <summary>
    /// >> StableswapErrors
    /// </summary>
    public enum StableswapErrors
    {
        
        /// <summary>
        /// >> IncorrectAssets
        /// Creating a pool with same assets or less than 2 assets is not allowed.
        /// </summary>
        IncorrectAssets,
        
        /// <summary>
        /// >> MaxAssetsExceeded
        /// Maximum number of assets has been exceeded.
        /// </summary>
        MaxAssetsExceeded,
        
        /// <summary>
        /// >> PoolNotFound
        /// A pool with given assets does not exist.
        /// </summary>
        PoolNotFound,
        
        /// <summary>
        /// >> PoolExists
        /// A pool with given assets already exists.
        /// </summary>
        PoolExists,
        
        /// <summary>
        /// >> AssetNotInPool
        /// Asset is not in the pool.
        /// </summary>
        AssetNotInPool,
        
        /// <summary>
        /// >> ShareAssetNotRegistered
        /// Share asset is not registered in Registry.
        /// </summary>
        ShareAssetNotRegistered,
        
        /// <summary>
        /// >> ShareAssetInPoolAssets
        /// Share asset is amount assets when creating a pool.
        /// </summary>
        ShareAssetInPoolAssets,
        
        /// <summary>
        /// >> AssetNotRegistered
        /// One or more assets are not registered in AssetRegistry
        /// </summary>
        AssetNotRegistered,
        
        /// <summary>
        /// >> InvalidAssetAmount
        /// Invalid asset amount provided. Amount must be greater than zero.
        /// </summary>
        InvalidAssetAmount,
        
        /// <summary>
        /// >> InsufficientBalance
        /// Balance of an asset is not sufficient to perform a trade.
        /// </summary>
        InsufficientBalance,
        
        /// <summary>
        /// >> InsufficientShares
        /// Balance of a share asset is not sufficient to withdraw liquidity.
        /// </summary>
        InsufficientShares,
        
        /// <summary>
        /// >> InsufficientLiquidity
        /// Liquidity has not reached the required minimum.
        /// </summary>
        InsufficientLiquidity,
        
        /// <summary>
        /// >> InsufficientLiquidityRemaining
        /// Insufficient liquidity left in the pool after withdrawal.
        /// </summary>
        InsufficientLiquidityRemaining,
        
        /// <summary>
        /// >> InsufficientTradingAmount
        /// Amount is less than the minimum trading amount configured.
        /// </summary>
        InsufficientTradingAmount,
        
        /// <summary>
        /// >> BuyLimitNotReached
        /// Minimum limit has not been reached during trade.
        /// </summary>
        BuyLimitNotReached,
        
        /// <summary>
        /// >> SellLimitExceeded
        /// Maximum limit has been exceeded during trade.
        /// </summary>
        SellLimitExceeded,
        
        /// <summary>
        /// >> InvalidInitialLiquidity
        /// Initial liquidity of asset must be > 0.
        /// </summary>
        InvalidInitialLiquidity,
        
        /// <summary>
        /// >> InvalidAmplification
        /// Amplification is outside configured range.
        /// </summary>
        InvalidAmplification,
        
        /// <summary>
        /// >> InsufficientShareBalance
        /// Remaining balance of share asset is below asset's existential deposit.
        /// </summary>
        InsufficientShareBalance,
        
        /// <summary>
        /// >> NotAllowed
        /// Not allowed to perform an operation on given asset.
        /// </summary>
        NotAllowed,
        
        /// <summary>
        /// >> PastBlock
        /// Future block number is in the past.
        /// </summary>
        PastBlock,
        
        /// <summary>
        /// >> SameAmplification
        /// New amplification is equal to the previous value.
        /// </summary>
        SameAmplification,
        
        /// <summary>
        /// >> SlippageLimit
        /// Slippage protection.
        /// </summary>
        SlippageLimit,
        
        /// <summary>
        /// >> UnknownDecimals
        /// Failed to retrieve asset decimals.
        /// </summary>
        UnknownDecimals,
    }
}
