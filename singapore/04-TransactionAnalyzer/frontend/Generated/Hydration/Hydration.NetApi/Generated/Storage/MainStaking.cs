//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Hydration.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> StakingStorage
    /// </summary>
    public sealed class StakingStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> StakingStorage Constructor
        /// </summary>
        public StakingStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Staking", "Staking"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Hydration.NetApi.Generated.Model.pallet_staking.types.StakingData)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Staking", "Positions"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(Hydration.NetApi.Generated.Model.pallet_staking.types.Position)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Staking", "NextPositionId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Staking", "PositionVotes"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(Hydration.NetApi.Generated.Model.pallet_staking.types.Voting)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Staking", "ProcessedVotes"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>), typeof(Hydration.NetApi.Generated.Model.pallet_staking.types.Vote)));
        }
        
        /// <summary>
        /// >> StakingParams
        ///  Global staking state.
        /// </summary>
        public static string StakingParams()
        {
            return RequestGenerator.GetStorage("Staking", "Staking", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> StakingDefault
        /// Default value as hex string
        /// </summary>
        public static string StakingDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "00000000000000000";
        }
        
        /// <summary>
        /// >> Staking
        ///  Global staking state.
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.pallet_staking.types.StakingData> Staking(string blockhash, CancellationToken token)
        {
            string parameters = StakingStorage.StakingParams();
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.pallet_staking.types.StakingData>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PositionsParams
        ///  User's position state.
        /// </summary>
        public static string PositionsParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("Staking", "Positions", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PositionsDefault
        /// Default value as hex string
        /// </summary>
        public static string PositionsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Positions
        ///  User's position state.
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.pallet_staking.types.Position> Positions(Substrate.NetApi.Model.Types.Primitive.U128 key, string blockhash, CancellationToken token)
        {
            string parameters = StakingStorage.PositionsParams(key);
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.pallet_staking.types.Position>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NextPositionIdParams
        ///  Position ids sequencer.
        /// </summary>
        public static string NextPositionIdParams()
        {
            return RequestGenerator.GetStorage("Staking", "NextPositionId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextPositionIdDefault
        /// Default value as hex string
        /// </summary>
        public static string NextPositionIdDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> NextPositionId
        ///  Position ids sequencer.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> NextPositionId(string blockhash, CancellationToken token)
        {
            string parameters = StakingStorage.NextPositionIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PositionVotesParams
        ///  List of position votes.
        /// </summary>
        public static string PositionVotesParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("Staking", "PositionVotes", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PositionVotesDefault
        /// Default value as hex string
        /// </summary>
        public static string PositionVotesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PositionVotes
        ///  List of position votes.
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.pallet_staking.types.Voting> PositionVotes(Substrate.NetApi.Model.Types.Primitive.U128 key, string blockhash, CancellationToken token)
        {
            string parameters = StakingStorage.PositionVotesParams(key);
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.pallet_staking.types.Voting>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ProcessedVotesParams
        ///  List of processed vote. Used to determine if the vote should be locked in case of voting not in favor.
        /// </summary>
        public static string ProcessedVotesParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("Staking", "ProcessedVotes", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ProcessedVotesDefault
        /// Default value as hex string
        /// </summary>
        public static string ProcessedVotesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ProcessedVotes
        ///  List of processed vote. Used to determine if the vote should be locked in case of voting not in favor.
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.pallet_staking.types.Vote> ProcessedVotes(Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32> key, string blockhash, CancellationToken token)
        {
            string parameters = StakingStorage.ProcessedVotesParams(key);
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.pallet_staking.types.Vote>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> StakingCalls
    /// </summary>
    public sealed class StakingCalls
    {
        
        /// <summary>
        /// >> initialize_staking
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method InitializeStaking()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(69, "Staking", 0, "initialize_staking", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> stake
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Stake(Substrate.NetApi.Model.Types.Primitive.U128 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(amount.Encode());
            return new Method(69, "Staking", 1, "stake", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> increase_stake
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method IncreaseStake(Substrate.NetApi.Model.Types.Primitive.U128 position_id, Substrate.NetApi.Model.Types.Primitive.U128 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(position_id.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(69, "Staking", 2, "increase_stake", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Claim(Substrate.NetApi.Model.Types.Primitive.U128 position_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(position_id.Encode());
            return new Method(69, "Staking", 3, "claim", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unstake
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Unstake(Substrate.NetApi.Model.Types.Primitive.U128 position_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(position_id.Encode());
            return new Method(69, "Staking", 4, "unstake", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> StakingConstants
    /// </summary>
    public sealed class StakingConstants
    {
        
        /// <summary>
        /// >> PeriodLength
        ///  Staking period length in blocks.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 PeriodLength()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x201C0000");
            return result;
        }
        
        /// <summary>
        /// >> PalletId
        ///  Pallet id.
        /// </summary>
        public Hydration.NetApi.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new Hydration.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x7374616B696E6723");
            return result;
        }
        
        /// <summary>
        /// >> NativeAssetId
        ///  Native Asset ID.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 NativeAssetId()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00000000");
            return result;
        }
        
        /// <summary>
        /// >> MinStake
        ///  Min amount user must stake.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinStake()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0080C6A47E8D03000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> TimePointsWeight
        ///  Weight of the time points in total points calculations.
        /// </summary>
        public Hydration.NetApi.Generated.Model.sp_arithmetic.per_things.Permill TimePointsWeight()
        {
            var result = new Hydration.NetApi.Generated.Model.sp_arithmetic.per_things.Permill();
            result.Create("0x40420F00");
            return result;
        }
        
        /// <summary>
        /// >> ActionPointsWeight
        ///  Weight of the action points in total points calculations.
        /// </summary>
        public Hydration.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill ActionPointsWeight()
        {
            var result = new Hydration.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill();
            result.Create("0x00C2EB0B");
            return result;
        }
        
        /// <summary>
        /// >> TimePointsPerPeriod
        ///  Number of time points users receive for each period.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U8 TimePointsPerPeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U8();
            result.Create("0x01");
            return result;
        }
        
        /// <summary>
        /// >> UnclaimablePeriods
        ///  Number of periods user can't claim rewards for. User can exit but won't receive any rewards.
        ///  If he stay longer than `UnclaimablePeriods` he will receive rewards also for these periods.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 UnclaimablePeriods()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x01000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> CurrentStakeWeight
        ///  Weight of the actual stake in slash points calculation. Bigger the value lower the calculated slash points.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U8 CurrentStakeWeight()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U8();
            result.Create("0x02");
            return result;
        }
        
        /// <summary>
        /// >> MaxVotes
        ///  Max amount of votes the user can have at any time.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxVotes()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
        
        /// <summary>
        /// >> NFTCollectionId
        ///  NFT collection id.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 NFTCollectionId()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0xAE080000000000000000000000000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> StakingErrors
    /// </summary>
    public enum StakingErrors
    {
        
        /// <summary>
        /// >> InsufficientBalance
        /// Balance is too low.
        /// </summary>
        InsufficientBalance,
        
        /// <summary>
        /// >> InsufficientStake
        /// Staked amount is too low.
        /// </summary>
        InsufficientStake,
        
        /// <summary>
        /// >> PositionNotFound
        /// Staking position has not been found.
        /// </summary>
        PositionNotFound,
        
        /// <summary>
        /// >> MaxVotesReached
        /// Maximum amount of votes were reached for staking position.
        /// </summary>
        MaxVotesReached,
        
        /// <summary>
        /// >> NotInitialized
        /// Staking is not initialized.
        /// </summary>
        NotInitialized,
        
        /// <summary>
        /// >> AlreadyInitialized
        /// Staking is already initialized.
        /// </summary>
        AlreadyInitialized,
        
        /// <summary>
        /// >> Arithmetic
        /// Arithmetic error.
        /// </summary>
        Arithmetic,
        
        /// <summary>
        /// >> MissingPotBalance
        /// Pot's balance is zero.
        /// </summary>
        MissingPotBalance,
        
        /// <summary>
        /// >> PositionAlreadyExists
        /// Account's position already exists.
        /// </summary>
        PositionAlreadyExists,
        
        /// <summary>
        /// >> Forbidden
        /// Signer is not an owner of the staking position.
        /// </summary>
        Forbidden,
        
        /// <summary>
        /// >> ExistingVotes
        /// Position contains registered votes.
        /// </summary>
        ExistingVotes,
        
        /// <summary>
        /// >> ExistingProcessedVotes
        /// Position contains processed votes. Removed these votes first before increasing stake or claiming.
        /// </summary>
        ExistingProcessedVotes,
        
        /// <summary>
        /// >> InconsistentState
        /// Action cannot be completed because unexpected error has occurred. This should be reported
        /// to protocol maintainers.
        /// </summary>
        InconsistentState,
    }
}
