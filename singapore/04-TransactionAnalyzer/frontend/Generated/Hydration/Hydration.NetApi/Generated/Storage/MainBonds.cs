//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Hydration.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> BondsStorage
    /// </summary>
    public sealed class BondsStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> BondsStorage Constructor
        /// </summary>
        public BondsStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Bonds", "BondIds"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U64>), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Bonds", "Bonds"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U64>)));
        }
        
        /// <summary>
        /// >> BondIdsParams
        ///  Registered bond ids.
        ///  Maps (underlying asset ID, maturity) -> bond ID
        /// </summary>
        public static string BondIdsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U64> key)
        {
            return RequestGenerator.GetStorage("Bonds", "BondIds", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BondIdsDefault
        /// Default value as hex string
        /// </summary>
        public static string BondIdsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> BondIds
        ///  Registered bond ids.
        ///  Maps (underlying asset ID, maturity) -> bond ID
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> BondIds(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U64> key, string blockhash, CancellationToken token)
        {
            string parameters = BondsStorage.BondIdsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BondsParams
        ///  Registered bonds.
        ///  Maps bond ID -> (underlying asset ID, maturity)
        /// </summary>
        public static string BondsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Bonds", "Bonds", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BondsDefault
        /// Default value as hex string
        /// </summary>
        public static string BondsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Bonds
        ///  Registered bonds.
        ///  Maps bond ID -> (underlying asset ID, maturity)
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U64>> Bonds(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = BondsStorage.BondsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U64>>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> BondsCalls
    /// </summary>
    public sealed class BondsCalls
    {
        
        /// <summary>
        /// >> issue
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Issue(Substrate.NetApi.Model.Types.Primitive.U32 asset_id, Substrate.NetApi.Model.Types.Primitive.U128 amount, Substrate.NetApi.Model.Types.Primitive.U64 maturity)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(maturity.Encode());
            return new Method(71, "Bonds", 0, "issue", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> redeem
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Redeem(Substrate.NetApi.Model.Types.Primitive.U32 bond_id, Substrate.NetApi.Model.Types.Primitive.U128 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(bond_id.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(71, "Bonds", 1, "redeem", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> BondsConstants
    /// </summary>
    public sealed class BondsConstants
    {
        
        /// <summary>
        /// >> PalletId
        ///  The pallet id, used for deriving its sovereign account ID.
        /// </summary>
        public Hydration.NetApi.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new Hydration.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x706C74626F6E6473");
            return result;
        }
        
        /// <summary>
        /// >> ProtocolFee
        ///  Protocol fee.
        /// </summary>
        public Hydration.NetApi.Generated.Model.sp_arithmetic.per_things.Permill ProtocolFee()
        {
            var result = new Hydration.NetApi.Generated.Model.sp_arithmetic.per_things.Permill();
            result.Create("0x204E0000");
            return result;
        }
        
        /// <summary>
        /// >> FeeReceiver
        ///  Protocol fee receiver.
        /// </summary>
        public Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 FeeReceiver()
        {
            var result = new Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32();
            result.Create("0x6D6F646C70792F74727372790000000000000000000000000000000000000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> BondsErrors
    /// </summary>
    public enum BondsErrors
    {
        
        /// <summary>
        /// >> NotRegistered
        /// Bond not registered
        /// </summary>
        NotRegistered,
        
        /// <summary>
        /// >> NotMature
        /// Bond is not mature
        /// </summary>
        NotMature,
        
        /// <summary>
        /// >> InvalidMaturity
        /// Maturity not long enough
        /// </summary>
        InvalidMaturity,
        
        /// <summary>
        /// >> DisallowedAsset
        /// Asset type not allowed for underlying asset
        /// </summary>
        DisallowedAsset,
        
        /// <summary>
        /// >> AssetNotFound
        /// Asset is not registered in `AssetRegistry`
        /// </summary>
        AssetNotFound,
        
        /// <summary>
        /// >> InvalidBondName
        /// Generated name is not valid.
        /// </summary>
        InvalidBondName,
        
        /// <summary>
        /// >> FailToParseName
        /// Bond's name parsing was now successful
        /// </summary>
        FailToParseName,
    }
}
