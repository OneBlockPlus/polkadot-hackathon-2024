//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Hydration.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> DCAStorage
    /// </summary>
    public sealed class DCAStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> DCAStorage Constructor
        /// </summary>
        public DCAStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("DCA", "ScheduleIdSequencer"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("DCA", "Schedules"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Hydration.NetApi.Generated.Model.pallet_dca.types.Schedule)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("DCA", "ScheduleOwnership"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("DCA", "RemainingAmounts"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("DCA", "RetriesOnError"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Primitive.U8)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("DCA", "ScheduleIdsPerBlock"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT42)));
        }
        
        /// <summary>
        /// >> ScheduleIdSequencerParams
        ///  Id sequencer for schedules
        /// </summary>
        public static string ScheduleIdSequencerParams()
        {
            return RequestGenerator.GetStorage("DCA", "ScheduleIdSequencer", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ScheduleIdSequencerDefault
        /// Default value as hex string
        /// </summary>
        public static string ScheduleIdSequencerDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> ScheduleIdSequencer
        ///  Id sequencer for schedules
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> ScheduleIdSequencer(string blockhash, CancellationToken token)
        {
            string parameters = DCAStorage.ScheduleIdSequencerParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SchedulesParams
        ///  Storing schedule details
        /// </summary>
        public static string SchedulesParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("DCA", "Schedules", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SchedulesDefault
        /// Default value as hex string
        /// </summary>
        public static string SchedulesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Schedules
        ///  Storing schedule details
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.pallet_dca.types.Schedule> Schedules(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = DCAStorage.SchedulesParams(key);
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.pallet_dca.types.Schedule>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ScheduleOwnershipParams
        ///  Storing schedule ownership
        /// </summary>
        public static string ScheduleOwnershipParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("DCA", "ScheduleOwnership", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ScheduleOwnershipDefault
        /// Default value as hex string
        /// </summary>
        public static string ScheduleOwnershipDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ScheduleOwnership
        ///  Storing schedule ownership
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> ScheduleOwnership(Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32> key, string blockhash, CancellationToken token)
        {
            string parameters = DCAStorage.ScheduleOwnershipParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RemainingAmountsParams
        ///  Keep tracking the remaining amounts to spend for DCA schedules
        /// </summary>
        public static string RemainingAmountsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("DCA", "RemainingAmounts", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RemainingAmountsDefault
        /// Default value as hex string
        /// </summary>
        public static string RemainingAmountsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> RemainingAmounts
        ///  Keep tracking the remaining amounts to spend for DCA schedules
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> RemainingAmounts(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = DCAStorage.RemainingAmountsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RetriesOnErrorParams
        ///  Keep tracking the retry on error flag for DCA schedules
        /// </summary>
        public static string RetriesOnErrorParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("DCA", "RetriesOnError", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RetriesOnErrorDefault
        /// Default value as hex string
        /// </summary>
        public static string RetriesOnErrorDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> RetriesOnError
        ///  Keep tracking the retry on error flag for DCA schedules
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U8> RetriesOnError(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = DCAStorage.RetriesOnErrorParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U8>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ScheduleIdsPerBlockParams
        ///  Keep tracking of the schedule ids to be executed in the block
        /// </summary>
        public static string ScheduleIdsPerBlockParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("DCA", "ScheduleIdsPerBlock", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ScheduleIdsPerBlockDefault
        /// Default value as hex string
        /// </summary>
        public static string ScheduleIdsPerBlockDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ScheduleIdsPerBlock
        ///  Keep tracking of the schedule ids to be executed in the block
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT42> ScheduleIdsPerBlock(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = DCAStorage.ScheduleIdsPerBlockParams(key);
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT42>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> DCACalls
    /// </summary>
    public sealed class DCACalls
    {
        
        /// <summary>
        /// >> schedule
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Schedule(Hydration.NetApi.Generated.Model.pallet_dca.types.Schedule schedule, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> start_execution_block)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(schedule.Encode());
            byteArray.AddRange(start_execution_block.Encode());
            return new Method(66, "DCA", 0, "schedule", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> terminate
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Terminate(Substrate.NetApi.Model.Types.Primitive.U32 schedule_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> next_execution_block)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(schedule_id.Encode());
            byteArray.AddRange(next_execution_block.Encode());
            return new Method(66, "DCA", 1, "terminate", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> DCAConstants
    /// </summary>
    public sealed class DCAConstants
    {
        
        /// <summary>
        /// >> MaxPriceDifferenceBetweenBlocks
        /// Max price difference allowed between blocks
        /// </summary>
        public Hydration.NetApi.Generated.Model.sp_arithmetic.per_things.Permill MaxPriceDifferenceBetweenBlocks()
        {
            var result = new Hydration.NetApi.Generated.Model.sp_arithmetic.per_things.Permill();
            result.Create("0x983A0000");
            return result;
        }
        
        /// <summary>
        /// >> MaxSchedulePerBlock
        /// The number of max schedules to be executed per block
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxSchedulePerBlock()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x14000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxNumberOfRetriesOnError
        /// The number of max retries in case of trade limit error
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U8 MaxNumberOfRetriesOnError()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U8();
            result.Create("0x03");
            return result;
        }
        
        /// <summary>
        /// >> MinimumTradingLimit
        ///  Minimum trading limit for a single trade
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinimumTradingLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0xE8030000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> NativeAssetId
        ///  Native Asset Id
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 NativeAssetId()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00000000");
            return result;
        }
        
        /// <summary>
        /// >> MinBudgetInNativeCurrency
        /// Minimum budget to be able to schedule a DCA, specified in native currency
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinBudgetInNativeCurrency()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0080C6A47E8D03000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> FeeReceiver
        /// The fee receiver for transaction fees
        /// </summary>
        public Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 FeeReceiver()
        {
            var result = new Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32();
            result.Create("0x6D6F646C70792F74727372790000000000000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> NamedReserveId
        ///  Named reserve identifier to store named reserves for orders of each users
        /// </summary>
        public Hydration.NetApi.Generated.Types.Base.Arr8U8 NamedReserveId()
        {
            var result = new Hydration.NetApi.Generated.Types.Base.Arr8U8();
            result.Create("0x6463616F72646572");
            return result;
        }
    }
    
    /// <summary>
    /// >> DCAErrors
    /// </summary>
    public enum DCAErrors
    {
        
        /// <summary>
        /// >> ScheduleNotFound
        /// Schedule not exist
        /// </summary>
        ScheduleNotFound,
        
        /// <summary>
        /// >> MinTradeAmountNotReached
        /// The min trade amount is not reached
        /// </summary>
        MinTradeAmountNotReached,
        
        /// <summary>
        /// >> Forbidden
        /// Forbidden as the user is not the owner of the schedule
        /// </summary>
        Forbidden,
        
        /// <summary>
        /// >> BlockNumberIsNotInFuture
        /// The next execution block number is not in the future
        /// </summary>
        BlockNumberIsNotInFuture,
        
        /// <summary>
        /// >> PriceUnstable
        /// Price is unstable as price change from oracle data is bigger than max allowed
        /// </summary>
        PriceUnstable,
        
        /// <summary>
        /// >> CalculatingPriceError
        /// Error occurred when calculating price
        /// </summary>
        CalculatingPriceError,
        
        /// <summary>
        /// >> TotalAmountIsSmallerThanMinBudget
        /// The total amount to be reserved is smaller than min budget
        /// </summary>
        TotalAmountIsSmallerThanMinBudget,
        
        /// <summary>
        /// >> BudgetTooLow
        /// The budget is too low for executing one DCA
        /// </summary>
        BudgetTooLow,
        
        /// <summary>
        /// >> NoFreeBlockFound
        /// There is no free block found to plan DCA execution
        /// </summary>
        NoFreeBlockFound,
        
        /// <summary>
        /// >> ManuallyTerminated
        /// The DCA schedule has been manually terminated
        /// </summary>
        ManuallyTerminated,
        
        /// <summary>
        /// >> MaxRetryReached
        /// Max number of retries reached for schedule
        /// </summary>
        MaxRetryReached,
        
        /// <summary>
        /// >> TradeLimitReached
        /// Absolutely trade limit reached reached, leading to retry
        /// </summary>
        TradeLimitReached,
        
        /// <summary>
        /// >> SlippageLimitReached
        /// Slippage limit calculated from oracle is reached, leading to retry
        /// </summary>
        SlippageLimitReached,
        
        /// <summary>
        /// >> NoParentHashFound
        /// No parent hash has been found from relay chain
        /// </summary>
        NoParentHashFound,
        
        /// <summary>
        /// >> InvalidState
        /// Error that should not really happen only in case of invalid state of the schedule storage entries
        /// </summary>
        InvalidState,
    }
}
