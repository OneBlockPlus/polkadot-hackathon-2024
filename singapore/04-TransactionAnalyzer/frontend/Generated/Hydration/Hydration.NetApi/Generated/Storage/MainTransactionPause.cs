//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Hydration.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> TransactionPauseStorage
    /// </summary>
    public sealed class TransactionPauseStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> TransactionPauseStorage Constructor
        /// </summary>
        public TransactionPauseStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("TransactionPause", "PausedTransactions"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT34, Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT34>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
        }
        
        /// <summary>
        /// >> PausedTransactionsParams
        ///  The paused transaction map
        /// 
        ///  map (PalletNameBytes, FunctionNameBytes) => Option<()>
        /// </summary>
        public static string PausedTransactionsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT34, Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT34> key)
        {
            return RequestGenerator.GetStorage("TransactionPause", "PausedTransactions", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PausedTransactionsDefault
        /// Default value as hex string
        /// </summary>
        public static string PausedTransactionsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PausedTransactions
        ///  The paused transaction map
        /// 
        ///  map (PalletNameBytes, FunctionNameBytes) => Option<()>
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> PausedTransactions(Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT34, Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT34> key, string blockhash, CancellationToken token)
        {
            string parameters = TransactionPauseStorage.PausedTransactionsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> TransactionPauseCalls
    /// </summary>
    public sealed class TransactionPauseCalls
    {
        
        /// <summary>
        /// >> pause_transaction
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method PauseTransaction(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> pallet_name, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> function_name)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pallet_name.Encode());
            byteArray.AddRange(function_name.Encode());
            return new Method(60, "TransactionPause", 0, "pause_transaction", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unpause_transaction
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UnpauseTransaction(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> pallet_name, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> function_name)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pallet_name.Encode());
            byteArray.AddRange(function_name.Encode());
            return new Method(60, "TransactionPause", 1, "unpause_transaction", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> TransactionPauseConstants
    /// </summary>
    public sealed class TransactionPauseConstants
    {
    }
    
    /// <summary>
    /// >> TransactionPauseErrors
    /// </summary>
    public enum TransactionPauseErrors
    {
        
        /// <summary>
        /// >> CannotPause
        /// can not pause
        /// </summary>
        CannotPause,
        
        /// <summary>
        /// >> InvalidCharacter
        /// invalid character encoding
        /// </summary>
        InvalidCharacter,
        
        /// <summary>
        /// >> NameTooLong
        /// pallet name or function name is too long
        /// </summary>
        NameTooLong,
    }
}
