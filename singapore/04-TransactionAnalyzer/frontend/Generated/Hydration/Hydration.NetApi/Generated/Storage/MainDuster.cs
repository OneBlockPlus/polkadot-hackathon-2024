//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Hydration.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> DusterStorage
    /// </summary>
    public sealed class DusterStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> DusterStorage Constructor
        /// </summary>
        public DusterStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Duster", "AccountBlacklist"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Duster", "RewardAccount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Duster", "DustAccount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32)));
        }
        
        /// <summary>
        /// >> AccountBlacklistParams
        ///  Accounts excluded from dusting.
        /// </summary>
        public static string AccountBlacklistParams(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Duster", "AccountBlacklist", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AccountBlacklistDefault
        /// Default value as hex string
        /// </summary>
        public static string AccountBlacklistDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AccountBlacklist
        ///  Accounts excluded from dusting.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> AccountBlacklist(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = DusterStorage.AccountBlacklistParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RewardAccountParams
        ///  Account to take reward from.
        /// </summary>
        public static string RewardAccountParams()
        {
            return RequestGenerator.GetStorage("Duster", "RewardAccount", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> RewardAccountDefault
        /// Default value as hex string
        /// </summary>
        public static string RewardAccountDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> RewardAccount
        ///  Account to take reward from.
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32> RewardAccount(string blockhash, CancellationToken token)
        {
            string parameters = DusterStorage.RewardAccountParams();
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DustAccountParams
        ///  Account to send dust to.
        /// </summary>
        public static string DustAccountParams()
        {
            return RequestGenerator.GetStorage("Duster", "DustAccount", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> DustAccountDefault
        /// Default value as hex string
        /// </summary>
        public static string DustAccountDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> DustAccount
        ///  Account to send dust to.
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32> DustAccount(string blockhash, CancellationToken token)
        {
            string parameters = DusterStorage.DustAccountParams();
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> DusterCalls
    /// </summary>
    public sealed class DusterCalls
    {
        
        /// <summary>
        /// >> dust_account
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method DustAccount(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 account, Substrate.NetApi.Model.Types.Primitive.U32 currency_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(account.Encode());
            byteArray.AddRange(currency_id.Encode());
            return new Method(61, "Duster", 0, "dust_account", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_nondustable_account
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddNondustableAccount(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 account)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(account.Encode());
            return new Method(61, "Duster", 1, "add_nondustable_account", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_nondustable_account
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveNondustableAccount(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 account)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(account.Encode());
            return new Method(61, "Duster", 2, "remove_nondustable_account", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> DusterConstants
    /// </summary>
    public sealed class DusterConstants
    {
        
        /// <summary>
        /// >> Reward
        ///  Reward amount
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 Reward()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> NativeCurrencyId
        ///  Native Asset Id
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 NativeCurrencyId()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> DusterErrors
    /// </summary>
    public enum DusterErrors
    {
        
        /// <summary>
        /// >> AccountBlacklisted
        /// Account is excluded from dusting.
        /// </summary>
        AccountBlacklisted,
        
        /// <summary>
        /// >> AccountNotBlacklisted
        /// Account is not present in the non-dustable list.
        /// </summary>
        AccountNotBlacklisted,
        
        /// <summary>
        /// >> ZeroBalance
        /// The balance is zero.
        /// </summary>
        ZeroBalance,
        
        /// <summary>
        /// >> BalanceSufficient
        /// The balance is sufficient to keep account open.
        /// </summary>
        BalanceSufficient,
        
        /// <summary>
        /// >> DustAccountNotSet
        /// Dust account is not set.
        /// </summary>
        DustAccountNotSet,
        
        /// <summary>
        /// >> ReserveAccountNotSet
        /// Reserve account is not set.
        /// </summary>
        ReserveAccountNotSet,
    }
}
