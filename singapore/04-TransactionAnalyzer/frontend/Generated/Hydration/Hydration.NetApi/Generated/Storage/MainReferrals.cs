//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Hydration.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> ReferralsStorage
    /// </summary>
    public sealed class ReferralsStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> ReferralsStorage Constructor
        /// </summary>
        public ReferralsStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Referrals", "ReferralCodes"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT6), typeof(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Referrals", "ReferralAccounts"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT6)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Referrals", "LinkedAccounts"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Referrals", "ReferrerShares"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Referrals", "TraderShares"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Referrals", "TotalShares"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Referrals", "Referrer"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Model.pallet_referrals.EnumLevel, Substrate.NetApi.Model.Types.Primitive.U128>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Referrals", "AssetRewards"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Hydration.NetApi.Generated.Model.pallet_referrals.EnumLevel>), typeof(Hydration.NetApi.Generated.Model.pallet_referrals.FeeDistribution)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Referrals", "PendingConversions"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Referrals", "CounterForPendingConversions"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
        }
        
        /// <summary>
        /// >> ReferralCodesParams
        ///  Referral codes
        ///  Maps a referral code to an account.
        /// </summary>
        public static string ReferralCodesParams(Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT6 key)
        {
            return RequestGenerator.GetStorage("Referrals", "ReferralCodes", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ReferralCodesDefault
        /// Default value as hex string
        /// </summary>
        public static string ReferralCodesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ReferralCodes
        ///  Referral codes
        ///  Maps a referral code to an account.
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32> ReferralCodes(Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT6 key, string blockhash, CancellationToken token)
        {
            string parameters = ReferralsStorage.ReferralCodesParams(key);
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ReferralAccountsParams
        ///  Referral accounts
        ///  Maps an account to a referral code.
        /// </summary>
        public static string ReferralAccountsParams(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Referrals", "ReferralAccounts", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ReferralAccountsDefault
        /// Default value as hex string
        /// </summary>
        public static string ReferralAccountsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ReferralAccounts
        ///  Referral accounts
        ///  Maps an account to a referral code.
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT6> ReferralAccounts(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = ReferralsStorage.ReferralAccountsParams(key);
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT6>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LinkedAccountsParams
        ///  Linked accounts.
        ///  Maps an account to a referral account.
        /// </summary>
        public static string LinkedAccountsParams(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Referrals", "LinkedAccounts", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> LinkedAccountsDefault
        /// Default value as hex string
        /// </summary>
        public static string LinkedAccountsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> LinkedAccounts
        ///  Linked accounts.
        ///  Maps an account to a referral account.
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32> LinkedAccounts(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = ReferralsStorage.LinkedAccountsParams(key);
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ReferrerSharesParams
        ///  Shares of a referral account
        /// </summary>
        public static string ReferrerSharesParams(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Referrals", "ReferrerShares", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ReferrerSharesDefault
        /// Default value as hex string
        /// </summary>
        public static string ReferrerSharesDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> ReferrerShares
        ///  Shares of a referral account
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> ReferrerShares(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = ReferralsStorage.ReferrerSharesParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TraderSharesParams
        ///  Shares of a trader account
        /// </summary>
        public static string TraderSharesParams(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Referrals", "TraderShares", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> TraderSharesDefault
        /// Default value as hex string
        /// </summary>
        public static string TraderSharesDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> TraderShares
        ///  Shares of a trader account
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> TraderShares(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = ReferralsStorage.TraderSharesParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TotalSharesParams
        ///  Total share issuance.
        /// </summary>
        public static string TotalSharesParams()
        {
            return RequestGenerator.GetStorage("Referrals", "TotalShares", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> TotalSharesDefault
        /// Default value as hex string
        /// </summary>
        public static string TotalSharesDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> TotalShares
        ///  Total share issuance.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> TotalShares(string blockhash, CancellationToken token)
        {
            string parameters = ReferralsStorage.TotalSharesParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ReferrerParams
        ///  Referer level and total accumulated rewards over time.
        ///  Maps referrer account to (Level, Balance). Level indicates current rewards and Balance is used to unlock next level.
        ///  Dev note: we use OptionQuery here because this helps to easily determine that an account if referrer account.
        /// </summary>
        public static string ReferrerParams(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Referrals", "Referrer", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ReferrerDefault
        /// Default value as hex string
        /// </summary>
        public static string ReferrerDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Referrer
        ///  Referer level and total accumulated rewards over time.
        ///  Maps referrer account to (Level, Balance). Level indicates current rewards and Balance is used to unlock next level.
        ///  Dev note: we use OptionQuery here because this helps to easily determine that an account if referrer account.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Model.pallet_referrals.EnumLevel, Substrate.NetApi.Model.Types.Primitive.U128>> Referrer(Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = ReferralsStorage.ReferrerParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Model.pallet_referrals.EnumLevel, Substrate.NetApi.Model.Types.Primitive.U128>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AssetRewardsParams
        ///  Asset fee distribution rewards information.
        ///  Maps (asset_id, level) to asset reward percentages.
        /// </summary>
        public static string AssetRewardsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Hydration.NetApi.Generated.Model.pallet_referrals.EnumLevel> key)
        {
            return RequestGenerator.GetStorage("Referrals", "AssetRewards", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> AssetRewardsDefault
        /// Default value as hex string
        /// </summary>
        public static string AssetRewardsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AssetRewards
        ///  Asset fee distribution rewards information.
        ///  Maps (asset_id, level) to asset reward percentages.
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.pallet_referrals.FeeDistribution> AssetRewards(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Hydration.NetApi.Generated.Model.pallet_referrals.EnumLevel> key, string blockhash, CancellationToken token)
        {
            string parameters = ReferralsStorage.AssetRewardsParams(key);
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.pallet_referrals.FeeDistribution>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PendingConversionsParams
        ///  Information about assets that are currently in the rewards pot.
        ///  Used to easily determine list of assets that need to be converted.
        /// </summary>
        public static string PendingConversionsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Referrals", "PendingConversions", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PendingConversionsDefault
        /// Default value as hex string
        /// </summary>
        public static string PendingConversionsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PendingConversions
        ///  Information about assets that are currently in the rewards pot.
        ///  Used to easily determine list of assets that need to be converted.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> PendingConversions(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = ReferralsStorage.PendingConversionsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CounterForPendingConversionsParams
        /// Counter for the related counted storage map
        /// </summary>
        public static string CounterForPendingConversionsParams()
        {
            return RequestGenerator.GetStorage("Referrals", "CounterForPendingConversions", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CounterForPendingConversionsDefault
        /// Default value as hex string
        /// </summary>
        public static string CounterForPendingConversionsDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> CounterForPendingConversions
        /// Counter for the related counted storage map
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CounterForPendingConversions(string blockhash, CancellationToken token)
        {
            string parameters = ReferralsStorage.CounterForPendingConversionsParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> ReferralsCalls
    /// </summary>
    public sealed class ReferralsCalls
    {
        
        /// <summary>
        /// >> register_code
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RegisterCode(Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT6 code)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(code.Encode());
            return new Method(75, "Referrals", 0, "register_code", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> link_code
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method LinkCode(Hydration.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT6 code)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(code.Encode());
            return new Method(75, "Referrals", 1, "link_code", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> convert
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Convert(Substrate.NetApi.Model.Types.Primitive.U32 asset_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            return new Method(75, "Referrals", 2, "convert", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim_rewards
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClaimRewards()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(75, "Referrals", 3, "claim_rewards", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_reward_percentage
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetRewardPercentage(Substrate.NetApi.Model.Types.Primitive.U32 asset_id, Hydration.NetApi.Generated.Model.pallet_referrals.EnumLevel level, Hydration.NetApi.Generated.Model.pallet_referrals.FeeDistribution rewards)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(level.Encode());
            byteArray.AddRange(rewards.Encode());
            return new Method(75, "Referrals", 4, "set_reward_percentage", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> ReferralsConstants
    /// </summary>
    public sealed class ReferralsConstants
    {
        
        /// <summary>
        /// >> RewardAsset
        ///  ID of an asset that is used to distribute rewards in.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 RewardAsset()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00000000");
            return result;
        }
        
        /// <summary>
        /// >> PalletId
        ///  Pallet id. Determines account which holds accumulated rewards in various assets.
        /// </summary>
        public Hydration.NetApi.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new Hydration.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x726566657272616C");
            return result;
        }
        
        /// <summary>
        /// >> RegistrationFee
        ///  Registration fee details.
        ///  (ID of an asset which fee is to be paid in, Amount, Beneficiary account)
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U128, Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32> RegistrationFee()
        {
            var result = new Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U128, Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32>();
            result.Create("0x0000000000E02367E8C9000000000000000000006D6F646C70792F7472737279000000000000000" +
                    "0000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> CodeLength
        ///  Maximum referral code length.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 CodeLength()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x0A000000");
            return result;
        }
        
        /// <summary>
        /// >> MinCodeLength
        ///  Minimum referral code length.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MinCodeLength()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x04000000");
            return result;
        }
        
        /// <summary>
        /// >> SeedNativeAmount
        ///  Seed amount that was sent to the reward pot.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 SeedNativeAmount()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00A0724E180900000000000000000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> ReferralsErrors
    /// </summary>
    public enum ReferralsErrors
    {
        
        /// <summary>
        /// >> TooLong
        /// Referral code is too long.
        /// </summary>
        TooLong,
        
        /// <summary>
        /// >> TooShort
        /// Referral code is too short.
        /// </summary>
        TooShort,
        
        /// <summary>
        /// >> InvalidCharacter
        /// Referral code contains invalid character. Only alphanumeric characters are allowed.
        /// </summary>
        InvalidCharacter,
        
        /// <summary>
        /// >> AlreadyExists
        /// Referral code already exists.
        /// </summary>
        AlreadyExists,
        
        /// <summary>
        /// >> InvalidCode
        /// Provided referral code is invalid. Either does not exist or is too long.
        /// </summary>
        InvalidCode,
        
        /// <summary>
        /// >> AlreadyLinked
        /// Account is already linked to another referral account.
        /// </summary>
        AlreadyLinked,
        
        /// <summary>
        /// >> ZeroAmount
        /// Nothing in the referral pot account for the asset.
        /// </summary>
        ZeroAmount,
        
        /// <summary>
        /// >> LinkNotAllowed
        /// Linking an account to the same referral account is not allowed.
        /// </summary>
        LinkNotAllowed,
        
        /// <summary>
        /// >> IncorrectRewardCalculation
        /// Calculated rewards are more than the fee amount. This can happen if percentages are incorrectly set.
        /// </summary>
        IncorrectRewardCalculation,
        
        /// <summary>
        /// >> IncorrectRewardPercentage
        /// Given referrer and trader percentages exceeds 100% percent.
        /// </summary>
        IncorrectRewardPercentage,
        
        /// <summary>
        /// >> AlreadyRegistered
        /// The account has already a code registered.
        /// </summary>
        AlreadyRegistered,
        
        /// <summary>
        /// >> PriceNotFound
        /// Price for given asset pair not found.
        /// </summary>
        PriceNotFound,
        
        /// <summary>
        /// >> ConversionMinTradingAmountNotReached
        /// Minimum trading amount for conversion has not been reached.
        /// </summary>
        ConversionMinTradingAmountNotReached,
        
        /// <summary>
        /// >> ConversionZeroAmountReceived
        /// Zero amount received from conversion.
        /// </summary>
        ConversionZeroAmountReceived,
    }
}
