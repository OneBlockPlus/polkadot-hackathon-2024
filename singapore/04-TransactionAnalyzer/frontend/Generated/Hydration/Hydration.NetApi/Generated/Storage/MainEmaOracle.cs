//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Hydration.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> EmaOracleStorage
    /// </summary>
    public sealed class EmaOracleStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> EmaOracleStorage Constructor
        /// </summary>
        public EmaOracleStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EmaOracle", "Accumulator"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Hydration.NetApi.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMap)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EmaOracle", "Oracles"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Types.Base.Arr8U8, Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>, Hydration.NetApi.Generated.Model.hydradx_traits.oracle.EnumOraclePeriod>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Model.pallet_ema_oracle.types.OracleEntry, Substrate.NetApi.Model.Types.Primitive.U32>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EmaOracle", "WhitelistedAssets"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Hydration.NetApi.Generated.Model.bounded_collections.bounded_btree_set.BoundedBTreeSetT2)));
        }
        
        /// <summary>
        /// >> AccumulatorParams
        ///  Accumulator for oracle data in current block that will be recorded at the end of the block.
        /// </summary>
        public static string AccumulatorParams()
        {
            return RequestGenerator.GetStorage("EmaOracle", "Accumulator", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> AccumulatorDefault
        /// Default value as hex string
        /// </summary>
        public static string AccumulatorDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Accumulator
        ///  Accumulator for oracle data in current block that will be recorded at the end of the block.
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMap> Accumulator(string blockhash, CancellationToken token)
        {
            string parameters = EmaOracleStorage.AccumulatorParams();
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMap>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OraclesParams
        ///  Oracle storage keyed by data source, involved asset ids and the period length of the oracle.
        /// 
        ///  Stores the data entry as well as the block number when the oracle was first initialized.
        /// </summary>
        public static string OraclesParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Types.Base.Arr8U8, Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>, Hydration.NetApi.Generated.Model.hydradx_traits.oracle.EnumOraclePeriod> key)
        {
            return RequestGenerator.GetStorage("EmaOracle", "Oracles", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, key.Value);
        }
        
        /// <summary>
        /// >> OraclesDefault
        /// Default value as hex string
        /// </summary>
        public static string OraclesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Oracles
        ///  Oracle storage keyed by data source, involved asset ids and the period length of the oracle.
        /// 
        ///  Stores the data entry as well as the block number when the oracle was first initialized.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Model.pallet_ema_oracle.types.OracleEntry, Substrate.NetApi.Model.Types.Primitive.U32>> Oracles(Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Types.Base.Arr8U8, Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>, Hydration.NetApi.Generated.Model.hydradx_traits.oracle.EnumOraclePeriod> key, string blockhash, CancellationToken token)
        {
            string parameters = EmaOracleStorage.OraclesParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Hydration.NetApi.Generated.Model.pallet_ema_oracle.types.OracleEntry, Substrate.NetApi.Model.Types.Primitive.U32>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> WhitelistedAssetsParams
        ///  Assets that are whitelisted and tracked by the pallet.
        /// </summary>
        public static string WhitelistedAssetsParams()
        {
            return RequestGenerator.GetStorage("EmaOracle", "WhitelistedAssets", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> WhitelistedAssetsDefault
        /// Default value as hex string
        /// </summary>
        public static string WhitelistedAssetsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> WhitelistedAssets
        ///  Assets that are whitelisted and tracked by the pallet.
        /// </summary>
        public async Task<Hydration.NetApi.Generated.Model.bounded_collections.bounded_btree_set.BoundedBTreeSetT2> WhitelistedAssets(string blockhash, CancellationToken token)
        {
            string parameters = EmaOracleStorage.WhitelistedAssetsParams();
            var result = await _client.GetStorageAsync<Hydration.NetApi.Generated.Model.bounded_collections.bounded_btree_set.BoundedBTreeSetT2>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> EmaOracleCalls
    /// </summary>
    public sealed class EmaOracleCalls
    {
        
        /// <summary>
        /// >> add_oracle
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddOracle(Hydration.NetApi.Generated.Types.Base.Arr8U8 source, Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> assets)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(source.Encode());
            byteArray.AddRange(assets.Encode());
            return new Method(202, "EmaOracle", 0, "add_oracle", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_oracle
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveOracle(Hydration.NetApi.Generated.Types.Base.Arr8U8 source, Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> assets)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(source.Encode());
            byteArray.AddRange(assets.Encode());
            return new Method(202, "EmaOracle", 1, "remove_oracle", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> EmaOracleConstants
    /// </summary>
    public sealed class EmaOracleConstants
    {
        
        /// <summary>
        /// >> MaxUniqueEntries
        ///  Maximum number of unique oracle entries expected in one block.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxUniqueEntries()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x28000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> EmaOracleErrors
    /// </summary>
    public enum EmaOracleErrors
    {
        
        /// <summary>
        /// >> TooManyUniqueEntries
        /// </summary>
        TooManyUniqueEntries,
        
        /// <summary>
        /// >> OnTradeValueZero
        /// </summary>
        OnTradeValueZero,
        
        /// <summary>
        /// >> OracleNotFound
        /// </summary>
        OracleNotFound,
    }
}
