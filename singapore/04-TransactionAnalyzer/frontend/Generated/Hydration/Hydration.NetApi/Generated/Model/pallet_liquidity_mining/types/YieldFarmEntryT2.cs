//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Attributes;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Metadata.V14;
using System.Collections.Generic;


namespace Hydration.NetApi.Generated.Model.pallet_liquidity_mining.types
{
    
    
    /// <summary>
    /// >> 655 - Composite[pallet_liquidity_mining.types.YieldFarmEntryT2]
    /// </summary>
    [SubstrateNodeType(TypeDefEnum.Composite)]
    public sealed class YieldFarmEntryT2 : BaseType
    {
        
        /// <summary>
        /// >> global_farm_id
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GlobalFarmId { get; set; }
        /// <summary>
        /// >> yield_farm_id
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 YieldFarmId { get; set; }
        /// <summary>
        /// >> valued_shares
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 ValuedShares { get; set; }
        /// <summary>
        /// >> accumulated_rpvs
        /// </summary>
        public Hydration.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128 AccumulatedRpvs { get; set; }
        /// <summary>
        /// >> accumulated_claimed_rewards
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 AccumulatedClaimedRewards { get; set; }
        /// <summary>
        /// >> entered_at
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 EnteredAt { get; set; }
        /// <summary>
        /// >> updated_at
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 UpdatedAt { get; set; }
        /// <summary>
        /// >> stopped_at_creation
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 StoppedAtCreation { get; set; }
        
        /// <inheritdoc/>
        public override string TypeName()
        {
            return "YieldFarmEntryT2";
        }
        
        /// <inheritdoc/>
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(GlobalFarmId.Encode());
            result.AddRange(YieldFarmId.Encode());
            result.AddRange(ValuedShares.Encode());
            result.AddRange(AccumulatedRpvs.Encode());
            result.AddRange(AccumulatedClaimedRewards.Encode());
            result.AddRange(EnteredAt.Encode());
            result.AddRange(UpdatedAt.Encode());
            result.AddRange(StoppedAtCreation.Encode());
            return result.ToArray();
        }
        
        /// <inheritdoc/>
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            GlobalFarmId = new Substrate.NetApi.Model.Types.Primitive.U32();
            GlobalFarmId.Decode(byteArray, ref p);
            YieldFarmId = new Substrate.NetApi.Model.Types.Primitive.U32();
            YieldFarmId.Decode(byteArray, ref p);
            ValuedShares = new Substrate.NetApi.Model.Types.Primitive.U128();
            ValuedShares.Decode(byteArray, ref p);
            AccumulatedRpvs = new Hydration.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128();
            AccumulatedRpvs.Decode(byteArray, ref p);
            AccumulatedClaimedRewards = new Substrate.NetApi.Model.Types.Primitive.U128();
            AccumulatedClaimedRewards.Decode(byteArray, ref p);
            EnteredAt = new Substrate.NetApi.Model.Types.Primitive.U32();
            EnteredAt.Decode(byteArray, ref p);
            UpdatedAt = new Substrate.NetApi.Model.Types.Primitive.U32();
            UpdatedAt.Decode(byteArray, ref p);
            StoppedAtCreation = new Substrate.NetApi.Model.Types.Primitive.U32();
            StoppedAtCreation.Decode(byteArray, ref p);
            var bytesLength = p - start;
            TypeSize = bytesLength;
            Bytes = new byte[bytesLength];
            global::System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
        }
    }
}
