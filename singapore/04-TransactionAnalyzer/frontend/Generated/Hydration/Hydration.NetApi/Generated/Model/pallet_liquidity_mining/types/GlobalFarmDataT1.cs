//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Attributes;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Metadata.V14;
using System.Collections.Generic;


namespace Hydration.NetApi.Generated.Model.pallet_liquidity_mining.types
{
    
    
    /// <summary>
    /// >> 571 - Composite[pallet_liquidity_mining.types.GlobalFarmDataT1]
    /// </summary>
    [SubstrateNodeType(TypeDefEnum.Composite)]
    public sealed class GlobalFarmDataT1 : BaseType
    {
        
        /// <summary>
        /// >> id
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 Id { get; set; }
        /// <summary>
        /// >> owner
        /// </summary>
        public Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32 Owner { get; set; }
        /// <summary>
        /// >> updated_at
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 UpdatedAt { get; set; }
        /// <summary>
        /// >> total_shares_z
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 TotalSharesZ { get; set; }
        /// <summary>
        /// >> accumulated_rpz
        /// </summary>
        public Hydration.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128 AccumulatedRpz { get; set; }
        /// <summary>
        /// >> reward_currency
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 RewardCurrency { get; set; }
        /// <summary>
        /// >> pending_rewards
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 PendingRewards { get; set; }
        /// <summary>
        /// >> accumulated_paid_rewards
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 AccumulatedPaidRewards { get; set; }
        /// <summary>
        /// >> yield_per_period
        /// </summary>
        public Hydration.NetApi.Generated.Model.sp_arithmetic.per_things.Perquintill YieldPerPeriod { get; set; }
        /// <summary>
        /// >> planned_yielding_periods
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 PlannedYieldingPeriods { get; set; }
        /// <summary>
        /// >> blocks_per_period
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 BlocksPerPeriod { get; set; }
        /// <summary>
        /// >> incentivized_asset
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 IncentivizedAsset { get; set; }
        /// <summary>
        /// >> max_reward_per_period
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MaxRewardPerPeriod { get; set; }
        /// <summary>
        /// >> min_deposit
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinDeposit { get; set; }
        /// <summary>
        /// >> live_yield_farms_count
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 LiveYieldFarmsCount { get; set; }
        /// <summary>
        /// >> total_yield_farms_count
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 TotalYieldFarmsCount { get; set; }
        /// <summary>
        /// >> price_adjustment
        /// </summary>
        public Hydration.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128 PriceAdjustment { get; set; }
        /// <summary>
        /// >> state
        /// </summary>
        public Hydration.NetApi.Generated.Model.pallet_liquidity_mining.types.EnumFarmState State { get; set; }
        
        /// <inheritdoc/>
        public override string TypeName()
        {
            return "GlobalFarmDataT1";
        }
        
        /// <inheritdoc/>
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(Id.Encode());
            result.AddRange(Owner.Encode());
            result.AddRange(UpdatedAt.Encode());
            result.AddRange(TotalSharesZ.Encode());
            result.AddRange(AccumulatedRpz.Encode());
            result.AddRange(RewardCurrency.Encode());
            result.AddRange(PendingRewards.Encode());
            result.AddRange(AccumulatedPaidRewards.Encode());
            result.AddRange(YieldPerPeriod.Encode());
            result.AddRange(PlannedYieldingPeriods.Encode());
            result.AddRange(BlocksPerPeriod.Encode());
            result.AddRange(IncentivizedAsset.Encode());
            result.AddRange(MaxRewardPerPeriod.Encode());
            result.AddRange(MinDeposit.Encode());
            result.AddRange(LiveYieldFarmsCount.Encode());
            result.AddRange(TotalYieldFarmsCount.Encode());
            result.AddRange(PriceAdjustment.Encode());
            result.AddRange(State.Encode());
            return result.ToArray();
        }
        
        /// <inheritdoc/>
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            Id = new Substrate.NetApi.Model.Types.Primitive.U32();
            Id.Decode(byteArray, ref p);
            Owner = new Hydration.NetApi.Generated.Model.sp_core.crypto.AccountId32();
            Owner.Decode(byteArray, ref p);
            UpdatedAt = new Substrate.NetApi.Model.Types.Primitive.U32();
            UpdatedAt.Decode(byteArray, ref p);
            TotalSharesZ = new Substrate.NetApi.Model.Types.Primitive.U128();
            TotalSharesZ.Decode(byteArray, ref p);
            AccumulatedRpz = new Hydration.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128();
            AccumulatedRpz.Decode(byteArray, ref p);
            RewardCurrency = new Substrate.NetApi.Model.Types.Primitive.U32();
            RewardCurrency.Decode(byteArray, ref p);
            PendingRewards = new Substrate.NetApi.Model.Types.Primitive.U128();
            PendingRewards.Decode(byteArray, ref p);
            AccumulatedPaidRewards = new Substrate.NetApi.Model.Types.Primitive.U128();
            AccumulatedPaidRewards.Decode(byteArray, ref p);
            YieldPerPeriod = new Hydration.NetApi.Generated.Model.sp_arithmetic.per_things.Perquintill();
            YieldPerPeriod.Decode(byteArray, ref p);
            PlannedYieldingPeriods = new Substrate.NetApi.Model.Types.Primitive.U32();
            PlannedYieldingPeriods.Decode(byteArray, ref p);
            BlocksPerPeriod = new Substrate.NetApi.Model.Types.Primitive.U32();
            BlocksPerPeriod.Decode(byteArray, ref p);
            IncentivizedAsset = new Substrate.NetApi.Model.Types.Primitive.U32();
            IncentivizedAsset.Decode(byteArray, ref p);
            MaxRewardPerPeriod = new Substrate.NetApi.Model.Types.Primitive.U128();
            MaxRewardPerPeriod.Decode(byteArray, ref p);
            MinDeposit = new Substrate.NetApi.Model.Types.Primitive.U128();
            MinDeposit.Decode(byteArray, ref p);
            LiveYieldFarmsCount = new Substrate.NetApi.Model.Types.Primitive.U32();
            LiveYieldFarmsCount.Decode(byteArray, ref p);
            TotalYieldFarmsCount = new Substrate.NetApi.Model.Types.Primitive.U32();
            TotalYieldFarmsCount.Decode(byteArray, ref p);
            PriceAdjustment = new Hydration.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128();
            PriceAdjustment.Decode(byteArray, ref p);
            State = new Hydration.NetApi.Generated.Model.pallet_liquidity_mining.types.EnumFarmState();
            State.Decode(byteArray, ref p);
            var bytesLength = p - start;
            TypeSize = bytesLength;
            Bytes = new byte[bytesLength];
            global::System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
        }
    }
}
