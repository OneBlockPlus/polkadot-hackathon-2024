//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Polkadot.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> MmrStorage
    /// </summary>
    public sealed class MmrStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> MmrStorage Constructor
        /// </summary>
        public MmrStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Mmr", "RootHash"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Polkadot.NetApi.Generated.Model.primitive_types.H256)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Mmr", "NumberOfLeaves"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Mmr", "Nodes"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Primitive.U64), typeof(Polkadot.NetApi.Generated.Model.primitive_types.H256)));
        }
        
        /// <summary>
        /// >> RootHashParams
        ///  Latest MMR Root hash.
        /// </summary>
        public static string RootHashParams()
        {
            return RequestGenerator.GetStorage("Mmr", "RootHash", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> RootHashDefault
        /// Default value as hex string
        /// </summary>
        public static string RootHashDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> RootHash
        ///  Latest MMR Root hash.
        /// </summary>
        public async Task<Polkadot.NetApi.Generated.Model.primitive_types.H256> RootHash(string blockhash, CancellationToken token)
        {
            string parameters = MmrStorage.RootHashParams();
            var result = await _client.GetStorageAsync<Polkadot.NetApi.Generated.Model.primitive_types.H256>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NumberOfLeavesParams
        ///  Current size of the MMR (number of leaves).
        /// </summary>
        public static string NumberOfLeavesParams()
        {
            return RequestGenerator.GetStorage("Mmr", "NumberOfLeaves", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NumberOfLeavesDefault
        /// Default value as hex string
        /// </summary>
        public static string NumberOfLeavesDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> NumberOfLeaves
        ///  Current size of the MMR (number of leaves).
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> NumberOfLeaves(string blockhash, CancellationToken token)
        {
            string parameters = MmrStorage.NumberOfLeavesParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NodesParams
        ///  Hashes of the nodes in the MMR.
        /// 
        ///  Note this collection only contains MMR peaks, the inner nodes (and leaves)
        ///  are pruned and only stored in the Offchain DB.
        /// </summary>
        public static string NodesParams(Substrate.NetApi.Model.Types.Primitive.U64 key)
        {
            return RequestGenerator.GetStorage("Mmr", "Nodes", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> NodesDefault
        /// Default value as hex string
        /// </summary>
        public static string NodesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Nodes
        ///  Hashes of the nodes in the MMR.
        /// 
        ///  Note this collection only contains MMR peaks, the inner nodes (and leaves)
        ///  are pruned and only stored in the Offchain DB.
        /// </summary>
        public async Task<Polkadot.NetApi.Generated.Model.primitive_types.H256> Nodes(Substrate.NetApi.Model.Types.Primitive.U64 key, string blockhash, CancellationToken token)
        {
            string parameters = MmrStorage.NodesParams(key);
            var result = await _client.GetStorageAsync<Polkadot.NetApi.Generated.Model.primitive_types.H256>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> MmrCalls
    /// </summary>
    public sealed class MmrCalls
    {
    }
    
    /// <summary>
    /// >> MmrConstants
    /// </summary>
    public sealed class MmrConstants
    {
    }
}
