//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Polkadot.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> InitializerStorage
    /// </summary>
    public sealed class InitializerStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> InitializerStorage Constructor
        /// </summary>
        public InitializerStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Initializer", "HasInitialized"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Initializer", "BufferedSessionChanges"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Polkadot.NetApi.Generated.Model.polkadot_runtime_parachains.initializer.BufferedSessionChange>)));
        }
        
        /// <summary>
        /// >> HasInitializedParams
        ///  Whether the parachains modules have been initialized within this block.
        /// 
        ///  Semantically a `bool`, but this guarantees it should never hit the trie,
        ///  as this is cleared in `on_finalize` and Frame optimizes `None` values to be empty values.
        /// 
        ///  As a `bool`, `set(false)` and `remove()` both lead to the next `get()` being false, but one
        ///  of them writes to the trie and one does not. This confusion makes `Option<()>` more suitable
        ///  for the semantics of this variable.
        /// </summary>
        public static string HasInitializedParams()
        {
            return RequestGenerator.GetStorage("Initializer", "HasInitialized", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> HasInitializedDefault
        /// Default value as hex string
        /// </summary>
        public static string HasInitializedDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> HasInitialized
        ///  Whether the parachains modules have been initialized within this block.
        /// 
        ///  Semantically a `bool`, but this guarantees it should never hit the trie,
        ///  as this is cleared in `on_finalize` and Frame optimizes `None` values to be empty values.
        /// 
        ///  As a `bool`, `set(false)` and `remove()` both lead to the next `get()` being false, but one
        ///  of them writes to the trie and one does not. This confusion makes `Option<()>` more suitable
        ///  for the semantics of this variable.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> HasInitialized(string blockhash, CancellationToken token)
        {
            string parameters = InitializerStorage.HasInitializedParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BufferedSessionChangesParams
        ///  Buffered session changes along with the block number at which they should be applied.
        /// 
        ///  Typically this will be empty or one element long. Apart from that this item never hits
        ///  the storage.
        /// 
        ///  However this is a `Vec` regardless to handle various edge cases that may occur at runtime
        ///  upgrade boundaries or if governance intervenes.
        /// </summary>
        public static string BufferedSessionChangesParams()
        {
            return RequestGenerator.GetStorage("Initializer", "BufferedSessionChanges", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> BufferedSessionChangesDefault
        /// Default value as hex string
        /// </summary>
        public static string BufferedSessionChangesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> BufferedSessionChanges
        ///  Buffered session changes along with the block number at which they should be applied.
        /// 
        ///  Typically this will be empty or one element long. Apart from that this item never hits
        ///  the storage.
        /// 
        ///  However this is a `Vec` regardless to handle various edge cases that may occur at runtime
        ///  upgrade boundaries or if governance intervenes.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Polkadot.NetApi.Generated.Model.polkadot_runtime_parachains.initializer.BufferedSessionChange>> BufferedSessionChanges(string blockhash, CancellationToken token)
        {
            string parameters = InitializerStorage.BufferedSessionChangesParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Polkadot.NetApi.Generated.Model.polkadot_runtime_parachains.initializer.BufferedSessionChange>>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> InitializerCalls
    /// </summary>
    public sealed class InitializerCalls
    {
        
        /// <summary>
        /// >> force_approve
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceApprove(Substrate.NetApi.Model.Types.Primitive.U32 up_to)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(up_to.Encode());
            return new Method(57, "Initializer", 0, "force_approve", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> InitializerConstants
    /// </summary>
    public sealed class InitializerConstants
    {
    }
}
