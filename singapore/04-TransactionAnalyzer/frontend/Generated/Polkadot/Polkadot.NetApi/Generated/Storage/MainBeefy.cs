//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Polkadot.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> BeefyStorage
    /// </summary>
    public sealed class BeefyStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> BeefyStorage Constructor
        /// </summary>
        public BeefyStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Beefy", "Authorities"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Polkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT45)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Beefy", "ValidatorSetId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Beefy", "NextAuthorities"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Polkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT45)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Beefy", "SetIdSession"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U64), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Beefy", "GenesisBlock"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>)));
        }
        
        /// <summary>
        /// >> AuthoritiesParams
        ///  The current authorities set
        /// </summary>
        public static string AuthoritiesParams()
        {
            return RequestGenerator.GetStorage("Beefy", "Authorities", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> AuthoritiesDefault
        /// Default value as hex string
        /// </summary>
        public static string AuthoritiesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Authorities
        ///  The current authorities set
        /// </summary>
        public async Task<Polkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT45> Authorities(string blockhash, CancellationToken token)
        {
            string parameters = BeefyStorage.AuthoritiesParams();
            var result = await _client.GetStorageAsync<Polkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT45>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ValidatorSetIdParams
        ///  The current validator set id
        /// </summary>
        public static string ValidatorSetIdParams()
        {
            return RequestGenerator.GetStorage("Beefy", "ValidatorSetId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ValidatorSetIdDefault
        /// Default value as hex string
        /// </summary>
        public static string ValidatorSetIdDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> ValidatorSetId
        ///  The current validator set id
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> ValidatorSetId(string blockhash, CancellationToken token)
        {
            string parameters = BeefyStorage.ValidatorSetIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NextAuthoritiesParams
        ///  Authorities set scheduled to be used with the next session
        /// </summary>
        public static string NextAuthoritiesParams()
        {
            return RequestGenerator.GetStorage("Beefy", "NextAuthorities", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextAuthoritiesDefault
        /// Default value as hex string
        /// </summary>
        public static string NextAuthoritiesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> NextAuthorities
        ///  Authorities set scheduled to be used with the next session
        /// </summary>
        public async Task<Polkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT45> NextAuthorities(string blockhash, CancellationToken token)
        {
            string parameters = BeefyStorage.NextAuthoritiesParams();
            var result = await _client.GetStorageAsync<Polkadot.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT45>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SetIdSessionParams
        ///  A mapping from BEEFY set ID to the index of the *most recent* session for which its
        ///  members were responsible.
        /// 
        ///  This is only used for validating equivocation proofs. An equivocation proof must
        ///  contains a key-ownership proof for a given session, therefore we need a way to tie
        ///  together sessions and BEEFY set ids, i.e. we need to validate that a validator
        ///  was the owner of a given key on a given session, and what the active set ID was
        ///  during that session.
        /// 
        ///  TWOX-NOTE: `ValidatorSetId` is not under user control.
        /// </summary>
        public static string SetIdSessionParams(Substrate.NetApi.Model.Types.Primitive.U64 key)
        {
            return RequestGenerator.GetStorage("Beefy", "SetIdSession", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SetIdSessionDefault
        /// Default value as hex string
        /// </summary>
        public static string SetIdSessionDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SetIdSession
        ///  A mapping from BEEFY set ID to the index of the *most recent* session for which its
        ///  members were responsible.
        /// 
        ///  This is only used for validating equivocation proofs. An equivocation proof must
        ///  contains a key-ownership proof for a given session, therefore we need a way to tie
        ///  together sessions and BEEFY set ids, i.e. we need to validate that a validator
        ///  was the owner of a given key on a given session, and what the active set ID was
        ///  during that session.
        /// 
        ///  TWOX-NOTE: `ValidatorSetId` is not under user control.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> SetIdSession(Substrate.NetApi.Model.Types.Primitive.U64 key, string blockhash, CancellationToken token)
        {
            string parameters = BeefyStorage.SetIdSessionParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> GenesisBlockParams
        ///  Block number where BEEFY consensus is enabled/started.
        ///  By changing this (through privileged `set_new_genesis()`), BEEFY consensus is effectively
        ///  restarted from the newly set block number.
        /// </summary>
        public static string GenesisBlockParams()
        {
            return RequestGenerator.GetStorage("Beefy", "GenesisBlock", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> GenesisBlockDefault
        /// Default value as hex string
        /// </summary>
        public static string GenesisBlockDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> GenesisBlock
        ///  Block number where BEEFY consensus is enabled/started.
        ///  By changing this (through privileged `set_new_genesis()`), BEEFY consensus is effectively
        ///  restarted from the newly set block number.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>> GenesisBlock(string blockhash, CancellationToken token)
        {
            string parameters = BeefyStorage.GenesisBlockParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> BeefyCalls
    /// </summary>
    public sealed class BeefyCalls
    {
        
        /// <summary>
        /// >> report_equivocation
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ReportEquivocation(Polkadot.NetApi.Generated.Model.sp_consensus_beefy.EquivocationProof equivocation_proof, Polkadot.NetApi.Generated.Model.sp_session.MembershipProof key_owner_proof)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(equivocation_proof.Encode());
            byteArray.AddRange(key_owner_proof.Encode());
            return new Method(200, "Beefy", 0, "report_equivocation", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> report_equivocation_unsigned
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ReportEquivocationUnsigned(Polkadot.NetApi.Generated.Model.sp_consensus_beefy.EquivocationProof equivocation_proof, Polkadot.NetApi.Generated.Model.sp_session.MembershipProof key_owner_proof)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(equivocation_proof.Encode());
            byteArray.AddRange(key_owner_proof.Encode());
            return new Method(200, "Beefy", 1, "report_equivocation_unsigned", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_new_genesis
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetNewGenesis(Substrate.NetApi.Model.Types.Primitive.U32 delay_in_blocks)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(delay_in_blocks.Encode());
            return new Method(200, "Beefy", 2, "set_new_genesis", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> BeefyConstants
    /// </summary>
    public sealed class BeefyConstants
    {
        
        /// <summary>
        /// >> MaxAuthorities
        ///  The maximum number of authorities that can be added.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxAuthorities()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xA0860100");
            return result;
        }
        
        /// <summary>
        /// >> MaxNominators
        ///  The maximum number of nominators for each validator.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxNominators()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00020000");
            return result;
        }
        
        /// <summary>
        /// >> MaxSetIdSessionEntries
        ///  The maximum number of entries to keep in the set id to session index mapping.
        /// 
        ///  Since the `SetIdSession` map is only used for validating equivocations this
        ///  value should relate to the bonding duration of whatever staking system is
        ///  being used (if any). If equivocation handling is not enabled then this value
        ///  can be zero.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 MaxSetIdSessionEntries()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0xA800000000000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> BeefyErrors
    /// </summary>
    public enum BeefyErrors
    {
        
        /// <summary>
        /// >> InvalidKeyOwnershipProof
        /// A key ownership proof provided as part of an equivocation report is invalid.
        /// </summary>
        InvalidKeyOwnershipProof,
        
        /// <summary>
        /// >> InvalidEquivocationProof
        /// An equivocation proof provided as part of an equivocation report is invalid.
        /// </summary>
        InvalidEquivocationProof,
        
        /// <summary>
        /// >> DuplicateOffenceReport
        /// A given equivocation report is valid but already previously reported.
        /// </summary>
        DuplicateOffenceReport,
        
        /// <summary>
        /// >> InvalidConfiguration
        /// Submitted configuration is invalid.
        /// </summary>
        InvalidConfiguration,
    }
}
