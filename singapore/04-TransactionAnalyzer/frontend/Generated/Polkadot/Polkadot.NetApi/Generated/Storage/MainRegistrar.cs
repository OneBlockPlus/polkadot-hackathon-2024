//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Polkadot.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> RegistrarStorage
    /// </summary>
    public sealed class RegistrarStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> RegistrarStorage Constructor
        /// </summary>
        public RegistrarStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Registrar", "PendingSwap"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id), typeof(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Registrar", "Paras"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id), typeof(Polkadot.NetApi.Generated.Model.polkadot_runtime_common.paras_registrar.ParaInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Registrar", "NextFreeParaId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id)));
        }
        
        /// <summary>
        /// >> PendingSwapParams
        ///  Pending swap operations.
        /// </summary>
        public static string PendingSwapParams(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id key)
        {
            return RequestGenerator.GetStorage("Registrar", "PendingSwap", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PendingSwapDefault
        /// Default value as hex string
        /// </summary>
        public static string PendingSwapDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PendingSwap
        ///  Pending swap operations.
        /// </summary>
        public async Task<Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id> PendingSwap(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id key, string blockhash, CancellationToken token)
        {
            string parameters = RegistrarStorage.PendingSwapParams(key);
            var result = await _client.GetStorageAsync<Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ParasParams
        ///  Amount held on deposit for each para and the original depositor.
        /// 
        ///  The given account ID is responsible for registering the code and initial head data, but may
        ///  only do so if it isn't yet registered. (After that, it's up to governance to do so.)
        /// </summary>
        public static string ParasParams(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id key)
        {
            return RequestGenerator.GetStorage("Registrar", "Paras", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ParasDefault
        /// Default value as hex string
        /// </summary>
        public static string ParasDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Paras
        ///  Amount held on deposit for each para and the original depositor.
        /// 
        ///  The given account ID is responsible for registering the code and initial head data, but may
        ///  only do so if it isn't yet registered. (After that, it's up to governance to do so.)
        /// </summary>
        public async Task<Polkadot.NetApi.Generated.Model.polkadot_runtime_common.paras_registrar.ParaInfo> Paras(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id key, string blockhash, CancellationToken token)
        {
            string parameters = RegistrarStorage.ParasParams(key);
            var result = await _client.GetStorageAsync<Polkadot.NetApi.Generated.Model.polkadot_runtime_common.paras_registrar.ParaInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NextFreeParaIdParams
        ///  The next free `ParaId`.
        /// </summary>
        public static string NextFreeParaIdParams()
        {
            return RequestGenerator.GetStorage("Registrar", "NextFreeParaId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextFreeParaIdDefault
        /// Default value as hex string
        /// </summary>
        public static string NextFreeParaIdDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> NextFreeParaId
        ///  The next free `ParaId`.
        /// </summary>
        public async Task<Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id> NextFreeParaId(string blockhash, CancellationToken token)
        {
            string parameters = RegistrarStorage.NextFreeParaIdParams();
            var result = await _client.GetStorageAsync<Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> RegistrarCalls
    /// </summary>
    public sealed class RegistrarCalls
    {
        
        /// <summary>
        /// >> register
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Register(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id id, Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.HeadData genesis_head, Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.ValidationCode validation_code)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(id.Encode());
            byteArray.AddRange(genesis_head.Encode());
            byteArray.AddRange(validation_code.Encode());
            return new Method(70, "Registrar", 0, "register", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_register
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceRegister(Polkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 who, Substrate.NetApi.Model.Types.Primitive.U128 deposit, Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id id, Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.HeadData genesis_head, Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.ValidationCode validation_code)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(deposit.Encode());
            byteArray.AddRange(id.Encode());
            byteArray.AddRange(genesis_head.Encode());
            byteArray.AddRange(validation_code.Encode());
            return new Method(70, "Registrar", 1, "force_register", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> deregister
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Deregister(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(id.Encode());
            return new Method(70, "Registrar", 2, "deregister", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> swap
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Swap(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id id, Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id other)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(id.Encode());
            byteArray.AddRange(other.Encode());
            return new Method(70, "Registrar", 3, "swap", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_lock
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveLock(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id para)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(para.Encode());
            return new Method(70, "Registrar", 4, "remove_lock", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> reserve
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Reserve()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(70, "Registrar", 5, "reserve", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_lock
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddLock(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id para)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(para.Encode());
            return new Method(70, "Registrar", 6, "add_lock", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> schedule_code_upgrade
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ScheduleCodeUpgrade(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id para, Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.ValidationCode new_code)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(para.Encode());
            byteArray.AddRange(new_code.Encode());
            return new Method(70, "Registrar", 7, "schedule_code_upgrade", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_current_head
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetCurrentHead(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id para, Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.HeadData new_head)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(para.Encode());
            byteArray.AddRange(new_head.Encode());
            return new Method(70, "Registrar", 8, "set_current_head", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> RegistrarConstants
    /// </summary>
    public sealed class RegistrarConstants
    {
        
        /// <summary>
        /// >> ParaDeposit
        ///  The deposit to be paid to run a on-demand parachain.
        ///  This should include the cost for storing the genesis head and validation code.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 ParaDeposit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0010A5D4E80000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> DataDepositPerByte
        ///  The deposit to be paid per byte stored on chain.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 DataDepositPerByte()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x80969800000000000000000000000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> RegistrarErrors
    /// </summary>
    public enum RegistrarErrors
    {
        
        /// <summary>
        /// >> NotRegistered
        /// The ID is not registered.
        /// </summary>
        NotRegistered,
        
        /// <summary>
        /// >> AlreadyRegistered
        /// The ID is already registered.
        /// </summary>
        AlreadyRegistered,
        
        /// <summary>
        /// >> NotOwner
        /// The caller is not the owner of this Id.
        /// </summary>
        NotOwner,
        
        /// <summary>
        /// >> CodeTooLarge
        /// Invalid para code size.
        /// </summary>
        CodeTooLarge,
        
        /// <summary>
        /// >> HeadDataTooLarge
        /// Invalid para head data size.
        /// </summary>
        HeadDataTooLarge,
        
        /// <summary>
        /// >> NotParachain
        /// Para is not a Parachain.
        /// </summary>
        NotParachain,
        
        /// <summary>
        /// >> NotParathread
        /// Para is not a Parathread (on-demand parachain).
        /// </summary>
        NotParathread,
        
        /// <summary>
        /// >> CannotDeregister
        /// Cannot deregister para
        /// </summary>
        CannotDeregister,
        
        /// <summary>
        /// >> CannotDowngrade
        /// Cannot schedule downgrade of lease holding parachain to on-demand parachain
        /// </summary>
        CannotDowngrade,
        
        /// <summary>
        /// >> CannotUpgrade
        /// Cannot schedule upgrade of on-demand parachain to lease holding parachain
        /// </summary>
        CannotUpgrade,
        
        /// <summary>
        /// >> ParaLocked
        /// Para is locked from manipulation by the manager. Must use parachain or relay chain
        /// governance.
        /// </summary>
        ParaLocked,
        
        /// <summary>
        /// >> NotReserved
        /// The ID given for registration has not been reserved.
        /// </summary>
        NotReserved,
        
        /// <summary>
        /// >> EmptyCode
        /// Registering parachain with empty code is not allowed.
        /// </summary>
        EmptyCode,
        
        /// <summary>
        /// >> CannotSwap
        /// Cannot perform a parachain slot / lifecycle swap. Check that the state of both paras
        /// are correct for the swap to work.
        /// </summary>
        CannotSwap,
    }
}
