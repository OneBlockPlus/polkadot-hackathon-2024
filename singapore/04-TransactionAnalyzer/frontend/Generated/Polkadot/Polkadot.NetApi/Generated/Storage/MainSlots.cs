//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Polkadot.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> SlotsStorage
    /// </summary>
    public sealed class SlotsStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> SlotsStorage Constructor
        /// </summary>
        public SlotsStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slots", "Leases"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id), typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Polkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128>>>)));
        }
        
        /// <summary>
        /// >> LeasesParams
        ///  Amounts held on deposit for each (possibly future) leased parachain.
        /// 
        ///  The actual amount locked on its behalf by any account at any time is the maximum of the
        ///  second values of the items in this list whose first value is the account.
        /// 
        ///  The first item in the list is the amount locked for the current Lease Period. Following
        ///  items are for the subsequent lease periods.
        /// 
        ///  The default value (an empty list) implies that the parachain no longer exists (or never
        ///  existed) as far as this pallet is concerned.
        /// 
        ///  If a parachain doesn't exist *yet* but is scheduled to exist in the future, then it
        ///  will be left-padded with one or more `None`s to denote the fact that nothing is held on
        ///  deposit for the non-existent chain currently, but is held at some point in the future.
        /// 
        ///  It is illegal for a `None` value to trail in the list.
        /// </summary>
        public static string LeasesParams(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id key)
        {
            return RequestGenerator.GetStorage("Slots", "Leases", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> LeasesDefault
        /// Default value as hex string
        /// </summary>
        public static string LeasesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Leases
        ///  Amounts held on deposit for each (possibly future) leased parachain.
        /// 
        ///  The actual amount locked on its behalf by any account at any time is the maximum of the
        ///  second values of the items in this list whose first value is the account.
        /// 
        ///  The first item in the list is the amount locked for the current Lease Period. Following
        ///  items are for the subsequent lease periods.
        /// 
        ///  The default value (an empty list) implies that the parachain no longer exists (or never
        ///  existed) as far as this pallet is concerned.
        /// 
        ///  If a parachain doesn't exist *yet* but is scheduled to exist in the future, then it
        ///  will be left-padded with one or more `None`s to denote the fact that nothing is held on
        ///  deposit for the non-existent chain currently, but is held at some point in the future.
        /// 
        ///  It is illegal for a `None` value to trail in the list.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Polkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128>>>> Leases(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id key, string blockhash, CancellationToken token)
        {
            string parameters = SlotsStorage.LeasesParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Polkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128>>>>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> SlotsCalls
    /// </summary>
    public sealed class SlotsCalls
    {
        
        /// <summary>
        /// >> force_lease
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceLease(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id para, Polkadot.NetApi.Generated.Model.sp_core.crypto.AccountId32 leaser, Substrate.NetApi.Model.Types.Primitive.U128 amount, Substrate.NetApi.Model.Types.Primitive.U32 period_begin, Substrate.NetApi.Model.Types.Primitive.U32 period_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(para.Encode());
            byteArray.AddRange(leaser.Encode());
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(period_begin.Encode());
            byteArray.AddRange(period_count.Encode());
            return new Method(71, "Slots", 0, "force_lease", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> clear_all_leases
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClearAllLeases(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id para)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(para.Encode());
            return new Method(71, "Slots", 1, "clear_all_leases", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> trigger_onboard
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method TriggerOnboard(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id para)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(para.Encode());
            return new Method(71, "Slots", 2, "trigger_onboard", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> SlotsConstants
    /// </summary>
    public sealed class SlotsConstants
    {
        
        /// <summary>
        /// >> LeasePeriod
        ///  The number of blocks over which a single period lasts.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 LeasePeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00751200");
            return result;
        }
        
        /// <summary>
        /// >> LeaseOffset
        ///  The number of blocks to offset each lease period by.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 LeaseOffset()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00100E00");
            return result;
        }
    }
    
    /// <summary>
    /// >> SlotsErrors
    /// </summary>
    public enum SlotsErrors
    {
        
        /// <summary>
        /// >> ParaNotOnboarding
        /// The parachain ID is not onboarding.
        /// </summary>
        ParaNotOnboarding,
        
        /// <summary>
        /// >> LeaseError
        /// There was an error with the lease.
        /// </summary>
        LeaseError,
    }
}
