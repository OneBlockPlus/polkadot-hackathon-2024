//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Polkadot.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> HrmpStorage
    /// </summary>
    public sealed class HrmpStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> HrmpStorage Constructor
        /// </summary>
        public HrmpStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Hrmp", "HrmpOpenChannelRequests"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.HrmpChannelId), typeof(Polkadot.NetApi.Generated.Model.polkadot_runtime_parachains.hrmp.HrmpOpenChannelRequest)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Hrmp", "HrmpOpenChannelRequestsList"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.HrmpChannelId>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Hrmp", "HrmpOpenChannelRequestCount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Hrmp", "HrmpAcceptedChannelRequestCount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Hrmp", "HrmpCloseChannelRequests"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.HrmpChannelId), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Hrmp", "HrmpCloseChannelRequestsList"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.HrmpChannelId>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Hrmp", "HrmpWatermarks"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Hrmp", "HrmpChannels"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.HrmpChannelId), typeof(Polkadot.NetApi.Generated.Model.polkadot_runtime_parachains.hrmp.HrmpChannel)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Hrmp", "HrmpIngressChannelsIndex"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id), typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Hrmp", "HrmpEgressChannelsIndex"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id), typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Hrmp", "HrmpChannelContents"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.HrmpChannelId), typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Polkadot.NetApi.Generated.Model.polkadot_core_primitives.InboundHrmpMessage>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Hrmp", "HrmpChannelDigests"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id), typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Base.BaseVec<Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id>>>)));
        }
        
        /// <summary>
        /// >> HrmpOpenChannelRequestsParams
        ///  The set of pending HRMP open channel requests.
        /// 
        ///  The set is accompanied by a list for iteration.
        /// 
        ///  Invariant:
        ///  - There are no channels that exists in list but not in the set and vice versa.
        /// </summary>
        public static string HrmpOpenChannelRequestsParams(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.HrmpChannelId key)
        {
            return RequestGenerator.GetStorage("Hrmp", "HrmpOpenChannelRequests", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> HrmpOpenChannelRequestsDefault
        /// Default value as hex string
        /// </summary>
        public static string HrmpOpenChannelRequestsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> HrmpOpenChannelRequests
        ///  The set of pending HRMP open channel requests.
        /// 
        ///  The set is accompanied by a list for iteration.
        /// 
        ///  Invariant:
        ///  - There are no channels that exists in list but not in the set and vice versa.
        /// </summary>
        public async Task<Polkadot.NetApi.Generated.Model.polkadot_runtime_parachains.hrmp.HrmpOpenChannelRequest> HrmpOpenChannelRequests(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.HrmpChannelId key, string blockhash, CancellationToken token)
        {
            string parameters = HrmpStorage.HrmpOpenChannelRequestsParams(key);
            var result = await _client.GetStorageAsync<Polkadot.NetApi.Generated.Model.polkadot_runtime_parachains.hrmp.HrmpOpenChannelRequest>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> HrmpOpenChannelRequestsListParams
        /// </summary>
        public static string HrmpOpenChannelRequestsListParams()
        {
            return RequestGenerator.GetStorage("Hrmp", "HrmpOpenChannelRequestsList", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> HrmpOpenChannelRequestsListDefault
        /// Default value as hex string
        /// </summary>
        public static string HrmpOpenChannelRequestsListDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> HrmpOpenChannelRequestsList
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.HrmpChannelId>> HrmpOpenChannelRequestsList(string blockhash, CancellationToken token)
        {
            string parameters = HrmpStorage.HrmpOpenChannelRequestsListParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.HrmpChannelId>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> HrmpOpenChannelRequestCountParams
        ///  This mapping tracks how many open channel requests are initiated by a given sender para.
        ///  Invariant: `HrmpOpenChannelRequests` should contain the same number of items that has
        ///  `(X, _)` as the number of `HrmpOpenChannelRequestCount` for `X`.
        /// </summary>
        public static string HrmpOpenChannelRequestCountParams(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id key)
        {
            return RequestGenerator.GetStorage("Hrmp", "HrmpOpenChannelRequestCount", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> HrmpOpenChannelRequestCountDefault
        /// Default value as hex string
        /// </summary>
        public static string HrmpOpenChannelRequestCountDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> HrmpOpenChannelRequestCount
        ///  This mapping tracks how many open channel requests are initiated by a given sender para.
        ///  Invariant: `HrmpOpenChannelRequests` should contain the same number of items that has
        ///  `(X, _)` as the number of `HrmpOpenChannelRequestCount` for `X`.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> HrmpOpenChannelRequestCount(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id key, string blockhash, CancellationToken token)
        {
            string parameters = HrmpStorage.HrmpOpenChannelRequestCountParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> HrmpAcceptedChannelRequestCountParams
        ///  This mapping tracks how many open channel requests were accepted by a given recipient para.
        ///  Invariant: `HrmpOpenChannelRequests` should contain the same number of items `(_, X)` with
        ///  `confirmed` set to true, as the number of `HrmpAcceptedChannelRequestCount` for `X`.
        /// </summary>
        public static string HrmpAcceptedChannelRequestCountParams(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id key)
        {
            return RequestGenerator.GetStorage("Hrmp", "HrmpAcceptedChannelRequestCount", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> HrmpAcceptedChannelRequestCountDefault
        /// Default value as hex string
        /// </summary>
        public static string HrmpAcceptedChannelRequestCountDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> HrmpAcceptedChannelRequestCount
        ///  This mapping tracks how many open channel requests were accepted by a given recipient para.
        ///  Invariant: `HrmpOpenChannelRequests` should contain the same number of items `(_, X)` with
        ///  `confirmed` set to true, as the number of `HrmpAcceptedChannelRequestCount` for `X`.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> HrmpAcceptedChannelRequestCount(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id key, string blockhash, CancellationToken token)
        {
            string parameters = HrmpStorage.HrmpAcceptedChannelRequestCountParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> HrmpCloseChannelRequestsParams
        ///  A set of pending HRMP close channel requests that are going to be closed during the session
        ///  change. Used for checking if a given channel is registered for closure.
        /// 
        ///  The set is accompanied by a list for iteration.
        /// 
        ///  Invariant:
        ///  - There are no channels that exists in list but not in the set and vice versa.
        /// </summary>
        public static string HrmpCloseChannelRequestsParams(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.HrmpChannelId key)
        {
            return RequestGenerator.GetStorage("Hrmp", "HrmpCloseChannelRequests", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> HrmpCloseChannelRequestsDefault
        /// Default value as hex string
        /// </summary>
        public static string HrmpCloseChannelRequestsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> HrmpCloseChannelRequests
        ///  A set of pending HRMP close channel requests that are going to be closed during the session
        ///  change. Used for checking if a given channel is registered for closure.
        /// 
        ///  The set is accompanied by a list for iteration.
        /// 
        ///  Invariant:
        ///  - There are no channels that exists in list but not in the set and vice versa.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> HrmpCloseChannelRequests(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.HrmpChannelId key, string blockhash, CancellationToken token)
        {
            string parameters = HrmpStorage.HrmpCloseChannelRequestsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> HrmpCloseChannelRequestsListParams
        /// </summary>
        public static string HrmpCloseChannelRequestsListParams()
        {
            return RequestGenerator.GetStorage("Hrmp", "HrmpCloseChannelRequestsList", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> HrmpCloseChannelRequestsListDefault
        /// Default value as hex string
        /// </summary>
        public static string HrmpCloseChannelRequestsListDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> HrmpCloseChannelRequestsList
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.HrmpChannelId>> HrmpCloseChannelRequestsList(string blockhash, CancellationToken token)
        {
            string parameters = HrmpStorage.HrmpCloseChannelRequestsListParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.HrmpChannelId>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> HrmpWatermarksParams
        ///  The HRMP watermark associated with each para.
        ///  Invariant:
        ///  - each para `P` used here as a key should satisfy `Paras::is_valid_para(P)` within a
        ///    session.
        /// </summary>
        public static string HrmpWatermarksParams(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id key)
        {
            return RequestGenerator.GetStorage("Hrmp", "HrmpWatermarks", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> HrmpWatermarksDefault
        /// Default value as hex string
        /// </summary>
        public static string HrmpWatermarksDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> HrmpWatermarks
        ///  The HRMP watermark associated with each para.
        ///  Invariant:
        ///  - each para `P` used here as a key should satisfy `Paras::is_valid_para(P)` within a
        ///    session.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> HrmpWatermarks(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id key, string blockhash, CancellationToken token)
        {
            string parameters = HrmpStorage.HrmpWatermarksParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> HrmpChannelsParams
        ///  HRMP channel data associated with each para.
        ///  Invariant:
        ///  - each participant in the channel should satisfy `Paras::is_valid_para(P)` within a session.
        /// </summary>
        public static string HrmpChannelsParams(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.HrmpChannelId key)
        {
            return RequestGenerator.GetStorage("Hrmp", "HrmpChannels", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> HrmpChannelsDefault
        /// Default value as hex string
        /// </summary>
        public static string HrmpChannelsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> HrmpChannels
        ///  HRMP channel data associated with each para.
        ///  Invariant:
        ///  - each participant in the channel should satisfy `Paras::is_valid_para(P)` within a session.
        /// </summary>
        public async Task<Polkadot.NetApi.Generated.Model.polkadot_runtime_parachains.hrmp.HrmpChannel> HrmpChannels(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.HrmpChannelId key, string blockhash, CancellationToken token)
        {
            string parameters = HrmpStorage.HrmpChannelsParams(key);
            var result = await _client.GetStorageAsync<Polkadot.NetApi.Generated.Model.polkadot_runtime_parachains.hrmp.HrmpChannel>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> HrmpIngressChannelsIndexParams
        ///  Ingress/egress indexes allow to find all the senders and receivers given the opposite side.
        ///  I.e.
        /// 
        ///  (a) ingress index allows to find all the senders for a given recipient.
        ///  (b) egress index allows to find all the recipients for a given sender.
        /// 
        ///  Invariants:
        ///  - for each ingress index entry for `P` each item `I` in the index should present in
        ///    `HrmpChannels` as `(I, P)`.
        ///  - for each egress index entry for `P` each item `E` in the index should present in
        ///    `HrmpChannels` as `(P, E)`.
        ///  - there should be no other dangling channels in `HrmpChannels`.
        ///  - the vectors are sorted.
        /// </summary>
        public static string HrmpIngressChannelsIndexParams(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id key)
        {
            return RequestGenerator.GetStorage("Hrmp", "HrmpIngressChannelsIndex", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> HrmpIngressChannelsIndexDefault
        /// Default value as hex string
        /// </summary>
        public static string HrmpIngressChannelsIndexDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> HrmpIngressChannelsIndex
        ///  Ingress/egress indexes allow to find all the senders and receivers given the opposite side.
        ///  I.e.
        /// 
        ///  (a) ingress index allows to find all the senders for a given recipient.
        ///  (b) egress index allows to find all the recipients for a given sender.
        /// 
        ///  Invariants:
        ///  - for each ingress index entry for `P` each item `I` in the index should present in
        ///    `HrmpChannels` as `(I, P)`.
        ///  - for each egress index entry for `P` each item `E` in the index should present in
        ///    `HrmpChannels` as `(P, E)`.
        ///  - there should be no other dangling channels in `HrmpChannels`.
        ///  - the vectors are sorted.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id>> HrmpIngressChannelsIndex(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id key, string blockhash, CancellationToken token)
        {
            string parameters = HrmpStorage.HrmpIngressChannelsIndexParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> HrmpEgressChannelsIndexParams
        /// </summary>
        public static string HrmpEgressChannelsIndexParams(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id key)
        {
            return RequestGenerator.GetStorage("Hrmp", "HrmpEgressChannelsIndex", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> HrmpEgressChannelsIndexDefault
        /// Default value as hex string
        /// </summary>
        public static string HrmpEgressChannelsIndexDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> HrmpEgressChannelsIndex
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id>> HrmpEgressChannelsIndex(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id key, string blockhash, CancellationToken token)
        {
            string parameters = HrmpStorage.HrmpEgressChannelsIndexParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> HrmpChannelContentsParams
        ///  Storage for the messages for each channel.
        ///  Invariant: cannot be non-empty if the corresponding channel in `HrmpChannels` is `None`.
        /// </summary>
        public static string HrmpChannelContentsParams(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.HrmpChannelId key)
        {
            return RequestGenerator.GetStorage("Hrmp", "HrmpChannelContents", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> HrmpChannelContentsDefault
        /// Default value as hex string
        /// </summary>
        public static string HrmpChannelContentsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> HrmpChannelContents
        ///  Storage for the messages for each channel.
        ///  Invariant: cannot be non-empty if the corresponding channel in `HrmpChannels` is `None`.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Polkadot.NetApi.Generated.Model.polkadot_core_primitives.InboundHrmpMessage>> HrmpChannelContents(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.HrmpChannelId key, string blockhash, CancellationToken token)
        {
            string parameters = HrmpStorage.HrmpChannelContentsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Polkadot.NetApi.Generated.Model.polkadot_core_primitives.InboundHrmpMessage>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> HrmpChannelDigestsParams
        ///  Maintains a mapping that can be used to answer the question: What paras sent a message at
        ///  the given block number for a given receiver. Invariants:
        ///  - The inner `Vec<ParaId>` is never empty.
        ///  - The inner `Vec<ParaId>` cannot store two same `ParaId`.
        ///  - The outer vector is sorted ascending by block number and cannot store two items with the
        ///    same block number.
        /// </summary>
        public static string HrmpChannelDigestsParams(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id key)
        {
            return RequestGenerator.GetStorage("Hrmp", "HrmpChannelDigests", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> HrmpChannelDigestsDefault
        /// Default value as hex string
        /// </summary>
        public static string HrmpChannelDigestsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> HrmpChannelDigests
        ///  Maintains a mapping that can be used to answer the question: What paras sent a message at
        ///  the given block number for a given receiver. Invariants:
        ///  - The inner `Vec<ParaId>` is never empty.
        ///  - The inner `Vec<ParaId>` cannot store two same `ParaId`.
        ///  - The outer vector is sorted ascending by block number and cannot store two items with the
        ///    same block number.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Base.BaseVec<Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id>>>> HrmpChannelDigests(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id key, string blockhash, CancellationToken token)
        {
            string parameters = HrmpStorage.HrmpChannelDigestsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Base.BaseVec<Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id>>>>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> HrmpCalls
    /// </summary>
    public sealed class HrmpCalls
    {
        
        /// <summary>
        /// >> hrmp_init_open_channel
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method HrmpInitOpenChannel(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id recipient, Substrate.NetApi.Model.Types.Primitive.U32 proposed_max_capacity, Substrate.NetApi.Model.Types.Primitive.U32 proposed_max_message_size)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(recipient.Encode());
            byteArray.AddRange(proposed_max_capacity.Encode());
            byteArray.AddRange(proposed_max_message_size.Encode());
            return new Method(60, "Hrmp", 0, "hrmp_init_open_channel", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> hrmp_accept_open_channel
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method HrmpAcceptOpenChannel(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id sender)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(sender.Encode());
            return new Method(60, "Hrmp", 1, "hrmp_accept_open_channel", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> hrmp_close_channel
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method HrmpCloseChannel(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.HrmpChannelId channel_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(channel_id.Encode());
            return new Method(60, "Hrmp", 2, "hrmp_close_channel", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_clean_hrmp
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceCleanHrmp(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id para, Substrate.NetApi.Model.Types.Primitive.U32 num_inbound, Substrate.NetApi.Model.Types.Primitive.U32 num_outbound)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(para.Encode());
            byteArray.AddRange(num_inbound.Encode());
            byteArray.AddRange(num_outbound.Encode());
            return new Method(60, "Hrmp", 3, "force_clean_hrmp", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_process_hrmp_open
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceProcessHrmpOpen(Substrate.NetApi.Model.Types.Primitive.U32 channels)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(channels.Encode());
            return new Method(60, "Hrmp", 4, "force_process_hrmp_open", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_process_hrmp_close
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceProcessHrmpClose(Substrate.NetApi.Model.Types.Primitive.U32 channels)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(channels.Encode());
            return new Method(60, "Hrmp", 5, "force_process_hrmp_close", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> hrmp_cancel_open_request
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method HrmpCancelOpenRequest(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.HrmpChannelId channel_id, Substrate.NetApi.Model.Types.Primitive.U32 open_requests)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(channel_id.Encode());
            byteArray.AddRange(open_requests.Encode());
            return new Method(60, "Hrmp", 6, "hrmp_cancel_open_request", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_open_hrmp_channel
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceOpenHrmpChannel(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id sender, Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id recipient, Substrate.NetApi.Model.Types.Primitive.U32 max_capacity, Substrate.NetApi.Model.Types.Primitive.U32 max_message_size)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(sender.Encode());
            byteArray.AddRange(recipient.Encode());
            byteArray.AddRange(max_capacity.Encode());
            byteArray.AddRange(max_message_size.Encode());
            return new Method(60, "Hrmp", 7, "force_open_hrmp_channel", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> establish_system_channel
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method EstablishSystemChannel(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id sender, Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id recipient)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(sender.Encode());
            byteArray.AddRange(recipient.Encode());
            return new Method(60, "Hrmp", 8, "establish_system_channel", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> poke_channel_deposits
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method PokeChannelDeposits(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id sender, Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id recipient)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(sender.Encode());
            byteArray.AddRange(recipient.Encode());
            return new Method(60, "Hrmp", 9, "poke_channel_deposits", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> establish_channel_with_system
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method EstablishChannelWithSystem(Polkadot.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id target_system_chain)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(target_system_chain.Encode());
            return new Method(60, "Hrmp", 10, "establish_channel_with_system", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> HrmpConstants
    /// </summary>
    public sealed class HrmpConstants
    {
    }
    
    /// <summary>
    /// >> HrmpErrors
    /// </summary>
    public enum HrmpErrors
    {
        
        /// <summary>
        /// >> OpenHrmpChannelToSelf
        /// The sender tried to open a channel to themselves.
        /// </summary>
        OpenHrmpChannelToSelf,
        
        /// <summary>
        /// >> OpenHrmpChannelInvalidRecipient
        /// The recipient is not a valid para.
        /// </summary>
        OpenHrmpChannelInvalidRecipient,
        
        /// <summary>
        /// >> OpenHrmpChannelZeroCapacity
        /// The requested capacity is zero.
        /// </summary>
        OpenHrmpChannelZeroCapacity,
        
        /// <summary>
        /// >> OpenHrmpChannelCapacityExceedsLimit
        /// The requested capacity exceeds the global limit.
        /// </summary>
        OpenHrmpChannelCapacityExceedsLimit,
        
        /// <summary>
        /// >> OpenHrmpChannelZeroMessageSize
        /// The requested maximum message size is 0.
        /// </summary>
        OpenHrmpChannelZeroMessageSize,
        
        /// <summary>
        /// >> OpenHrmpChannelMessageSizeExceedsLimit
        /// The open request requested the message size that exceeds the global limit.
        /// </summary>
        OpenHrmpChannelMessageSizeExceedsLimit,
        
        /// <summary>
        /// >> OpenHrmpChannelAlreadyExists
        /// The channel already exists
        /// </summary>
        OpenHrmpChannelAlreadyExists,
        
        /// <summary>
        /// >> OpenHrmpChannelAlreadyRequested
        /// There is already a request to open the same channel.
        /// </summary>
        OpenHrmpChannelAlreadyRequested,
        
        /// <summary>
        /// >> OpenHrmpChannelLimitExceeded
        /// The sender already has the maximum number of allowed outbound channels.
        /// </summary>
        OpenHrmpChannelLimitExceeded,
        
        /// <summary>
        /// >> AcceptHrmpChannelDoesntExist
        /// The channel from the sender to the origin doesn't exist.
        /// </summary>
        AcceptHrmpChannelDoesntExist,
        
        /// <summary>
        /// >> AcceptHrmpChannelAlreadyConfirmed
        /// The channel is already confirmed.
        /// </summary>
        AcceptHrmpChannelAlreadyConfirmed,
        
        /// <summary>
        /// >> AcceptHrmpChannelLimitExceeded
        /// The recipient already has the maximum number of allowed inbound channels.
        /// </summary>
        AcceptHrmpChannelLimitExceeded,
        
        /// <summary>
        /// >> CloseHrmpChannelUnauthorized
        /// The origin tries to close a channel where it is neither the sender nor the recipient.
        /// </summary>
        CloseHrmpChannelUnauthorized,
        
        /// <summary>
        /// >> CloseHrmpChannelDoesntExist
        /// The channel to be closed doesn't exist.
        /// </summary>
        CloseHrmpChannelDoesntExist,
        
        /// <summary>
        /// >> CloseHrmpChannelAlreadyUnderway
        /// The channel close request is already requested.
        /// </summary>
        CloseHrmpChannelAlreadyUnderway,
        
        /// <summary>
        /// >> CancelHrmpOpenChannelUnauthorized
        /// Canceling is requested by neither the sender nor recipient of the open channel request.
        /// </summary>
        CancelHrmpOpenChannelUnauthorized,
        
        /// <summary>
        /// >> OpenHrmpChannelDoesntExist
        /// The open request doesn't exist.
        /// </summary>
        OpenHrmpChannelDoesntExist,
        
        /// <summary>
        /// >> OpenHrmpChannelAlreadyConfirmed
        /// Cannot cancel an HRMP open channel request because it is already confirmed.
        /// </summary>
        OpenHrmpChannelAlreadyConfirmed,
        
        /// <summary>
        /// >> WrongWitness
        /// The provided witness data is wrong.
        /// </summary>
        WrongWitness,
        
        /// <summary>
        /// >> ChannelCreationNotAuthorized
        /// The channel between these two chains cannot be authorized.
        /// </summary>
        ChannelCreationNotAuthorized,
    }
}
