//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Attributes;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Metadata.V14;
using System.Collections.Generic;


namespace Bifrost.NetApi.Generated.Model.bifrost_stable_asset
{
    
    
    /// <summary>
    /// >> 856 - Composite[bifrost_stable_asset.StableAssetPoolInfo]
    /// </summary>
    [SubstrateNodeType(TypeDefEnum.Composite)]
    public sealed class StableAssetPoolInfo : BaseType
    {
        
        /// <summary>
        /// >> pool_id
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 PoolId { get; set; }
        /// <summary>
        /// >> pool_asset
        /// </summary>
        public Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId PoolAsset { get; set; }
        /// <summary>
        /// >> assets
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseVec<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> Assets { get; set; }
        /// <summary>
        /// >> precisions
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U128> Precisions { get; set; }
        /// <summary>
        /// >> mint_fee
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MintFee { get; set; }
        /// <summary>
        /// >> swap_fee
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 SwapFee { get; set; }
        /// <summary>
        /// >> redeem_fee
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 RedeemFee { get; set; }
        /// <summary>
        /// >> total_supply
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 TotalSupply { get; set; }
        /// <summary>
        /// >> a
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 A { get; set; }
        /// <summary>
        /// >> a_block
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 ABlock { get; set; }
        /// <summary>
        /// >> future_a
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 FutureA { get; set; }
        /// <summary>
        /// >> future_a_block
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 FutureABlock { get; set; }
        /// <summary>
        /// >> balances
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U128> Balances { get; set; }
        /// <summary>
        /// >> fee_recipient
        /// </summary>
        public Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 FeeRecipient { get; set; }
        /// <summary>
        /// >> account_id
        /// </summary>
        public Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 AccountId { get; set; }
        /// <summary>
        /// >> yield_recipient
        /// </summary>
        public Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 YieldRecipient { get; set; }
        /// <summary>
        /// >> precision
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 Precision { get; set; }
        
        /// <inheritdoc/>
        public override string TypeName()
        {
            return "StableAssetPoolInfo";
        }
        
        /// <inheritdoc/>
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(PoolId.Encode());
            result.AddRange(PoolAsset.Encode());
            result.AddRange(Assets.Encode());
            result.AddRange(Precisions.Encode());
            result.AddRange(MintFee.Encode());
            result.AddRange(SwapFee.Encode());
            result.AddRange(RedeemFee.Encode());
            result.AddRange(TotalSupply.Encode());
            result.AddRange(A.Encode());
            result.AddRange(ABlock.Encode());
            result.AddRange(FutureA.Encode());
            result.AddRange(FutureABlock.Encode());
            result.AddRange(Balances.Encode());
            result.AddRange(FeeRecipient.Encode());
            result.AddRange(AccountId.Encode());
            result.AddRange(YieldRecipient.Encode());
            result.AddRange(Precision.Encode());
            return result.ToArray();
        }
        
        /// <inheritdoc/>
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            PoolId = new Substrate.NetApi.Model.Types.Primitive.U32();
            PoolId.Decode(byteArray, ref p);
            PoolAsset = new Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId();
            PoolAsset.Decode(byteArray, ref p);
            Assets = new Substrate.NetApi.Model.Types.Base.BaseVec<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>();
            Assets.Decode(byteArray, ref p);
            Precisions = new Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U128>();
            Precisions.Decode(byteArray, ref p);
            MintFee = new Substrate.NetApi.Model.Types.Primitive.U128();
            MintFee.Decode(byteArray, ref p);
            SwapFee = new Substrate.NetApi.Model.Types.Primitive.U128();
            SwapFee.Decode(byteArray, ref p);
            RedeemFee = new Substrate.NetApi.Model.Types.Primitive.U128();
            RedeemFee.Decode(byteArray, ref p);
            TotalSupply = new Substrate.NetApi.Model.Types.Primitive.U128();
            TotalSupply.Decode(byteArray, ref p);
            A = new Substrate.NetApi.Model.Types.Primitive.U128();
            A.Decode(byteArray, ref p);
            ABlock = new Substrate.NetApi.Model.Types.Primitive.U32();
            ABlock.Decode(byteArray, ref p);
            FutureA = new Substrate.NetApi.Model.Types.Primitive.U128();
            FutureA.Decode(byteArray, ref p);
            FutureABlock = new Substrate.NetApi.Model.Types.Primitive.U32();
            FutureABlock.Decode(byteArray, ref p);
            Balances = new Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U128>();
            Balances.Decode(byteArray, ref p);
            FeeRecipient = new Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32();
            FeeRecipient.Decode(byteArray, ref p);
            AccountId = new Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32();
            AccountId.Decode(byteArray, ref p);
            YieldRecipient = new Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32();
            YieldRecipient.Decode(byteArray, ref p);
            Precision = new Substrate.NetApi.Model.Types.Primitive.U128();
            Precision.Decode(byteArray, ref p);
            var bytesLength = p - start;
            TypeSize = bytesLength;
            Bytes = new byte[bytesLength];
            global::System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
        }
    }
}
