//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Attributes;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Metadata.V14;
using System.Collections.Generic;


namespace Bifrost.NetApi.Generated.Model.bifrost_slp.primitives.parachain_staking_primitives
{
    
    
    /// <summary>
    /// >> 339 - Composite[bifrost_slp.primitives.parachain_staking_primitives.OneToManyLedger]
    /// </summary>
    [SubstrateNodeType(TypeDefEnum.Composite)]
    public sealed class OneToManyLedger : BaseType
    {
        
        /// <summary>
        /// >> account
        /// </summary>
        public Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation Account { get; set; }
        /// <summary>
        /// >> delegations
        /// </summary>
        public Bifrost.NetApi.Generated.Types.Base.BTreeMapT2 Delegations { get; set; }
        /// <summary>
        /// >> total
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 Total { get; set; }
        /// <summary>
        /// >> less_total
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 LessTotal { get; set; }
        /// <summary>
        /// >> requests
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseVec<Bifrost.NetApi.Generated.Model.bifrost_slp.primitives.parachain_staking_primitives.OneToManyScheduledRequest> Requests { get; set; }
        /// <summary>
        /// >> request_briefs
        /// </summary>
        public Bifrost.NetApi.Generated.Types.Base.BTreeMapT3 RequestBriefs { get; set; }
        /// <summary>
        /// >> status
        /// </summary>
        public Bifrost.NetApi.Generated.Model.bifrost_slp.primitives.parachain_staking_primitives.EnumOneToManyDelegatorStatus Status { get; set; }
        
        /// <inheritdoc/>
        public override string TypeName()
        {
            return "OneToManyLedger";
        }
        
        /// <inheritdoc/>
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(Account.Encode());
            result.AddRange(Delegations.Encode());
            result.AddRange(Total.Encode());
            result.AddRange(LessTotal.Encode());
            result.AddRange(Requests.Encode());
            result.AddRange(RequestBriefs.Encode());
            result.AddRange(Status.Encode());
            return result.ToArray();
        }
        
        /// <inheritdoc/>
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            Account = new Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation();
            Account.Decode(byteArray, ref p);
            Delegations = new Bifrost.NetApi.Generated.Types.Base.BTreeMapT2();
            Delegations.Decode(byteArray, ref p);
            Total = new Substrate.NetApi.Model.Types.Primitive.U128();
            Total.Decode(byteArray, ref p);
            LessTotal = new Substrate.NetApi.Model.Types.Primitive.U128();
            LessTotal.Decode(byteArray, ref p);
            Requests = new Substrate.NetApi.Model.Types.Base.BaseVec<Bifrost.NetApi.Generated.Model.bifrost_slp.primitives.parachain_staking_primitives.OneToManyScheduledRequest>();
            Requests.Decode(byteArray, ref p);
            RequestBriefs = new Bifrost.NetApi.Generated.Types.Base.BTreeMapT3();
            RequestBriefs.Decode(byteArray, ref p);
            Status = new Bifrost.NetApi.Generated.Model.bifrost_slp.primitives.parachain_staking_primitives.EnumOneToManyDelegatorStatus();
            Status.Decode(byteArray, ref p);
            var bytesLength = p - start;
            TypeSize = bytesLength;
            Bytes = new byte[bytesLength];
            global::System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
        }
    }
}
