//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Attributes;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Metadata.V14;
using System.Collections.Generic;


namespace Bifrost.NetApi.Generated.Model.bifrost_slp.primitives.parachain_staking_primitives
{
    
    
    /// <summary>
    /// >> 472 - Composite[bifrost_slp.primitives.parachain_staking_primitives.ParachainStakingLedgerUpdateEntry]
    /// </summary>
    [SubstrateNodeType(TypeDefEnum.Composite)]
    public sealed class ParachainStakingLedgerUpdateEntry : BaseType
    {
        
        /// <summary>
        /// >> currency_id
        /// </summary>
        public Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId CurrencyId { get; set; }
        /// <summary>
        /// >> delegator_id
        /// </summary>
        public Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation DelegatorId { get; set; }
        /// <summary>
        /// >> validator_id
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation> ValidatorId { get; set; }
        /// <summary>
        /// >> update_operation
        /// </summary>
        public Bifrost.NetApi.Generated.Model.bifrost_slp.primitives.parachain_staking_primitives.EnumParachainStakingLedgerUpdateOperation UpdateOperation { get; set; }
        /// <summary>
        /// >> amount
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> Amount { get; set; }
        /// <summary>
        /// >> unlock_time
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumTimeUnit> UnlockTime { get; set; }
        
        /// <inheritdoc/>
        public override string TypeName()
        {
            return "ParachainStakingLedgerUpdateEntry";
        }
        
        /// <inheritdoc/>
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(CurrencyId.Encode());
            result.AddRange(DelegatorId.Encode());
            result.AddRange(ValidatorId.Encode());
            result.AddRange(UpdateOperation.Encode());
            result.AddRange(Amount.Encode());
            result.AddRange(UnlockTime.Encode());
            return result.ToArray();
        }
        
        /// <inheritdoc/>
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            CurrencyId = new Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId();
            CurrencyId.Decode(byteArray, ref p);
            DelegatorId = new Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation();
            DelegatorId.Decode(byteArray, ref p);
            ValidatorId = new Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation>();
            ValidatorId.Decode(byteArray, ref p);
            UpdateOperation = new Bifrost.NetApi.Generated.Model.bifrost_slp.primitives.parachain_staking_primitives.EnumParachainStakingLedgerUpdateOperation();
            UpdateOperation.Decode(byteArray, ref p);
            Amount = new Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>();
            Amount.Decode(byteArray, ref p);
            UnlockTime = new Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumTimeUnit>();
            UnlockTime.Decode(byteArray, ref p);
            var bytesLength = p - start;
            TypeSize = bytesLength;
            Bytes = new byte[bytesLength];
            global::System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
        }
    }
}
