//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Attributes;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Metadata.V14;
using System.Collections.Generic;


namespace Bifrost.NetApi.Generated.Model.merkle_distributor
{
    
    
    /// <summary>
    /// >> 764 - Composite[merkle_distributor.MerkleMetadata]
    /// </summary>
    [SubstrateNodeType(TypeDefEnum.Composite)]
    public sealed class MerkleMetadata : BaseType
    {
        
        /// <summary>
        /// >> merkle_root
        /// </summary>
        public Bifrost.NetApi.Generated.Model.primitive_types.H256 MerkleRoot { get; set; }
        /// <summary>
        /// >> description
        /// </summary>
        public Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT44 Description { get; set; }
        /// <summary>
        /// >> distribute_currency
        /// </summary>
        public Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId DistributeCurrency { get; set; }
        /// <summary>
        /// >> distribute_amount
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 DistributeAmount { get; set; }
        /// <summary>
        /// >> distribute_holder
        /// </summary>
        public Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 DistributeHolder { get; set; }
        /// <summary>
        /// >> charged
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool Charged { get; set; }
        
        /// <inheritdoc/>
        public override string TypeName()
        {
            return "MerkleMetadata";
        }
        
        /// <inheritdoc/>
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(MerkleRoot.Encode());
            result.AddRange(Description.Encode());
            result.AddRange(DistributeCurrency.Encode());
            result.AddRange(DistributeAmount.Encode());
            result.AddRange(DistributeHolder.Encode());
            result.AddRange(Charged.Encode());
            return result.ToArray();
        }
        
        /// <inheritdoc/>
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            MerkleRoot = new Bifrost.NetApi.Generated.Model.primitive_types.H256();
            MerkleRoot.Decode(byteArray, ref p);
            Description = new Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT44();
            Description.Decode(byteArray, ref p);
            DistributeCurrency = new Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId();
            DistributeCurrency.Decode(byteArray, ref p);
            DistributeAmount = new Substrate.NetApi.Model.Types.Primitive.U128();
            DistributeAmount.Decode(byteArray, ref p);
            DistributeHolder = new Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32();
            DistributeHolder.Decode(byteArray, ref p);
            Charged = new Substrate.NetApi.Model.Types.Primitive.Bool();
            Charged.Decode(byteArray, ref p);
            var bytesLength = p - start;
            TypeSize = bytesLength;
            Bytes = new byte[bytesLength];
            global::System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
        }
    }
}
