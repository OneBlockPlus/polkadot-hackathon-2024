//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Attributes;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Metadata.V14;
using System.Collections.Generic;


namespace Bifrost.NetApi.Generated.Model.bifrost_farming.rewards
{
    
    
    /// <summary>
    /// >> 804 - Composite[bifrost_farming.rewards.PoolInfo]
    /// </summary>
    [SubstrateNodeType(TypeDefEnum.Composite)]
    public sealed class PoolInfo : BaseType
    {
        
        /// <summary>
        /// >> tokens_proportion
        /// </summary>
        public Bifrost.NetApi.Generated.Types.Base.BTreeMapT9 TokensProportion { get; set; }
        /// <summary>
        /// >> basic_token
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Bifrost.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill> BasicToken { get; set; }
        /// <summary>
        /// >> total_shares
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 TotalShares { get; set; }
        /// <summary>
        /// >> basic_rewards
        /// </summary>
        public Bifrost.NetApi.Generated.Types.Base.BTreeMapT5 BasicRewards { get; set; }
        /// <summary>
        /// >> rewards
        /// </summary>
        public Bifrost.NetApi.Generated.Types.Base.BTreeMapT10 Rewards { get; set; }
        /// <summary>
        /// >> state
        /// </summary>
        public Bifrost.NetApi.Generated.Model.bifrost_farming.rewards.EnumPoolState State { get; set; }
        /// <summary>
        /// >> keeper
        /// </summary>
        public Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 Keeper { get; set; }
        /// <summary>
        /// >> reward_issuer
        /// </summary>
        public Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 RewardIssuer { get; set; }
        /// <summary>
        /// >> gauge
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> Gauge { get; set; }
        /// <summary>
        /// >> block_startup
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> BlockStartup { get; set; }
        /// <summary>
        /// >> min_deposit_to_start
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinDepositToStart { get; set; }
        /// <summary>
        /// >> after_block_to_start
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 AfterBlockToStart { get; set; }
        /// <summary>
        /// >> withdraw_limit_time
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 WithdrawLimitTime { get; set; }
        /// <summary>
        /// >> claim_limit_time
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 ClaimLimitTime { get; set; }
        /// <summary>
        /// >> withdraw_limit_count
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U8 WithdrawLimitCount { get; set; }
        
        /// <inheritdoc/>
        public override string TypeName()
        {
            return "PoolInfo";
        }
        
        /// <inheritdoc/>
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(TokensProportion.Encode());
            result.AddRange(BasicToken.Encode());
            result.AddRange(TotalShares.Encode());
            result.AddRange(BasicRewards.Encode());
            result.AddRange(Rewards.Encode());
            result.AddRange(State.Encode());
            result.AddRange(Keeper.Encode());
            result.AddRange(RewardIssuer.Encode());
            result.AddRange(Gauge.Encode());
            result.AddRange(BlockStartup.Encode());
            result.AddRange(MinDepositToStart.Encode());
            result.AddRange(AfterBlockToStart.Encode());
            result.AddRange(WithdrawLimitTime.Encode());
            result.AddRange(ClaimLimitTime.Encode());
            result.AddRange(WithdrawLimitCount.Encode());
            return result.ToArray();
        }
        
        /// <inheritdoc/>
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            TokensProportion = new Bifrost.NetApi.Generated.Types.Base.BTreeMapT9();
            TokensProportion.Decode(byteArray, ref p);
            BasicToken = new Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Bifrost.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill>();
            BasicToken.Decode(byteArray, ref p);
            TotalShares = new Substrate.NetApi.Model.Types.Primitive.U128();
            TotalShares.Decode(byteArray, ref p);
            BasicRewards = new Bifrost.NetApi.Generated.Types.Base.BTreeMapT5();
            BasicRewards.Decode(byteArray, ref p);
            Rewards = new Bifrost.NetApi.Generated.Types.Base.BTreeMapT10();
            Rewards.Decode(byteArray, ref p);
            State = new Bifrost.NetApi.Generated.Model.bifrost_farming.rewards.EnumPoolState();
            State.Decode(byteArray, ref p);
            Keeper = new Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32();
            Keeper.Decode(byteArray, ref p);
            RewardIssuer = new Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32();
            RewardIssuer.Decode(byteArray, ref p);
            Gauge = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>();
            Gauge.Decode(byteArray, ref p);
            BlockStartup = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>();
            BlockStartup.Decode(byteArray, ref p);
            MinDepositToStart = new Substrate.NetApi.Model.Types.Primitive.U128();
            MinDepositToStart.Decode(byteArray, ref p);
            AfterBlockToStart = new Substrate.NetApi.Model.Types.Primitive.U32();
            AfterBlockToStart.Decode(byteArray, ref p);
            WithdrawLimitTime = new Substrate.NetApi.Model.Types.Primitive.U32();
            WithdrawLimitTime.Decode(byteArray, ref p);
            ClaimLimitTime = new Substrate.NetApi.Model.Types.Primitive.U32();
            ClaimLimitTime.Decode(byteArray, ref p);
            WithdrawLimitCount = new Substrate.NetApi.Model.Types.Primitive.U8();
            WithdrawLimitCount.Decode(byteArray, ref p);
            var bytesLength = p - start;
            TypeSize = bytesLength;
            Bytes = new byte[bytesLength];
            global::System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
        }
    }
}
