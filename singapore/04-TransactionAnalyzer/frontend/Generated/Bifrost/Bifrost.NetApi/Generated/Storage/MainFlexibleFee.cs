//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Bifrost.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> FlexibleFeeStorage
    /// </summary>
    public sealed class FlexibleFeeStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> FlexibleFeeStorage Constructor
        /// </summary>
        public FlexibleFeeStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("FlexibleFee", "UniversalFeeCurrencyOrderList"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT8)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("FlexibleFee", "UserDefaultFeeCurrency"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId)));
        }
        
        /// <summary>
        /// >> UniversalFeeCurrencyOrderListParams
        ///  Universal fee currency order list for all users
        /// </summary>
        public static string UniversalFeeCurrencyOrderListParams()
        {
            return RequestGenerator.GetStorage("FlexibleFee", "UniversalFeeCurrencyOrderList", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> UniversalFeeCurrencyOrderListDefault
        /// Default value as hex string
        /// </summary>
        public static string UniversalFeeCurrencyOrderListDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> UniversalFeeCurrencyOrderList
        ///  Universal fee currency order list for all users
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT8> UniversalFeeCurrencyOrderList(string blockhash, CancellationToken token)
        {
            string parameters = FlexibleFeeStorage.UniversalFeeCurrencyOrderListParams();
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT8>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UserDefaultFeeCurrencyParams
        ///  User default fee currency, if set, will be used as the first fee currency, and then use the
        ///  universal fee currency order list
        /// </summary>
        public static string UserDefaultFeeCurrencyParams(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("FlexibleFee", "UserDefaultFeeCurrency", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UserDefaultFeeCurrencyDefault
        /// Default value as hex string
        /// </summary>
        public static string UserDefaultFeeCurrencyDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> UserDefaultFeeCurrency
        ///  User default fee currency, if set, will be used as the first fee currency, and then use the
        ///  universal fee currency order list
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> UserDefaultFeeCurrency(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = FlexibleFeeStorage.UserDefaultFeeCurrencyParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> FlexibleFeeCalls
    /// </summary>
    public sealed class FlexibleFeeCalls
    {
        
        /// <summary>
        /// >> set_user_default_fee_currency
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetUserDefaultFeeCurrency(Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> maybe_fee_currency)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(maybe_fee_currency.Encode());
            return new Method(100, "FlexibleFee", 0, "set_user_default_fee_currency", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_universal_fee_currency_order_list
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetUniversalFeeCurrencyOrderList(Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT8 default_list)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(default_list.Encode());
            return new Method(100, "FlexibleFee", 1, "set_universal_fee_currency_order_list", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> FlexibleFeeConstants
    /// </summary>
    public sealed class FlexibleFeeConstants
    {
        
        /// <summary>
        /// >> TreasuryAccount
        /// </summary>
        public Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 TreasuryAccount()
        {
            var result = new Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32();
            result.Create("0x6D6F646C62662F74727372790000000000000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxFeeCurrencyOrderListLen
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxFeeCurrencyOrderListLen()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x32000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> FlexibleFeeErrors
    /// </summary>
    public enum FlexibleFeeErrors
    {
        
        /// <summary>
        /// >> NotEnoughBalance
        /// </summary>
        NotEnoughBalance,
        
        /// <summary>
        /// >> Overflow
        /// </summary>
        Overflow,
        
        /// <summary>
        /// >> ConversionError
        /// </summary>
        ConversionError,
        
        /// <summary>
        /// >> WrongListLength
        /// </summary>
        WrongListLength,
        
        /// <summary>
        /// >> WeightAndFeeNotExist
        /// </summary>
        WeightAndFeeNotExist,
        
        /// <summary>
        /// >> DexFailedToGetAmountInByPath
        /// </summary>
        DexFailedToGetAmountInByPath,
    }
}
