//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Bifrost.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> SlpStorage
    /// </summary>
    public sealed class SlpStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> SlpStorage Constructor
        /// </summary>
        public SlpStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slp", "OperateOrigins"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slp", "FeeSources"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation, Substrate.NetApi.Model.Types.Primitive.U128>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slp", "HostingFees"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_arithmetic.per_things.Permill, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slp", "DelegatorsIndex2Multilocation"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U16>), typeof(Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slp", "DelegatorsMultilocation2Index"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation>), typeof(Substrate.NetApi.Model.Types.Primitive.U16)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slp", "DelegatorNextIndex"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U16)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slp", "Validators"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT48)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slp", "ValidatorBoostList"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT49)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slp", "ValidatorsByDelegator"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation>), typeof(Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT48)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slp", "ValidatorsByDelegatorXcmUpdateQueue"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U64), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_slp.primitives.EnumValidatorsByDelegatorUpdateEntry, Substrate.NetApi.Model.Types.Primitive.U32>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slp", "DelegatorLedgers"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation>), typeof(Bifrost.NetApi.Generated.Model.bifrost_slp.primitives.EnumLedger)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slp", "DelegatorLedgerXcmUpdateQueue"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U64), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_slp.primitives.EnumLedgerUpdateEntry, Substrate.NetApi.Model.Types.Primitive.U32>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slp", "MinimumsAndMaximums"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Bifrost.NetApi.Generated.Model.bifrost_slp.primitives.MinimumsMaximums)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slp", "CurrencyDelays"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Bifrost.NetApi.Generated.Model.bifrost_slp.primitives.Delays)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slp", "DelegatorLatestTuneRecord"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation>), typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumTimeUnit)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slp", "CurrencyLatestTuneRecord"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumTimeUnit, Substrate.NetApi.Model.Types.Primitive.U32>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slp", "CurrencyTuneExchangeRateLimit"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Bifrost.NetApi.Generated.Model.sp_arithmetic.per_things.Permill>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slp", "DelegationsOccupied"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slp", "LastTimeUpdatedOngoingTimeUnit"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slp", "OngoingTimeUnitUpdateInterval"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slp", "SupplementFeeAccountWhitelist"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation, Bifrost.NetApi.Generated.Model.primitive_types.H256>>)));
        }
        
        /// <summary>
        /// >> OperateOriginsParams
        ///  One operate origin(can be a multisig account) for a currency. An operating origins are
        ///  normal account in Bifrost chain.
        /// </summary>
        public static string OperateOriginsParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("Slp", "OperateOrigins", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> OperateOriginsDefault
        /// Default value as hex string
        /// </summary>
        public static string OperateOriginsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> OperateOrigins
        ///  One operate origin(can be a multisig account) for a currency. An operating origins are
        ///  normal account in Bifrost chain.
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32> OperateOrigins(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = SlpStorage.OperateOriginsParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> FeeSourcesParams
        ///  Origins and Amounts for the staking operating account fee supplement. An operating account
        ///  is identified in MultiLocation format.
        /// </summary>
        public static string FeeSourcesParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("Slp", "FeeSources", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> FeeSourcesDefault
        /// Default value as hex string
        /// </summary>
        public static string FeeSourcesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> FeeSources
        ///  Origins and Amounts for the staking operating account fee supplement. An operating account
        ///  is identified in MultiLocation format.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation, Substrate.NetApi.Model.Types.Primitive.U128>> FeeSources(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = SlpStorage.FeeSourcesParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation, Substrate.NetApi.Model.Types.Primitive.U128>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> HostingFeesParams
        ///  Hosting fee percentage and beneficiary account for different chains
        /// </summary>
        public static string HostingFeesParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("Slp", "HostingFees", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> HostingFeesDefault
        /// Default value as hex string
        /// </summary>
        public static string HostingFeesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> HostingFees
        ///  Hosting fee percentage and beneficiary account for different chains
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_arithmetic.per_things.Permill, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation>> HostingFees(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = SlpStorage.HostingFeesParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_arithmetic.per_things.Permill, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DelegatorsIndex2MultilocationParams
        ///  Delegators in service. A delegator is identified in MultiLocation format.
        ///  Currency Id + Sub-account index => MultiLocation
        /// </summary>
        public static string DelegatorsIndex2MultilocationParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U16> key)
        {
            return RequestGenerator.GetStorage("Slp", "DelegatorsIndex2Multilocation", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> DelegatorsIndex2MultilocationDefault
        /// Default value as hex string
        /// </summary>
        public static string DelegatorsIndex2MultilocationDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> DelegatorsIndex2Multilocation
        ///  Delegators in service. A delegator is identified in MultiLocation format.
        ///  Currency Id + Sub-account index => MultiLocation
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation> DelegatorsIndex2Multilocation(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U16> key, string blockhash, CancellationToken token)
        {
            string parameters = SlpStorage.DelegatorsIndex2MultilocationParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DelegatorsMultilocation2IndexParams
        ///  Delegators in service. Currency Id + MultiLocation => Sub-account index
        /// </summary>
        public static string DelegatorsMultilocation2IndexParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation> key)
        {
            return RequestGenerator.GetStorage("Slp", "DelegatorsMultilocation2Index", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> DelegatorsMultilocation2IndexDefault
        /// Default value as hex string
        /// </summary>
        public static string DelegatorsMultilocation2IndexDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> DelegatorsMultilocation2Index
        ///  Delegators in service. Currency Id + MultiLocation => Sub-account index
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U16> DelegatorsMultilocation2Index(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation> key, string blockhash, CancellationToken token)
        {
            string parameters = SlpStorage.DelegatorsMultilocation2IndexParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U16>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DelegatorNextIndexParams
        ///  Next index of different currency delegators.
        /// </summary>
        public static string DelegatorNextIndexParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("Slp", "DelegatorNextIndex", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> DelegatorNextIndexDefault
        /// Default value as hex string
        /// </summary>
        public static string DelegatorNextIndexDefault()
        {
            return "0x0000";
        }
        
        /// <summary>
        /// >> DelegatorNextIndex
        ///  Next index of different currency delegators.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U16> DelegatorNextIndex(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = SlpStorage.DelegatorNextIndexParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U16>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ValidatorsParams
        ///  (VWL) Validator in service. A validator is identified in MultiLocation format.
        /// </summary>
        public static string ValidatorsParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("Slp", "Validators", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ValidatorsDefault
        /// Default value as hex string
        /// </summary>
        public static string ValidatorsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Validators
        ///  (VWL) Validator in service. A validator is identified in MultiLocation format.
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT48> Validators(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = SlpStorage.ValidatorsParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT48>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ValidatorBoostListParams
        ///  (VBL) Validator Boost List -> (validator multilocation, due block number)
        /// </summary>
        public static string ValidatorBoostListParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("Slp", "ValidatorBoostList", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ValidatorBoostListDefault
        /// Default value as hex string
        /// </summary>
        public static string ValidatorBoostListDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ValidatorBoostList
        ///  (VBL) Validator Boost List -> (validator multilocation, due block number)
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT49> ValidatorBoostList(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = SlpStorage.ValidatorBoostListParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT49>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ValidatorsByDelegatorParams
        ///  Validators for each delegator. CurrencyId + Delegator => Vec<Validator>
        /// </summary>
        public static string ValidatorsByDelegatorParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation> key)
        {
            return RequestGenerator.GetStorage("Slp", "ValidatorsByDelegator", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ValidatorsByDelegatorDefault
        /// Default value as hex string
        /// </summary>
        public static string ValidatorsByDelegatorDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ValidatorsByDelegator
        ///  Validators for each delegator. CurrencyId + Delegator => Vec<Validator>
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT48> ValidatorsByDelegator(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation> key, string blockhash, CancellationToken token)
        {
            string parameters = SlpStorage.ValidatorsByDelegatorParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT48>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ValidatorsByDelegatorXcmUpdateQueueParams
        /// </summary>
        public static string ValidatorsByDelegatorXcmUpdateQueueParams(Substrate.NetApi.Model.Types.Primitive.U64 key)
        {
            return RequestGenerator.GetStorage("Slp", "ValidatorsByDelegatorXcmUpdateQueue", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ValidatorsByDelegatorXcmUpdateQueueDefault
        /// Default value as hex string
        /// </summary>
        public static string ValidatorsByDelegatorXcmUpdateQueueDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ValidatorsByDelegatorXcmUpdateQueue
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_slp.primitives.EnumValidatorsByDelegatorUpdateEntry, Substrate.NetApi.Model.Types.Primitive.U32>> ValidatorsByDelegatorXcmUpdateQueue(Substrate.NetApi.Model.Types.Primitive.U64 key, string blockhash, CancellationToken token)
        {
            string parameters = SlpStorage.ValidatorsByDelegatorXcmUpdateQueueParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_slp.primitives.EnumValidatorsByDelegatorUpdateEntry, Substrate.NetApi.Model.Types.Primitive.U32>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DelegatorLedgersParams
        ///  Delegator ledgers. A delegator is identified in MultiLocation format.
        /// </summary>
        public static string DelegatorLedgersParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation> key)
        {
            return RequestGenerator.GetStorage("Slp", "DelegatorLedgers", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> DelegatorLedgersDefault
        /// Default value as hex string
        /// </summary>
        public static string DelegatorLedgersDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> DelegatorLedgers
        ///  Delegator ledgers. A delegator is identified in MultiLocation format.
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bifrost_slp.primitives.EnumLedger> DelegatorLedgers(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation> key, string blockhash, CancellationToken token)
        {
            string parameters = SlpStorage.DelegatorLedgersParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bifrost_slp.primitives.EnumLedger>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DelegatorLedgerXcmUpdateQueueParams
        /// </summary>
        public static string DelegatorLedgerXcmUpdateQueueParams(Substrate.NetApi.Model.Types.Primitive.U64 key)
        {
            return RequestGenerator.GetStorage("Slp", "DelegatorLedgerXcmUpdateQueue", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> DelegatorLedgerXcmUpdateQueueDefault
        /// Default value as hex string
        /// </summary>
        public static string DelegatorLedgerXcmUpdateQueueDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> DelegatorLedgerXcmUpdateQueue
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_slp.primitives.EnumLedgerUpdateEntry, Substrate.NetApi.Model.Types.Primitive.U32>> DelegatorLedgerXcmUpdateQueue(Substrate.NetApi.Model.Types.Primitive.U64 key, string blockhash, CancellationToken token)
        {
            string parameters = SlpStorage.DelegatorLedgerXcmUpdateQueueParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_slp.primitives.EnumLedgerUpdateEntry, Substrate.NetApi.Model.Types.Primitive.U32>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MinimumsAndMaximumsParams
        ///  Minimum and Maximum constraints for different chains.
        /// </summary>
        public static string MinimumsAndMaximumsParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("Slp", "MinimumsAndMaximums", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MinimumsAndMaximumsDefault
        /// Default value as hex string
        /// </summary>
        public static string MinimumsAndMaximumsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MinimumsAndMaximums
        ///  Minimum and Maximum constraints for different chains.
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bifrost_slp.primitives.MinimumsMaximums> MinimumsAndMaximums(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = SlpStorage.MinimumsAndMaximumsParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bifrost_slp.primitives.MinimumsMaximums>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CurrencyDelaysParams
        ///  TimeUnit delay params for different chains.
        /// </summary>
        public static string CurrencyDelaysParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("Slp", "CurrencyDelays", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CurrencyDelaysDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrencyDelaysDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CurrencyDelays
        ///  TimeUnit delay params for different chains.
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bifrost_slp.primitives.Delays> CurrencyDelays(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = SlpStorage.CurrencyDelaysParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bifrost_slp.primitives.Delays>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DelegatorLatestTuneRecordParams
        ///  A delegator's tuning record of exchange rate for the current time unit.
        ///  Currency Id + Delegator Id => latest tuned TimeUnit
        /// </summary>
        public static string DelegatorLatestTuneRecordParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation> key)
        {
            return RequestGenerator.GetStorage("Slp", "DelegatorLatestTuneRecord", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> DelegatorLatestTuneRecordDefault
        /// Default value as hex string
        /// </summary>
        public static string DelegatorLatestTuneRecordDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> DelegatorLatestTuneRecord
        ///  A delegator's tuning record of exchange rate for the current time unit.
        ///  Currency Id + Delegator Id => latest tuned TimeUnit
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumTimeUnit> DelegatorLatestTuneRecord(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation> key, string blockhash, CancellationToken token)
        {
            string parameters = SlpStorage.DelegatorLatestTuneRecordParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumTimeUnit>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CurrencyLatestTuneRecordParams
        ///  Currency's tuning record of exchange rate for the current time unit.
        ///  Currency Id => (latest tuned TimeUnit, number of tuning times)
        /// </summary>
        public static string CurrencyLatestTuneRecordParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("Slp", "CurrencyLatestTuneRecord", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CurrencyLatestTuneRecordDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrencyLatestTuneRecordDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CurrencyLatestTuneRecord
        ///  Currency's tuning record of exchange rate for the current time unit.
        ///  Currency Id => (latest tuned TimeUnit, number of tuning times)
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumTimeUnit, Substrate.NetApi.Model.Types.Primitive.U32>> CurrencyLatestTuneRecord(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = SlpStorage.CurrencyLatestTuneRecordParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumTimeUnit, Substrate.NetApi.Model.Types.Primitive.U32>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CurrencyTuneExchangeRateLimitParams
        ///  For each currencyId: how many times that a Currency's all delegators can tune the exchange
        ///  rate for a single time unit, and how much at most each time can tune the
        ///  exchange rate
        /// </summary>
        public static string CurrencyTuneExchangeRateLimitParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("Slp", "CurrencyTuneExchangeRateLimit", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CurrencyTuneExchangeRateLimitDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrencyTuneExchangeRateLimitDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CurrencyTuneExchangeRateLimit
        ///  For each currencyId: how many times that a Currency's all delegators can tune the exchange
        ///  rate for a single time unit, and how much at most each time can tune the
        ///  exchange rate
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Bifrost.NetApi.Generated.Model.sp_arithmetic.per_things.Permill>> CurrencyTuneExchangeRateLimit(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = SlpStorage.CurrencyTuneExchangeRateLimitParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Bifrost.NetApi.Generated.Model.sp_arithmetic.per_things.Permill>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DelegationsOccupiedParams
        ///  reflect if all delegations are on a decrease/revoke status. If yes, then new user redeeming
        ///  is unaccepted.
        /// </summary>
        public static string DelegationsOccupiedParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("Slp", "DelegationsOccupied", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> DelegationsOccupiedDefault
        /// Default value as hex string
        /// </summary>
        public static string DelegationsOccupiedDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> DelegationsOccupied
        ///  reflect if all delegations are on a decrease/revoke status. If yes, then new user redeeming
        ///  is unaccepted.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> DelegationsOccupied(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = SlpStorage.DelegationsOccupiedParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LastTimeUpdatedOngoingTimeUnitParams
        /// </summary>
        public static string LastTimeUpdatedOngoingTimeUnitParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("Slp", "LastTimeUpdatedOngoingTimeUnit", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> LastTimeUpdatedOngoingTimeUnitDefault
        /// Default value as hex string
        /// </summary>
        public static string LastTimeUpdatedOngoingTimeUnitDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> LastTimeUpdatedOngoingTimeUnit
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> LastTimeUpdatedOngoingTimeUnit(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = SlpStorage.LastTimeUpdatedOngoingTimeUnitParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OngoingTimeUnitUpdateIntervalParams
        /// </summary>
        public static string OngoingTimeUnitUpdateIntervalParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("Slp", "OngoingTimeUnitUpdateInterval", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> OngoingTimeUnitUpdateIntervalDefault
        /// Default value as hex string
        /// </summary>
        public static string OngoingTimeUnitUpdateIntervalDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> OngoingTimeUnitUpdateInterval
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> OngoingTimeUnitUpdateInterval(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = SlpStorage.OngoingTimeUnitUpdateIntervalParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SupplementFeeAccountWhitelistParams
        /// </summary>
        public static string SupplementFeeAccountWhitelistParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("Slp", "SupplementFeeAccountWhitelist", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SupplementFeeAccountWhitelistDefault
        /// Default value as hex string
        /// </summary>
        public static string SupplementFeeAccountWhitelistDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SupplementFeeAccountWhitelist
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation, Bifrost.NetApi.Generated.Model.primitive_types.H256>>> SupplementFeeAccountWhitelist(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = SlpStorage.SupplementFeeAccountWhitelistParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation, Bifrost.NetApi.Generated.Model.primitive_types.H256>>>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> SlpCalls
    /// </summary>
    public sealed class SlpCalls
    {
        
        /// <summary>
        /// >> initialize_delegator
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method InitializeDelegator(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation> delegator_location)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(delegator_location.Encode());
            return new Method(116, "Slp", 0, "initialize_delegator", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> bond
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Bond(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation who, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount, Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation> validator, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_weights.weight_v2.Weight, Substrate.NetApi.Model.Types.Primitive.U128>> weight_and_fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(validator.Encode());
            byteArray.AddRange(weight_and_fee.Encode());
            return new Method(116, "Slp", 1, "bond", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> bond_extra
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method BondExtra(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation who, Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation> validator, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_weights.weight_v2.Weight, Substrate.NetApi.Model.Types.Primitive.U128>> weight_and_fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(validator.Encode());
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(weight_and_fee.Encode());
            return new Method(116, "Slp", 2, "bond_extra", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unbond
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Unbond(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation who, Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation> validator, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_weights.weight_v2.Weight, Substrate.NetApi.Model.Types.Primitive.U128>> weight_and_fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(validator.Encode());
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(weight_and_fee.Encode());
            return new Method(116, "Slp", 3, "unbond", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unbond_all
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UnbondAll(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation who, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_weights.weight_v2.Weight, Substrate.NetApi.Model.Types.Primitive.U128>> weight_and_fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(weight_and_fee.Encode());
            return new Method(116, "Slp", 4, "unbond_all", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> rebond
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Rebond(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation who, Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation> validator, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> amount, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_weights.weight_v2.Weight, Substrate.NetApi.Model.Types.Primitive.U128>> weight_and_fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(validator.Encode());
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(weight_and_fee.Encode());
            return new Method(116, "Slp", 5, "rebond", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> delegate
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Delegate(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation who, Substrate.NetApi.Model.Types.Base.BaseVec<Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation> targets, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_weights.weight_v2.Weight, Substrate.NetApi.Model.Types.Primitive.U128>> weight_and_fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(targets.Encode());
            byteArray.AddRange(weight_and_fee.Encode());
            return new Method(116, "Slp", 6, "delegate", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> undelegate
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Undelegate(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation who, Substrate.NetApi.Model.Types.Base.BaseVec<Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation> targets, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_weights.weight_v2.Weight, Substrate.NetApi.Model.Types.Primitive.U128>> weight_and_fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(targets.Encode());
            byteArray.AddRange(weight_and_fee.Encode());
            return new Method(116, "Slp", 7, "undelegate", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> redelegate
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Redelegate(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation who, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseVec<Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation>> targets, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_weights.weight_v2.Weight, Substrate.NetApi.Model.Types.Primitive.U128>> weight_and_fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(targets.Encode());
            byteArray.AddRange(weight_and_fee.Encode());
            return new Method(116, "Slp", 8, "redelegate", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> payout
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Payout(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation who, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation validator, Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumTimeUnit> when, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_weights.weight_v2.Weight, Substrate.NetApi.Model.Types.Primitive.U128>> weight_and_fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(validator.Encode());
            byteArray.AddRange(when.Encode());
            byteArray.AddRange(weight_and_fee.Encode());
            return new Method(116, "Slp", 9, "payout", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> liquidize
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Liquidize(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation who, Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumTimeUnit> when, Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation> validator, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> amount, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_weights.weight_v2.Weight, Substrate.NetApi.Model.Types.Primitive.U128>> weight_and_fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(when.Encode());
            byteArray.AddRange(validator.Encode());
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(weight_and_fee.Encode());
            return new Method(116, "Slp", 10, "liquidize", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> chill
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Chill(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation who, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_weights.weight_v2.Weight, Substrate.NetApi.Model.Types.Primitive.U128>> weight_and_fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(weight_and_fee.Encode());
            return new Method(116, "Slp", 11, "chill", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> transfer_back
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method TransferBack(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation from, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation to, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_weights.weight_v2.Weight, Substrate.NetApi.Model.Types.Primitive.U128>> weight_and_fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(from.Encode());
            byteArray.AddRange(to.Encode());
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(weight_and_fee.Encode());
            return new Method(116, "Slp", 12, "transfer_back", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> transfer_to
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method TransferTo(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation from, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation to, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(from.Encode());
            byteArray.AddRange(to.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(116, "Slp", 13, "transfer_to", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> convert_asset
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ConvertAsset(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation who, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount, Substrate.NetApi.Model.Types.Primitive.Bool if_from_currency, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_weights.weight_v2.Weight, Substrate.NetApi.Model.Types.Primitive.U128>> weight_and_fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(if_from_currency.Encode());
            byteArray.AddRange(weight_and_fee.Encode());
            return new Method(116, "Slp", 14, "convert_asset", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> increase_token_pool
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method IncreaseTokenPool(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(116, "Slp", 15, "increase_token_pool", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> decrease_token_pool
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method DecreaseTokenPool(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(116, "Slp", 16, "decrease_token_pool", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_ongoing_time_unit
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateOngoingTimeUnit(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumTimeUnit time_unit)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(time_unit.Encode());
            return new Method(116, "Slp", 17, "update_ongoing_time_unit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> refund_currency_due_unbond
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RefundCurrencyDueUnbond(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            return new Method(116, "Slp", 18, "refund_currency_due_unbond", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> supplement_fee_reserve
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SupplementFeeReserve(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation dest)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(dest.Encode());
            return new Method(116, "Slp", 19, "supplement_fee_reserve", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> charge_host_fee_and_tune_vtoken_exchange_rate
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ChargeHostFeeAndTuneVtokenExchangeRate(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> value, Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation> who)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(value.Encode());
            byteArray.AddRange(who.Encode());
            return new Method(116, "Slp", 20, "charge_host_fee_and_tune_vtoken_exchange_rate", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_operate_origin
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetOperateOrigin(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32> who)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(who.Encode());
            return new Method(116, "Slp", 22, "set_operate_origin", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_fee_source
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetFeeSource(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation, Substrate.NetApi.Model.Types.Primitive.U128>> who_and_fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(who_and_fee.Encode());
            return new Method(116, "Slp", 23, "set_fee_source", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_delegator
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddDelegator(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U16> index, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation who)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(index.Encode());
            byteArray.AddRange(who.Encode());
            return new Method(116, "Slp", 24, "add_delegator", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_delegator
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveDelegator(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation who)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(who.Encode());
            return new Method(116, "Slp", 25, "remove_delegator", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_validator
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddValidator(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation who)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(who.Encode());
            return new Method(116, "Slp", 26, "add_validator", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_validator
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveValidator(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation who)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(who.Encode());
            return new Method(116, "Slp", 27, "remove_validator", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_validators_by_delegator
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetValidatorsByDelegator(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation who, Substrate.NetApi.Model.Types.Base.BaseVec<Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation> validators)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(validators.Encode());
            return new Method(116, "Slp", 28, "set_validators_by_delegator", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_delegator_ledger
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetDelegatorLedger(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation who, Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.bifrost_slp.primitives.EnumLedger> ledger)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(ledger.Encode());
            return new Method(116, "Slp", 29, "set_delegator_ledger", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_minimums_and_maximums
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetMinimumsAndMaximums(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.bifrost_slp.primitives.MinimumsMaximums> constraints)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(constraints.Encode());
            return new Method(116, "Slp", 30, "set_minimums_and_maximums", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_currency_delays
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetCurrencyDelays(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.bifrost_slp.primitives.Delays> maybe_delays)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(maybe_delays.Encode());
            return new Method(116, "Slp", 31, "set_currency_delays", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_hosting_fees
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetHostingFees(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_arithmetic.per_things.Permill, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation>> maybe_fee_set)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(maybe_fee_set.Encode());
            return new Method(116, "Slp", 32, "set_hosting_fees", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_currency_tune_exchange_rate_limit
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetCurrencyTuneExchangeRateLimit(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Bifrost.NetApi.Generated.Model.sp_arithmetic.per_things.Permill>> maybe_tune_exchange_rate_limit)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(maybe_tune_exchange_rate_limit.Encode());
            return new Method(116, "Slp", 33, "set_currency_tune_exchange_rate_limit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_ongoing_time_unit_update_interval
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetOngoingTimeUnitUpdateInterval(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> maybe_interval)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(maybe_interval.Encode());
            return new Method(116, "Slp", 34, "set_ongoing_time_unit_update_interval", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_supplement_fee_account_to_whitelist
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddSupplementFeeAccountToWhitelist(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation who)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(who.Encode());
            return new Method(116, "Slp", 35, "add_supplement_fee_account_to_whitelist", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_supplement_fee_account_from_whitelist
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveSupplementFeeAccountFromWhitelist(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation who)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(who.Encode());
            return new Method(116, "Slp", 36, "remove_supplement_fee_account_from_whitelist", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> confirm_delegator_ledger_query_response
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ConfirmDelegatorLedgerQueryResponse(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U64> query_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(query_id.Encode());
            return new Method(116, "Slp", 37, "confirm_delegator_ledger_query_response", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> fail_delegator_ledger_query_response
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method FailDelegatorLedgerQueryResponse(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U64> query_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(query_id.Encode());
            return new Method(116, "Slp", 38, "fail_delegator_ledger_query_response", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> confirm_validators_by_delegator_query_response
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ConfirmValidatorsByDelegatorQueryResponse(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U64> query_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(query_id.Encode());
            return new Method(116, "Slp", 39, "confirm_validators_by_delegator_query_response", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> fail_validators_by_delegator_query_response
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method FailValidatorsByDelegatorQueryResponse(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U64> query_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(query_id.Encode());
            return new Method(116, "Slp", 40, "fail_validators_by_delegator_query_response", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> confirm_delegator_ledger
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ConfirmDelegatorLedger(Substrate.NetApi.Model.Types.Primitive.U64 query_id, Bifrost.NetApi.Generated.Model.xcm.v3.EnumResponse response)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(query_id.Encode());
            byteArray.AddRange(response.Encode());
            return new Method(116, "Slp", 41, "confirm_delegator_ledger", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> confirm_validators_by_delegator
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ConfirmValidatorsByDelegator(Substrate.NetApi.Model.Types.Primitive.U64 query_id, Bifrost.NetApi.Generated.Model.xcm.v3.EnumResponse response)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(query_id.Encode());
            byteArray.AddRange(response.Encode());
            return new Method(116, "Slp", 42, "confirm_validators_by_delegator", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> reset_validators
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ResetValidators(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Base.BaseVec<Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation> validator_list)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(validator_list.Encode());
            return new Method(116, "Slp", 43, "reset_validators", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_validator_boost_list
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetValidatorBoostList(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Base.BaseVec<Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation> validator_list)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(validator_list.Encode());
            return new Method(116, "Slp", 44, "set_validator_boost_list", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_to_validator_boost_list
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddToValidatorBoostList(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation who)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(who.Encode());
            return new Method(116, "Slp", 45, "add_to_validator_boost_list", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_from_validator_boot_list
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveFromValidatorBootList(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Bifrost.NetApi.Generated.Model.staging_xcm.v3.multilocation.MultiLocation who)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(who.Encode());
            return new Method(116, "Slp", 46, "remove_from_validator_boot_list", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> convert_treasury_vtoken
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ConvertTreasuryVtoken(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId vtoken, Substrate.NetApi.Model.Types.Primitive.U128 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(vtoken.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(116, "Slp", 47, "convert_treasury_vtoken", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> clean_outdated_validator_boost_list
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CleanOutdatedValidatorBoostList(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId token, Substrate.NetApi.Model.Types.Primitive.U8 page)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(token.Encode());
            byteArray.AddRange(page.Encode());
            return new Method(116, "Slp", 48, "clean_outdated_validator_boost_list", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> SlpConstants
    /// </summary>
    public sealed class SlpConstants
    {
        
        /// <summary>
        /// >> MaxTypeEntryPerBlock
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxTypeEntryPerBlock()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x0A000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxRefundPerBlock
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxRefundPerBlock()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x0A000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxLengthLimit
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxLengthLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xF4010000");
            return result;
        }
        
        /// <summary>
        /// >> TreasuryAccount
        /// </summary>
        public Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 TreasuryAccount()
        {
            var result = new Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32();
            result.Create("0x6D6F646C62662F74727372790000000000000000000000000000000000000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> SlpErrors
    /// </summary>
    public enum SlpErrors
    {
        
        /// <summary>
        /// >> OperateOriginNotSet
        /// </summary>
        OperateOriginNotSet,
        
        /// <summary>
        /// >> NotAuthorized
        /// </summary>
        NotAuthorized,
        
        /// <summary>
        /// >> NotSupportedCurrencyId
        /// </summary>
        NotSupportedCurrencyId,
        
        /// <summary>
        /// >> FailToAddDelegator
        /// </summary>
        FailToAddDelegator,
        
        /// <summary>
        /// >> OverFlow
        /// </summary>
        OverFlow,
        
        /// <summary>
        /// >> UnderFlow
        /// </summary>
        UnderFlow,
        
        /// <summary>
        /// >> NotExist
        /// </summary>
        NotExist,
        
        /// <summary>
        /// >> LowerThanMinimum
        /// </summary>
        LowerThanMinimum,
        
        /// <summary>
        /// >> GreaterThanMaximum
        /// </summary>
        GreaterThanMaximum,
        
        /// <summary>
        /// >> AlreadyBonded
        /// </summary>
        AlreadyBonded,
        
        /// <summary>
        /// >> AccountNotExist
        /// </summary>
        AccountNotExist,
        
        /// <summary>
        /// >> DelegatorNotExist
        /// </summary>
        DelegatorNotExist,
        
        /// <summary>
        /// >> XcmFailure
        /// </summary>
        XcmFailure,
        
        /// <summary>
        /// >> DelegatorNotBonded
        /// </summary>
        DelegatorNotBonded,
        
        /// <summary>
        /// >> ExceedActiveMaximum
        /// </summary>
        ExceedActiveMaximum,
        
        /// <summary>
        /// >> ProblematicLedger
        /// </summary>
        ProblematicLedger,
        
        /// <summary>
        /// >> NotEnoughToUnbond
        /// </summary>
        NotEnoughToUnbond,
        
        /// <summary>
        /// >> ExceedUnlockingRecords
        /// </summary>
        ExceedUnlockingRecords,
        
        /// <summary>
        /// >> RebondExceedUnlockingAmount
        /// </summary>
        RebondExceedUnlockingAmount,
        
        /// <summary>
        /// >> DecodingError
        /// </summary>
        DecodingError,
        
        /// <summary>
        /// >> EncodingError
        /// </summary>
        EncodingError,
        
        /// <summary>
        /// >> VectorEmpty
        /// </summary>
        VectorEmpty,
        
        /// <summary>
        /// >> ValidatorSetNotExist
        /// </summary>
        ValidatorSetNotExist,
        
        /// <summary>
        /// >> ValidatorNotExist
        /// </summary>
        ValidatorNotExist,
        
        /// <summary>
        /// >> InvalidTimeUnit
        /// </summary>
        InvalidTimeUnit,
        
        /// <summary>
        /// >> AmountZero
        /// </summary>
        AmountZero,
        
        /// <summary>
        /// >> AmountNotZero
        /// </summary>
        AmountNotZero,
        
        /// <summary>
        /// >> AlreadyExist
        /// </summary>
        AlreadyExist,
        
        /// <summary>
        /// >> ValidatorStillInUse
        /// </summary>
        ValidatorStillInUse,
        
        /// <summary>
        /// >> TimeUnitNotExist
        /// </summary>
        TimeUnitNotExist,
        
        /// <summary>
        /// >> FeeSourceNotExist
        /// </summary>
        FeeSourceNotExist,
        
        /// <summary>
        /// >> WeightAndFeeNotExists
        /// </summary>
        WeightAndFeeNotExists,
        
        /// <summary>
        /// >> MinimumsAndMaximumsNotExist
        /// </summary>
        MinimumsAndMaximumsNotExist,
        
        /// <summary>
        /// >> QueryNotExist
        /// </summary>
        QueryNotExist,
        
        /// <summary>
        /// >> DelaysNotExist
        /// </summary>
        DelaysNotExist,
        
        /// <summary>
        /// >> Unexpected
        /// </summary>
        Unexpected,
        
        /// <summary>
        /// >> QueryResponseRemoveError
        /// </summary>
        QueryResponseRemoveError,
        
        /// <summary>
        /// >> InvalidHostingFee
        /// </summary>
        InvalidHostingFee,
        
        /// <summary>
        /// >> InvalidAccount
        /// </summary>
        InvalidAccount,
        
        /// <summary>
        /// >> IncreaseTokenPoolError
        /// </summary>
        IncreaseTokenPoolError,
        
        /// <summary>
        /// >> TuneExchangeRateLimitNotSet
        /// </summary>
        TuneExchangeRateLimitNotSet,
        
        /// <summary>
        /// >> CurrencyLatestTuneRecordNotExist
        /// </summary>
        CurrencyLatestTuneRecordNotExist,
        
        /// <summary>
        /// >> InvalidTransferSource
        /// </summary>
        InvalidTransferSource,
        
        /// <summary>
        /// >> ValidatorNotProvided
        /// </summary>
        ValidatorNotProvided,
        
        /// <summary>
        /// >> Unsupported
        /// </summary>
        Unsupported,
        
        /// <summary>
        /// >> ValidatorNotBonded
        /// </summary>
        ValidatorNotBonded,
        
        /// <summary>
        /// >> AlreadyRequested
        /// </summary>
        AlreadyRequested,
        
        /// <summary>
        /// >> RequestNotExist
        /// </summary>
        RequestNotExist,
        
        /// <summary>
        /// >> AlreadyLeaving
        /// </summary>
        AlreadyLeaving,
        
        /// <summary>
        /// >> DelegatorNotLeaving
        /// </summary>
        DelegatorNotLeaving,
        
        /// <summary>
        /// >> RequestNotDue
        /// </summary>
        RequestNotDue,
        
        /// <summary>
        /// >> LeavingNotDue
        /// </summary>
        LeavingNotDue,
        
        /// <summary>
        /// >> DelegatorSetNotExist
        /// </summary>
        DelegatorSetNotExist,
        
        /// <summary>
        /// >> DelegatorLeaving
        /// </summary>
        DelegatorLeaving,
        
        /// <summary>
        /// >> DelegatorAlreadyLeaving
        /// </summary>
        DelegatorAlreadyLeaving,
        
        /// <summary>
        /// >> ValidatorError
        /// </summary>
        ValidatorError,
        
        /// <summary>
        /// >> AmountNone
        /// </summary>
        AmountNone,
        
        /// <summary>
        /// >> InvalidDelays
        /// </summary>
        InvalidDelays,
        
        /// <summary>
        /// >> OngoingTimeUnitUpdateIntervalNotExist
        /// </summary>
        OngoingTimeUnitUpdateIntervalNotExist,
        
        /// <summary>
        /// >> LastTimeUpdatedOngoingTimeUnitNotExist
        /// </summary>
        LastTimeUpdatedOngoingTimeUnitNotExist,
        
        /// <summary>
        /// >> TooFrequent
        /// </summary>
        TooFrequent,
        
        /// <summary>
        /// >> DestAccountNotValid
        /// </summary>
        DestAccountNotValid,
        
        /// <summary>
        /// >> WhiteListNotExist
        /// </summary>
        WhiteListNotExist,
        
        /// <summary>
        /// >> DelegatorAlreadyTuned
        /// </summary>
        DelegatorAlreadyTuned,
        
        /// <summary>
        /// >> FeeTooHigh
        /// </summary>
        FeeTooHigh,
        
        /// <summary>
        /// >> NotEnoughBalance
        /// </summary>
        NotEnoughBalance,
        
        /// <summary>
        /// >> VectorTooLong
        /// </summary>
        VectorTooLong,
        
        /// <summary>
        /// >> MultiCurrencyError
        /// </summary>
        MultiCurrencyError,
        
        /// <summary>
        /// >> NotDelegateValidator
        /// </summary>
        NotDelegateValidator,
        
        /// <summary>
        /// >> DividedByZero
        /// </summary>
        DividedByZero,
        
        /// <summary>
        /// >> SharePriceNotValid
        /// </summary>
        SharePriceNotValid,
        
        /// <summary>
        /// >> InvalidAmount
        /// </summary>
        InvalidAmount,
        
        /// <summary>
        /// >> ValidatorMultilocationNotvalid
        /// </summary>
        ValidatorMultilocationNotvalid,
        
        /// <summary>
        /// >> AmountNotProvided
        /// </summary>
        AmountNotProvided,
        
        /// <summary>
        /// >> FailToConvert
        /// </summary>
        FailToConvert,
        
        /// <summary>
        /// >> ExceedMaxLengthLimit
        /// </summary>
        ExceedMaxLengthLimit,
        
        /// <summary>
        /// >> TransferToError
        /// Transfer to failed
        /// </summary>
        TransferToError,
        
        /// <summary>
        /// >> StablePoolNotFound
        /// </summary>
        StablePoolNotFound,
        
        /// <summary>
        /// >> StablePoolTokenIndexNotFound
        /// </summary>
        StablePoolTokenIndexNotFound,
        
        /// <summary>
        /// >> ExceedLimit
        /// </summary>
        ExceedLimit,
        
        /// <summary>
        /// >> InvalidPageNumber
        /// </summary>
        InvalidPageNumber,
        
        /// <summary>
        /// >> NoMoreValidatorBoostListForCurrency
        /// </summary>
        NoMoreValidatorBoostListForCurrency,
    }
}
