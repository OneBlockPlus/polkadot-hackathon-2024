//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Bifrost.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> MerkleDistributorStorage
    /// </summary>
    public sealed class MerkleDistributorStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> MerkleDistributorStorage Constructor
        /// </summary>
        public MerkleDistributorStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MerkleDistributor", "MerkleDistributorMetadata"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Bifrost.NetApi.Generated.Model.merkle_distributor.MerkleMetadata)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MerkleDistributor", "NextMerkleDistributorId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MerkleDistributor", "ClaimedBitMap"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MerkleDistributor", "CreateWhiteSet"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Bifrost.NetApi.Generated.Types.Base.BTreeSetT3)));
        }
        
        /// <summary>
        /// >> MerkleDistributorMetadataParams
        /// </summary>
        public static string MerkleDistributorMetadataParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("MerkleDistributor", "MerkleDistributorMetadata", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MerkleDistributorMetadataDefault
        /// Default value as hex string
        /// </summary>
        public static string MerkleDistributorMetadataDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MerkleDistributorMetadata
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.merkle_distributor.MerkleMetadata> MerkleDistributorMetadata(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = MerkleDistributorStorage.MerkleDistributorMetadataParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.merkle_distributor.MerkleMetadata>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NextMerkleDistributorIdParams
        /// </summary>
        public static string NextMerkleDistributorIdParams()
        {
            return RequestGenerator.GetStorage("MerkleDistributor", "NextMerkleDistributorId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextMerkleDistributorIdDefault
        /// Default value as hex string
        /// </summary>
        public static string NextMerkleDistributorIdDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> NextMerkleDistributorId
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> NextMerkleDistributorId(string blockhash, CancellationToken token)
        {
            string parameters = MerkleDistributorStorage.NextMerkleDistributorIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ClaimedBitMapParams
        /// </summary>
        public static string ClaimedBitMapParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("MerkleDistributor", "ClaimedBitMap", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ClaimedBitMapDefault
        /// Default value as hex string
        /// </summary>
        public static string ClaimedBitMapDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> ClaimedBitMap
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> ClaimedBitMap(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> key, string blockhash, CancellationToken token)
        {
            string parameters = MerkleDistributorStorage.ClaimedBitMapParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CreateWhiteSetParams
        ///  Accounts in the whitelist can create merkle distributor.
        /// </summary>
        public static string CreateWhiteSetParams()
        {
            return RequestGenerator.GetStorage("MerkleDistributor", "CreateWhiteSet", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CreateWhiteSetDefault
        /// Default value as hex string
        /// </summary>
        public static string CreateWhiteSetDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CreateWhiteSet
        ///  Accounts in the whitelist can create merkle distributor.
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Types.Base.BTreeSetT3> CreateWhiteSet(string blockhash, CancellationToken token)
        {
            string parameters = MerkleDistributorStorage.CreateWhiteSetParams();
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Types.Base.BTreeSetT3>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> MerkleDistributorCalls
    /// </summary>
    public sealed class MerkleDistributorCalls
    {
        
        /// <summary>
        /// >> add_to_create_whitelist
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddToCreateWhitelist(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 account)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(account.Encode());
            return new Method(81, "MerkleDistributor", 0, "add_to_create_whitelist", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_from_create_whitelist
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveFromCreateWhitelist(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 account)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(account.Encode());
            return new Method(81, "MerkleDistributor", 1, "remove_from_create_whitelist", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> create_merkle_distributor
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CreateMerkleDistributor(Bifrost.NetApi.Generated.Model.primitive_types.H256 merkle_root, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> description, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId distribute_currency, Substrate.NetApi.Model.Types.Primitive.U128 distribute_amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(merkle_root.Encode());
            byteArray.AddRange(description.Encode());
            byteArray.AddRange(distribute_currency.Encode());
            byteArray.AddRange(distribute_amount.Encode());
            return new Method(81, "MerkleDistributor", 2, "create_merkle_distributor", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Claim(Substrate.NetApi.Model.Types.Primitive.U32 merkle_distributor_id, Substrate.NetApi.Model.Types.Primitive.U32 index, Bifrost.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress account, Substrate.NetApi.Model.Types.Primitive.U128 amount, Substrate.NetApi.Model.Types.Base.BaseVec<Bifrost.NetApi.Generated.Model.primitive_types.H256> merkle_proof)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(merkle_distributor_id.Encode());
            byteArray.AddRange(index.Encode());
            byteArray.AddRange(account.Encode());
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(merkle_proof.Encode());
            return new Method(81, "MerkleDistributor", 3, "claim", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> charge
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Charge(Substrate.NetApi.Model.Types.Primitive.U32 merkle_distributor_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(merkle_distributor_id.Encode());
            return new Method(81, "MerkleDistributor", 4, "charge", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> emergency_withdraw
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method EmergencyWithdraw(Substrate.NetApi.Model.Types.Primitive.U32 merkle_distributor_id, Bifrost.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress recipient, Substrate.NetApi.Model.Types.Primitive.U128 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(merkle_distributor_id.Encode());
            byteArray.AddRange(recipient.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(81, "MerkleDistributor", 5, "emergency_withdraw", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> MerkleDistributorConstants
    /// </summary>
    public sealed class MerkleDistributorConstants
    {
        
        /// <summary>
        /// >> PalletId
        /// </summary>
        public Bifrost.NetApi.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new Bifrost.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x62662F6D6B6C6473");
            return result;
        }
        
        /// <summary>
        /// >> StringLimit
        ///  The maximum length of a merkel description stored on-chain.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 StringLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x32000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> MerkleDistributorErrors
    /// </summary>
    public enum MerkleDistributorErrors
    {
        
        /// <summary>
        /// >> BadDescription
        /// Invalid metadata given.
        /// </summary>
        BadDescription,
        
        /// <summary>
        /// >> InvalidMerkleDistributorId
        /// The id is not exist.
        /// </summary>
        InvalidMerkleDistributorId,
        
        /// <summary>
        /// >> MerkleVerifyFailed
        /// The proof is invalid
        /// </summary>
        MerkleVerifyFailed,
        
        /// <summary>
        /// >> Claimed
        /// The reward is already distributed.
        /// </summary>
        Claimed,
        
        /// <summary>
        /// >> Charged
        /// The reward is already charged.
        /// </summary>
        Charged,
        
        /// <summary>
        /// >> WithdrawAmountExceed
        /// Withdraw amount exceed charge amount.
        /// </summary>
        WithdrawAmountExceed,
        
        /// <summary>
        /// >> BadChargeAccount
        /// 
        /// </summary>
        BadChargeAccount,
        
        /// <summary>
        /// >> AlreadyInWhiteList
        /// Account has already in the set who can create merkle distributor
        /// </summary>
        AlreadyInWhiteList,
        
        /// <summary>
        /// >> NotInWhiteList
        /// Account is no in the set who can create merkle distributor
        /// </summary>
        NotInWhiteList,
    }
}
