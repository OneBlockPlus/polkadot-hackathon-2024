//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Bifrost.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> FeeShareStorage
    /// </summary>
    public sealed class FeeShareStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> FeeShareStorage Constructor
        /// </summary>
        public FeeShareStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("FeeShare", "DistributionInfos"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Bifrost.NetApi.Generated.Model.bifrost_fee_share.pallet.Info)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("FeeShare", "DistributionNextId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("FeeShare", "AutoEra"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>)));
        }
        
        /// <summary>
        /// >> DistributionInfosParams
        /// </summary>
        public static string DistributionInfosParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("FeeShare", "DistributionInfos", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> DistributionInfosDefault
        /// Default value as hex string
        /// </summary>
        public static string DistributionInfosDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> DistributionInfos
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bifrost_fee_share.pallet.Info> DistributionInfos(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = FeeShareStorage.DistributionInfosParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bifrost_fee_share.pallet.Info>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DistributionNextIdParams
        /// </summary>
        public static string DistributionNextIdParams()
        {
            return RequestGenerator.GetStorage("FeeShare", "DistributionNextId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> DistributionNextIdDefault
        /// Default value as hex string
        /// </summary>
        public static string DistributionNextIdDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> DistributionNextId
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> DistributionNextId(string blockhash, CancellationToken token)
        {
            string parameters = FeeShareStorage.DistributionNextIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AutoEraParams
        /// </summary>
        public static string AutoEraParams()
        {
            return RequestGenerator.GetStorage("FeeShare", "AutoEra", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> AutoEraDefault
        /// Default value as hex string
        /// </summary>
        public static string AutoEraDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> AutoEra
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>> AutoEra(string blockhash, CancellationToken token)
        {
            string parameters = FeeShareStorage.AutoEraParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> FeeShareCalls
    /// </summary>
    public sealed class FeeShareCalls
    {
        
        /// <summary>
        /// >> create_distribution
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CreateDistribution(Substrate.NetApi.Model.Types.Base.BaseVec<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> token_type, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32, Bifrost.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill>> tokens_proportion, Substrate.NetApi.Model.Types.Primitive.Bool if_auto)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(token_type.Encode());
            byteArray.AddRange(tokens_proportion.Encode());
            byteArray.AddRange(if_auto.Encode());
            return new Method(122, "FeeShare", 0, "create_distribution", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> edit_distribution
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method EditDistribution(Substrate.NetApi.Model.Types.Primitive.U32 distribution_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseVec<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>> token_type, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32, Bifrost.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill>>> tokens_proportion, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.Bool> if_auto)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(distribution_id.Encode());
            byteArray.AddRange(token_type.Encode());
            byteArray.AddRange(tokens_proportion.Encode());
            byteArray.AddRange(if_auto.Encode());
            return new Method(122, "FeeShare", 1, "edit_distribution", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_era_length
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetEraLength(Substrate.NetApi.Model.Types.Primitive.U32 era_length)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(era_length.Encode());
            return new Method(122, "FeeShare", 2, "set_era_length", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> execute_distribute
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ExecuteDistribute(Substrate.NetApi.Model.Types.Primitive.U32 distribution_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(distribution_id.Encode());
            return new Method(122, "FeeShare", 3, "execute_distribute", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> delete_distribution
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method DeleteDistribution(Substrate.NetApi.Model.Types.Primitive.U32 distribution_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(distribution_id.Encode());
            return new Method(122, "FeeShare", 4, "delete_distribution", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> FeeShareConstants
    /// </summary>
    public sealed class FeeShareConstants
    {
        
        /// <summary>
        /// >> FeeSharePalletId
        /// </summary>
        public Bifrost.NetApi.Generated.Model.frame_support.PalletId FeeSharePalletId()
        {
            var result = new Bifrost.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x62662F6665657368");
            return result;
        }
    }
    
    /// <summary>
    /// >> FeeShareErrors
    /// </summary>
    public enum FeeShareErrors
    {
        
        /// <summary>
        /// >> NotEnoughBalance
        /// </summary>
        NotEnoughBalance,
        
        /// <summary>
        /// >> NotSupportProportion
        /// </summary>
        NotSupportProportion,
        
        /// <summary>
        /// >> CalculationOverflow
        /// </summary>
        CalculationOverflow,
        
        /// <summary>
        /// >> ExistentialDeposit
        /// </summary>
        ExistentialDeposit,
        
        /// <summary>
        /// >> DistributionNotExist
        /// </summary>
        DistributionNotExist,
    }
}
