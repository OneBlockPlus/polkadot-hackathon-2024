//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Bifrost.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> ZenlinkProtocolStorage
    /// </summary>
    public sealed class ZenlinkProtocolStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> ZenlinkProtocolStorage Constructor
        /// </summary>
        public ZenlinkProtocolStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ZenlinkProtocol", "ForeignLedger"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId, Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32>), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ZenlinkProtocol", "ForeignMeta"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ZenlinkProtocol", "ForeignList"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ZenlinkProtocol", "KLast"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId>), typeof(Bifrost.NetApi.Generated.Model.primitive_types.U256)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ZenlinkProtocol", "FeeMeta"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32>, Substrate.NetApi.Model.Types.Primitive.U8>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ZenlinkProtocol", "FeeReceiver"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId), typeof(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ZenlinkProtocol", "LiquidityPairs"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId>), typeof(Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ZenlinkProtocol", "PairStatuses"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId>), typeof(Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.EnumPairStatus)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ZenlinkProtocol", "BootstrapPersonalSupply"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId>, Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ZenlinkProtocol", "BootstrapEndStatus"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId>), typeof(Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.EnumPairStatus)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ZenlinkProtocol", "BootstrapRewards"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId>), typeof(Bifrost.NetApi.Generated.Types.Base.BTreeMapT8)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ZenlinkProtocol", "BootstrapLimits"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId>), typeof(Bifrost.NetApi.Generated.Types.Base.BTreeMapT8)));
        }
        
        /// <summary>
        /// >> ForeignLedgerParams
        ///  Foreign foreign storage
        ///  The number of units of assets held by any given account.
        /// </summary>
        public static string ForeignLedgerParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId, Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("ZenlinkProtocol", "ForeignLedger", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ForeignLedgerDefault
        /// Default value as hex string
        /// </summary>
        public static string ForeignLedgerDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> ForeignLedger
        ///  Foreign foreign storage
        ///  The number of units of assets held by any given account.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> ForeignLedger(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId, Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = ZenlinkProtocolStorage.ForeignLedgerParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ForeignMetaParams
        ///  TWOX-NOTE: `AssetId` is trusted, so this is safe.
        /// </summary>
        public static string ForeignMetaParams(Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId key)
        {
            return RequestGenerator.GetStorage("ZenlinkProtocol", "ForeignMeta", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ForeignMetaDefault
        /// Default value as hex string
        /// </summary>
        public static string ForeignMetaDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> ForeignMeta
        ///  TWOX-NOTE: `AssetId` is trusted, so this is safe.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> ForeignMeta(Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId key, string blockhash, CancellationToken token)
        {
            string parameters = ZenlinkProtocolStorage.ForeignMetaParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ForeignListParams
        /// </summary>
        public static string ForeignListParams()
        {
            return RequestGenerator.GetStorage("ZenlinkProtocol", "ForeignList", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ForeignListDefault
        /// Default value as hex string
        /// </summary>
        public static string ForeignListDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ForeignList
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId>> ForeignList(string blockhash, CancellationToken token)
        {
            string parameters = ZenlinkProtocolStorage.ForeignListParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> KLastParams
        ///  Refer: https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2Pair.sol#L88
        ///  Last unliquidated protocol fee;
        /// </summary>
        public static string KLastParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId> key)
        {
            return RequestGenerator.GetStorage("ZenlinkProtocol", "KLast", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> KLastDefault
        /// Default value as hex string
        /// </summary>
        public static string KLastDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> KLast
        ///  Refer: https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2Pair.sol#L88
        ///  Last unliquidated protocol fee;
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.primitive_types.U256> KLast(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId> key, string blockhash, CancellationToken token)
        {
            string parameters = ZenlinkProtocolStorage.KLastParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.primitive_types.U256>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> FeeMetaParams
        ///  (Option<fee_receiver>, fee_point)
        /// </summary>
        public static string FeeMetaParams()
        {
            return RequestGenerator.GetStorage("ZenlinkProtocol", "FeeMeta", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> FeeMetaDefault
        /// Default value as hex string
        /// </summary>
        public static string FeeMetaDefault()
        {
            return "0x0000";
        }
        
        /// <summary>
        /// >> FeeMeta
        ///  (Option<fee_receiver>, fee_point)
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32>, Substrate.NetApi.Model.Types.Primitive.U8>> FeeMeta(string blockhash, CancellationToken token)
        {
            string parameters = ZenlinkProtocolStorage.FeeMetaParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32>, Substrate.NetApi.Model.Types.Primitive.U8>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> FeeReceiverParams
        ///  AssetId => fee_receiver
        /// </summary>
        public static string FeeReceiverParams(Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId key)
        {
            return RequestGenerator.GetStorage("ZenlinkProtocol", "FeeReceiver", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> FeeReceiverDefault
        /// Default value as hex string
        /// </summary>
        public static string FeeReceiverDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> FeeReceiver
        ///  AssetId => fee_receiver
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32> FeeReceiver(Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId key, string blockhash, CancellationToken token)
        {
            string parameters = ZenlinkProtocolStorage.FeeReceiverParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LiquidityPairsParams
        /// </summary>
        public static string LiquidityPairsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId> key)
        {
            return RequestGenerator.GetStorage("ZenlinkProtocol", "LiquidityPairs", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> LiquidityPairsDefault
        /// Default value as hex string
        /// </summary>
        public static string LiquidityPairsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> LiquidityPairs
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId>> LiquidityPairs(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId> key, string blockhash, CancellationToken token)
        {
            string parameters = ZenlinkProtocolStorage.LiquidityPairsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PairStatusesParams
        ///  (T::AssetId, T::AssetId) -> PairStatus
        /// </summary>
        public static string PairStatusesParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId> key)
        {
            return RequestGenerator.GetStorage("ZenlinkProtocol", "PairStatuses", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PairStatusesDefault
        /// Default value as hex string
        /// </summary>
        public static string PairStatusesDefault()
        {
            return "0x02";
        }
        
        /// <summary>
        /// >> PairStatuses
        ///  (T::AssetId, T::AssetId) -> PairStatus
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.EnumPairStatus> PairStatuses(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId> key, string blockhash, CancellationToken token)
        {
            string parameters = ZenlinkProtocolStorage.PairStatusesParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.EnumPairStatus>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BootstrapPersonalSupplyParams
        /// </summary>
        public static string BootstrapPersonalSupplyParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId>, Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("ZenlinkProtocol", "BootstrapPersonalSupply", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BootstrapPersonalSupplyDefault
        /// Default value as hex string
        /// </summary>
        public static string BootstrapPersonalSupplyDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> BootstrapPersonalSupply
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>> BootstrapPersonalSupply(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId>, Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = ZenlinkProtocolStorage.BootstrapPersonalSupplyParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BootstrapEndStatusParams
        ///  End status of bootstrap
        /// 
        ///  BootstrapEndStatus: map bootstrap pair => pairStatus
        /// </summary>
        public static string BootstrapEndStatusParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId> key)
        {
            return RequestGenerator.GetStorage("ZenlinkProtocol", "BootstrapEndStatus", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BootstrapEndStatusDefault
        /// Default value as hex string
        /// </summary>
        public static string BootstrapEndStatusDefault()
        {
            return "0x02";
        }
        
        /// <summary>
        /// >> BootstrapEndStatus
        ///  End status of bootstrap
        /// 
        ///  BootstrapEndStatus: map bootstrap pair => pairStatus
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.EnumPairStatus> BootstrapEndStatus(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId> key, string blockhash, CancellationToken token)
        {
            string parameters = ZenlinkProtocolStorage.BootstrapEndStatusParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.EnumPairStatus>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BootstrapRewardsParams
        /// </summary>
        public static string BootstrapRewardsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId> key)
        {
            return RequestGenerator.GetStorage("ZenlinkProtocol", "BootstrapRewards", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BootstrapRewardsDefault
        /// Default value as hex string
        /// </summary>
        public static string BootstrapRewardsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> BootstrapRewards
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Types.Base.BTreeMapT8> BootstrapRewards(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId> key, string blockhash, CancellationToken token)
        {
            string parameters = ZenlinkProtocolStorage.BootstrapRewardsParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Types.Base.BTreeMapT8>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BootstrapLimitsParams
        /// </summary>
        public static string BootstrapLimitsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId> key)
        {
            return RequestGenerator.GetStorage("ZenlinkProtocol", "BootstrapLimits", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BootstrapLimitsDefault
        /// Default value as hex string
        /// </summary>
        public static string BootstrapLimitsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> BootstrapLimits
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Types.Base.BTreeMapT8> BootstrapLimits(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId> key, string blockhash, CancellationToken token)
        {
            string parameters = ZenlinkProtocolStorage.BootstrapLimitsParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Types.Base.BTreeMapT8>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> ZenlinkProtocolCalls
    /// </summary>
    public sealed class ZenlinkProtocolCalls
    {
        
        /// <summary>
        /// >> set_fee_receiver
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetFeeReceiver(Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress> send_to)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(send_to.Encode());
            return new Method(80, "ZenlinkProtocol", 0, "set_fee_receiver", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_fee_point
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetFeePoint(Substrate.NetApi.Model.Types.Primitive.U8 fee_point)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(fee_point.Encode());
            return new Method(80, "ZenlinkProtocol", 1, "set_fee_point", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> transfer
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Transfer(Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId asset_id, Bifrost.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress recipient, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(recipient.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(80, "ZenlinkProtocol", 2, "transfer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> create_pair
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CreatePair(Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId asset_0, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId asset_1, Bifrost.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress fee_recipient)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_0.Encode());
            byteArray.AddRange(asset_1.Encode());
            byteArray.AddRange(fee_recipient.Encode());
            return new Method(80, "ZenlinkProtocol", 3, "create_pair", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_liquidity
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddLiquidity(Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId asset_0, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId asset_1, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount_0_desired, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount_1_desired, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount_0_min, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount_1_min, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> deadline)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_0.Encode());
            byteArray.AddRange(asset_1.Encode());
            byteArray.AddRange(amount_0_desired.Encode());
            byteArray.AddRange(amount_1_desired.Encode());
            byteArray.AddRange(amount_0_min.Encode());
            byteArray.AddRange(amount_1_min.Encode());
            byteArray.AddRange(deadline.Encode());
            return new Method(80, "ZenlinkProtocol", 4, "add_liquidity", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_liquidity
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveLiquidity(Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId asset_0, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId asset_1, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> liquidity, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount_0_min, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount_1_min, Bifrost.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress recipient, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> deadline)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_0.Encode());
            byteArray.AddRange(asset_1.Encode());
            byteArray.AddRange(liquidity.Encode());
            byteArray.AddRange(amount_0_min.Encode());
            byteArray.AddRange(amount_1_min.Encode());
            byteArray.AddRange(recipient.Encode());
            byteArray.AddRange(deadline.Encode());
            return new Method(80, "ZenlinkProtocol", 5, "remove_liquidity", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> swap_exact_assets_for_assets
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SwapExactAssetsForAssets(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount_in, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount_out_min, Substrate.NetApi.Model.Types.Base.BaseVec<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId> path, Bifrost.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress recipient, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> deadline)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(amount_in.Encode());
            byteArray.AddRange(amount_out_min.Encode());
            byteArray.AddRange(path.Encode());
            byteArray.AddRange(recipient.Encode());
            byteArray.AddRange(deadline.Encode());
            return new Method(80, "ZenlinkProtocol", 6, "swap_exact_assets_for_assets", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> swap_assets_for_exact_assets
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SwapAssetsForExactAssets(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount_out, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount_in_max, Substrate.NetApi.Model.Types.Base.BaseVec<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId> path, Bifrost.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress recipient, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> deadline)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(amount_out.Encode());
            byteArray.AddRange(amount_in_max.Encode());
            byteArray.AddRange(path.Encode());
            byteArray.AddRange(recipient.Encode());
            byteArray.AddRange(deadline.Encode());
            return new Method(80, "ZenlinkProtocol", 7, "swap_assets_for_exact_assets", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> bootstrap_create
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method BootstrapCreate(Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId asset_0, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId asset_1, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> target_supply_0, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> target_supply_1, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> capacity_supply_0, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> capacity_supply_1, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> end, Substrate.NetApi.Model.Types.Base.BaseVec<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId> rewards, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId, Substrate.NetApi.Model.Types.Primitive.U128>> limits)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_0.Encode());
            byteArray.AddRange(asset_1.Encode());
            byteArray.AddRange(target_supply_0.Encode());
            byteArray.AddRange(target_supply_1.Encode());
            byteArray.AddRange(capacity_supply_0.Encode());
            byteArray.AddRange(capacity_supply_1.Encode());
            byteArray.AddRange(end.Encode());
            byteArray.AddRange(rewards.Encode());
            byteArray.AddRange(limits.Encode());
            return new Method(80, "ZenlinkProtocol", 8, "bootstrap_create", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> bootstrap_contribute
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method BootstrapContribute(Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId asset_0, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId asset_1, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount_0_contribute, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount_1_contribute, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> deadline)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_0.Encode());
            byteArray.AddRange(asset_1.Encode());
            byteArray.AddRange(amount_0_contribute.Encode());
            byteArray.AddRange(amount_1_contribute.Encode());
            byteArray.AddRange(deadline.Encode());
            return new Method(80, "ZenlinkProtocol", 9, "bootstrap_contribute", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> bootstrap_claim
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method BootstrapClaim(Bifrost.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress recipient, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId asset_0, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId asset_1, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> deadline)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(recipient.Encode());
            byteArray.AddRange(asset_0.Encode());
            byteArray.AddRange(asset_1.Encode());
            byteArray.AddRange(deadline.Encode());
            return new Method(80, "ZenlinkProtocol", 10, "bootstrap_claim", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> bootstrap_end
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method BootstrapEnd(Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId asset_0, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId asset_1)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_0.Encode());
            byteArray.AddRange(asset_1.Encode());
            return new Method(80, "ZenlinkProtocol", 11, "bootstrap_end", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> bootstrap_update
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method BootstrapUpdate(Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId asset_0, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId asset_1, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> target_supply_0, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> target_supply_1, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> capacity_supply_0, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> capacity_supply_1, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> end, Substrate.NetApi.Model.Types.Base.BaseVec<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId> rewards, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId, Substrate.NetApi.Model.Types.Primitive.U128>> limits)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_0.Encode());
            byteArray.AddRange(asset_1.Encode());
            byteArray.AddRange(target_supply_0.Encode());
            byteArray.AddRange(target_supply_1.Encode());
            byteArray.AddRange(capacity_supply_0.Encode());
            byteArray.AddRange(capacity_supply_1.Encode());
            byteArray.AddRange(end.Encode());
            byteArray.AddRange(rewards.Encode());
            byteArray.AddRange(limits.Encode());
            return new Method(80, "ZenlinkProtocol", 12, "bootstrap_update", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> bootstrap_refund
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method BootstrapRefund(Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId asset_0, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId asset_1)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_0.Encode());
            byteArray.AddRange(asset_1.Encode());
            return new Method(80, "ZenlinkProtocol", 13, "bootstrap_refund", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> bootstrap_charge_reward
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method BootstrapChargeReward(Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId asset_0, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId asset_1, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId, Substrate.NetApi.Model.Types.Primitive.U128>> charge_rewards)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_0.Encode());
            byteArray.AddRange(asset_1.Encode());
            byteArray.AddRange(charge_rewards.Encode());
            return new Method(80, "ZenlinkProtocol", 14, "bootstrap_charge_reward", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> bootstrap_withdraw_reward
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method BootstrapWithdrawReward(Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId asset_0, Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId asset_1, Bifrost.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress recipient)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_0.Encode());
            byteArray.AddRange(asset_1.Encode());
            byteArray.AddRange(recipient.Encode());
            return new Method(80, "ZenlinkProtocol", 15, "bootstrap_withdraw_reward", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_new_fee_receiver
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetNewFeeReceiver(Bifrost.NetApi.Generated.Model.zenlink_protocol.primitives.AssetId asset, Bifrost.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress send_to)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset.Encode());
            byteArray.AddRange(send_to.Encode());
            return new Method(80, "ZenlinkProtocol", 16, "set_new_fee_receiver", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> ZenlinkProtocolConstants
    /// </summary>
    public sealed class ZenlinkProtocolConstants
    {
        
        /// <summary>
        /// >> PalletId
        ///  This pallet id.
        /// </summary>
        public Bifrost.NetApi.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new Bifrost.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x2F7A656E6C696E6B");
            return result;
        }
    }
    
    /// <summary>
    /// >> ZenlinkProtocolErrors
    /// </summary>
    public enum ZenlinkProtocolErrors
    {
        
        /// <summary>
        /// >> RequireProtocolAdmin
        /// Require the admin who can reset the admin and receiver of the protocol fee.
        /// </summary>
        RequireProtocolAdmin,
        
        /// <summary>
        /// >> RequireProtocolAdminCandidate
        /// Require the admin candidate who can become new admin after confirm.
        /// </summary>
        RequireProtocolAdminCandidate,
        
        /// <summary>
        /// >> InvalidFeePoint
        /// Invalid fee_point
        /// </summary>
        InvalidFeePoint,
        
        /// <summary>
        /// >> UnsupportedAssetType
        /// Unsupported AssetId by this ZenlinkProtocol Version.
        /// </summary>
        UnsupportedAssetType,
        
        /// <summary>
        /// >> InsufficientAssetBalance
        /// Account balance must be greater than or equal to the transfer amount.
        /// </summary>
        InsufficientAssetBalance,
        
        /// <summary>
        /// >> NativeBalanceTooLow
        /// Account native currency balance must be greater than ExistentialDeposit.
        /// </summary>
        NativeBalanceTooLow,
        
        /// <summary>
        /// >> DeniedCreatePair
        /// Trading pair can't be created.
        /// </summary>
        DeniedCreatePair,
        
        /// <summary>
        /// >> PairAlreadyExists
        /// Trading pair already exists.
        /// </summary>
        PairAlreadyExists,
        
        /// <summary>
        /// >> PairNotExists
        /// Trading pair does not exist.
        /// </summary>
        PairNotExists,
        
        /// <summary>
        /// >> AssetNotExists
        /// Asset does not exist.
        /// </summary>
        AssetNotExists,
        
        /// <summary>
        /// >> InsufficientLiquidity
        /// Liquidity is not enough.
        /// </summary>
        InsufficientLiquidity,
        
        /// <summary>
        /// >> InsufficientPairReserve
        /// Trading pair does have enough foreign.
        /// </summary>
        InsufficientPairReserve,
        
        /// <summary>
        /// >> InsufficientTargetAmount
        /// Get target amount is less than exception.
        /// </summary>
        InsufficientTargetAmount,
        
        /// <summary>
        /// >> ExcessiveSoldAmount
        /// Sold amount is more than exception.
        /// </summary>
        ExcessiveSoldAmount,
        
        /// <summary>
        /// >> InvalidPath
        /// Can't find pair though trading path.
        /// </summary>
        InvalidPath,
        
        /// <summary>
        /// >> IncorrectAssetAmountRange
        /// Incorrect foreign amount range.
        /// </summary>
        IncorrectAssetAmountRange,
        
        /// <summary>
        /// >> Overflow
        /// Overflow.
        /// </summary>
        Overflow,
        
        /// <summary>
        /// >> Deadline
        /// Transaction block number is larger than the end block number.
        /// </summary>
        Deadline,
        
        /// <summary>
        /// >> AccountIdBadLocation
        /// Location given was invalid or unsupported.
        /// </summary>
        AccountIdBadLocation,
        
        /// <summary>
        /// >> ExecutionFailed
        /// XCM execution failed.
        /// </summary>
        ExecutionFailed,
        
        /// <summary>
        /// >> DeniedTransferToSelf
        /// Transfer to self by XCM message.
        /// </summary>
        DeniedTransferToSelf,
        
        /// <summary>
        /// >> TargetChainNotRegistered
        /// Not in ZenlinkRegistedParaChains.
        /// </summary>
        TargetChainNotRegistered,
        
        /// <summary>
        /// >> InvariantCheckFailed
        /// Can't pass the K value check
        /// </summary>
        InvariantCheckFailed,
        
        /// <summary>
        /// >> PairCreateForbidden
        /// Created pair can't create now
        /// </summary>
        PairCreateForbidden,
        
        /// <summary>
        /// >> NotInBootstrap
        /// Pair is not in bootstrap
        /// </summary>
        NotInBootstrap,
        
        /// <summary>
        /// >> InvalidContributionAmount
        /// Amount of contribution is invalid.
        /// </summary>
        InvalidContributionAmount,
        
        /// <summary>
        /// >> UnqualifiedBootstrap
        /// Amount of contribution is invalid.
        /// </summary>
        UnqualifiedBootstrap,
        
        /// <summary>
        /// >> ZeroContribute
        /// Zero contribute in bootstrap
        /// </summary>
        ZeroContribute,
        
        /// <summary>
        /// >> DenyRefund
        /// Bootstrap deny refund
        /// </summary>
        DenyRefund,
        
        /// <summary>
        /// >> DisableBootstrap
        /// Bootstrap is disable
        /// </summary>
        DisableBootstrap,
        
        /// <summary>
        /// >> NotQualifiedAccount
        /// Not eligible to contribute
        /// </summary>
        NotQualifiedAccount,
        
        /// <summary>
        /// >> NoRewardTokens
        /// Reward of bootstrap is not set.
        /// </summary>
        NoRewardTokens,
        
        /// <summary>
        /// >> ChargeRewardParamsError
        /// Charge bootstrap extrinsic args has error,
        /// </summary>
        ChargeRewardParamsError,
        
        /// <summary>
        /// >> ExistRewardsInBootstrap
        /// Exist some reward in bootstrap,
        /// </summary>
        ExistRewardsInBootstrap,
    }
}
