//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Bifrost.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> SlpxStorage
    /// </summary>
    public sealed class SlpxStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> SlpxStorage Constructor
        /// </summary>
        public SlpxStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slpx", "WhitelistAccountId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_slpx.types.EnumSupportChain), typeof(Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT54)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slpx", "ExecutionFee"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slpx", "TransferToFee"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_slpx.types.EnumSupportChain), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slpx", "XcmEthereumCallConfiguration"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Bifrost.NetApi.Generated.Model.bifrost_slpx.types.EthereumCallConfiguration)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slpx", "CurrencyIdList"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT55)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slpx", "SupportXcmFeeList"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT56)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slpx", "OrderQueue"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT57)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Slpx", "DelayBlock"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
        }
        
        /// <summary>
        /// >> WhitelistAccountIdParams
        ///  Contract whitelist
        /// </summary>
        public static string WhitelistAccountIdParams(Bifrost.NetApi.Generated.Model.bifrost_slpx.types.EnumSupportChain key)
        {
            return RequestGenerator.GetStorage("Slpx", "WhitelistAccountId", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> WhitelistAccountIdDefault
        /// Default value as hex string
        /// </summary>
        public static string WhitelistAccountIdDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> WhitelistAccountId
        ///  Contract whitelist
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT54> WhitelistAccountId(Bifrost.NetApi.Generated.Model.bifrost_slpx.types.EnumSupportChain key, string blockhash, CancellationToken token)
        {
            string parameters = SlpxStorage.WhitelistAccountIdParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT54>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ExecutionFeeParams
        ///  Charge corresponding fees for different CurrencyId
        /// </summary>
        public static string ExecutionFeeParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("Slpx", "ExecutionFee", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ExecutionFeeDefault
        /// Default value as hex string
        /// </summary>
        public static string ExecutionFeeDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ExecutionFee
        ///  Charge corresponding fees for different CurrencyId
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> ExecutionFee(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = SlpxStorage.ExecutionFeeParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TransferToFeeParams
        ///  XCM fee for transferring to Moonbeam(BNC)
        /// </summary>
        public static string TransferToFeeParams(Bifrost.NetApi.Generated.Model.bifrost_slpx.types.EnumSupportChain key)
        {
            return RequestGenerator.GetStorage("Slpx", "TransferToFee", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> TransferToFeeDefault
        /// Default value as hex string
        /// </summary>
        public static string TransferToFeeDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> TransferToFee
        ///  XCM fee for transferring to Moonbeam(BNC)
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> TransferToFee(Bifrost.NetApi.Generated.Model.bifrost_slpx.types.EnumSupportChain key, string blockhash, CancellationToken token)
        {
            string parameters = SlpxStorage.TransferToFeeParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> XcmEthereumCallConfigurationParams
        /// </summary>
        public static string XcmEthereumCallConfigurationParams()
        {
            return RequestGenerator.GetStorage("Slpx", "XcmEthereumCallConfiguration", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> XcmEthereumCallConfigurationDefault
        /// Default value as hex string
        /// </summary>
        public static string XcmEthereumCallConfigurationDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> XcmEthereumCallConfiguration
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bifrost_slpx.types.EthereumCallConfiguration> XcmEthereumCallConfiguration(string blockhash, CancellationToken token)
        {
            string parameters = SlpxStorage.XcmEthereumCallConfigurationParams();
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bifrost_slpx.types.EthereumCallConfiguration>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CurrencyIdListParams
        /// </summary>
        public static string CurrencyIdListParams()
        {
            return RequestGenerator.GetStorage("Slpx", "CurrencyIdList", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CurrencyIdListDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrencyIdListDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CurrencyIdList
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT55> CurrencyIdList(string blockhash, CancellationToken token)
        {
            string parameters = SlpxStorage.CurrencyIdListParams();
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT55>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SupportXcmFeeListParams
        /// </summary>
        public static string SupportXcmFeeListParams()
        {
            return RequestGenerator.GetStorage("Slpx", "SupportXcmFeeList", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> SupportXcmFeeListDefault
        /// Default value as hex string
        /// </summary>
        public static string SupportXcmFeeListDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SupportXcmFeeList
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT56> SupportXcmFeeList(string blockhash, CancellationToken token)
        {
            string parameters = SlpxStorage.SupportXcmFeeListParams();
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT56>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OrderQueueParams
        /// </summary>
        public static string OrderQueueParams()
        {
            return RequestGenerator.GetStorage("Slpx", "OrderQueue", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> OrderQueueDefault
        /// Default value as hex string
        /// </summary>
        public static string OrderQueueDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> OrderQueue
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT57> OrderQueue(string blockhash, CancellationToken token)
        {
            string parameters = SlpxStorage.OrderQueueParams();
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT57>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DelayBlockParams
        /// </summary>
        public static string DelayBlockParams()
        {
            return RequestGenerator.GetStorage("Slpx", "DelayBlock", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> DelayBlockDefault
        /// Default value as hex string
        /// </summary>
        public static string DelayBlockDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> DelayBlock
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> DelayBlock(string blockhash, CancellationToken token)
        {
            string parameters = SlpxStorage.DelayBlockParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> SlpxCalls
    /// </summary>
    public sealed class SlpxCalls
    {
        
        /// <summary>
        /// >> mint
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Mint(Bifrost.NetApi.Generated.Model.primitive_types.H160 evm_caller, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Bifrost.NetApi.Generated.Model.bifrost_slpx.types.EnumTargetChain target_chain, Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT7 remark)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(evm_caller.Encode());
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(target_chain.Encode());
            byteArray.AddRange(remark.Encode());
            return new Method(125, "Slpx", 0, "mint", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> zenlink_swap
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ZenlinkSwap(Bifrost.NetApi.Generated.Model.primitive_types.H160 evm_caller, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id_in, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id_out, Substrate.NetApi.Model.Types.Primitive.U128 currency_id_out_min, Bifrost.NetApi.Generated.Model.bifrost_slpx.types.EnumTargetChain target_chain)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(evm_caller.Encode());
            byteArray.AddRange(currency_id_in.Encode());
            byteArray.AddRange(currency_id_out.Encode());
            byteArray.AddRange(currency_id_out_min.Encode());
            byteArray.AddRange(target_chain.Encode());
            return new Method(125, "Slpx", 1, "zenlink_swap", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> redeem
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Redeem(Bifrost.NetApi.Generated.Model.primitive_types.H160 evm_caller, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId vtoken_id, Bifrost.NetApi.Generated.Model.bifrost_slpx.types.EnumTargetChain target_chain)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(evm_caller.Encode());
            byteArray.AddRange(vtoken_id.Encode());
            byteArray.AddRange(target_chain.Encode());
            return new Method(125, "Slpx", 2, "redeem", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> stable_pool_swap
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method StablePoolSwap(Bifrost.NetApi.Generated.Model.primitive_types.H160 evm_caller, Substrate.NetApi.Model.Types.Primitive.U32 pool_id, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id_in, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id_out, Substrate.NetApi.Model.Types.Primitive.U128 min_dy, Bifrost.NetApi.Generated.Model.bifrost_slpx.types.EnumTargetChain target_chain)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(evm_caller.Encode());
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(currency_id_in.Encode());
            byteArray.AddRange(currency_id_out.Encode());
            byteArray.AddRange(min_dy.Encode());
            byteArray.AddRange(target_chain.Encode());
            return new Method(125, "Slpx", 3, "stable_pool_swap", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_whitelist
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddWhitelist(Bifrost.NetApi.Generated.Model.bifrost_slpx.types.EnumSupportChain support_chain, Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 evm_contract_account_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(support_chain.Encode());
            byteArray.AddRange(evm_contract_account_id.Encode());
            return new Method(125, "Slpx", 4, "add_whitelist", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_whitelist
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveWhitelist(Bifrost.NetApi.Generated.Model.bifrost_slpx.types.EnumSupportChain support_chain, Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 evm_contract_account_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(support_chain.Encode());
            byteArray.AddRange(evm_contract_account_id.Encode());
            return new Method(125, "Slpx", 5, "remove_whitelist", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_execution_fee
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetExecutionFee(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Primitive.U128 execution_fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(execution_fee.Encode());
            return new Method(125, "Slpx", 6, "set_execution_fee", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_transfer_to_fee
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetTransferToFee(Bifrost.NetApi.Generated.Model.bifrost_slpx.types.EnumSupportChain support_chain, Substrate.NetApi.Model.Types.Primitive.U128 transfer_to_fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(support_chain.Encode());
            byteArray.AddRange(transfer_to_fee.Encode());
            return new Method(125, "Slpx", 7, "set_transfer_to_fee", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_currency_ethereum_call_switch
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetCurrencyEthereumCallSwitch(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Primitive.Bool is_support)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(is_support.Encode());
            return new Method(125, "Slpx", 8, "set_currency_ethereum_call_switch", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_ethereum_call_configration
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetEthereumCallConfigration(Substrate.NetApi.Model.Types.Primitive.U128 xcm_fee, Bifrost.NetApi.Generated.Model.sp_weights.weight_v2.Weight xcm_weight, Substrate.NetApi.Model.Types.Primitive.U32 period, Bifrost.NetApi.Generated.Model.primitive_types.H160 contract)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(xcm_fee.Encode());
            byteArray.AddRange(xcm_weight.Encode());
            byteArray.AddRange(period.Encode());
            byteArray.AddRange(contract.Encode());
            return new Method(125, "Slpx", 9, "set_ethereum_call_configration", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_currency_support_xcm_fee
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetCurrencySupportXcmFee(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Primitive.Bool is_support)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(is_support.Encode());
            return new Method(125, "Slpx", 10, "set_currency_support_xcm_fee", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_delay_block
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetDelayBlock(Substrate.NetApi.Model.Types.Primitive.U32 delay_block)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(delay_block.Encode());
            return new Method(125, "Slpx", 11, "set_delay_block", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_add_order
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceAddOrder(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 slpx_contract_derivative_account, Bifrost.NetApi.Generated.Model.primitive_types.H160 evm_caller, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Bifrost.NetApi.Generated.Model.bifrost_slpx.types.EnumTargetChain target_chain, Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT7 remark, Bifrost.NetApi.Generated.Model.bifrost_slpx.types.EnumOrderType order_type)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(slpx_contract_derivative_account.Encode());
            byteArray.AddRange(evm_caller.Encode());
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(target_chain.Encode());
            byteArray.AddRange(remark.Encode());
            byteArray.AddRange(order_type.Encode());
            return new Method(125, "Slpx", 12, "force_add_order", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> mint_with_channel_id
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method MintWithChannelId(Bifrost.NetApi.Generated.Model.primitive_types.H160 evm_caller, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Bifrost.NetApi.Generated.Model.bifrost_slpx.types.EnumTargetChain target_chain, Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT7 remark, Substrate.NetApi.Model.Types.Primitive.U32 channel_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(evm_caller.Encode());
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(target_chain.Encode());
            byteArray.AddRange(remark.Encode());
            byteArray.AddRange(channel_id.Encode());
            return new Method(125, "Slpx", 13, "mint_with_channel_id", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> SlpxConstants
    /// </summary>
    public sealed class SlpxConstants
    {
        
        /// <summary>
        /// >> TreasuryAccount
        ///  TreasuryAccount
        /// </summary>
        public Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 TreasuryAccount()
        {
            var result = new Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32();
            result.Create("0x6D6F646C62662F74727372790000000000000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> ParachainId
        /// </summary>
        public Bifrost.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id ParachainId()
        {
            var result = new Bifrost.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id();
            result.Create("0xEE070000");
            return result;
        }
    }
    
    /// <summary>
    /// >> SlpxErrors
    /// </summary>
    public enum SlpxErrors
    {
        
        /// <summary>
        /// >> TokenNotFoundInVtokenMinting
        /// Token not found in vtoken minting
        /// </summary>
        TokenNotFoundInVtokenMinting,
        
        /// <summary>
        /// >> TokenNotFoundInZenlink
        /// Token not found in zenlink
        /// </summary>
        TokenNotFoundInZenlink,
        
        /// <summary>
        /// >> AccountIdAlreadyInWhitelist
        /// Contract Account already exists in the whitelist
        /// </summary>
        AccountIdAlreadyInWhitelist,
        
        /// <summary>
        /// >> AccountIdNotInWhitelist
        /// Contract Account is not in the whitelist
        /// </summary>
        AccountIdNotInWhitelist,
        
        /// <summary>
        /// >> ExceededWhitelistMaxNumber
        /// The maximum number of whitelist addresses is 10
        /// </summary>
        ExceededWhitelistMaxNumber,
        
        /// <summary>
        /// >> NotSetExecutionFee
        /// Execution fee not set
        /// </summary>
        NotSetExecutionFee,
        
        /// <summary>
        /// >> FreeBalanceTooLow
        /// Insufficient balance to execute the fee
        /// </summary>
        FreeBalanceTooLow,
        
        /// <summary>
        /// >> ArgumentsError
        /// ArgumentsError
        /// </summary>
        ArgumentsError,
        
        /// <summary>
        /// >> ErrorConvertVtoken
        /// </summary>
        ErrorConvertVtoken,
        
        /// <summary>
        /// >> ErrorValidating
        /// </summary>
        ErrorValidating,
        
        /// <summary>
        /// >> ErrorDelivering
        /// </summary>
        ErrorDelivering,
        
        /// <summary>
        /// >> Unsupported
        /// </summary>
        Unsupported,
    }
}
