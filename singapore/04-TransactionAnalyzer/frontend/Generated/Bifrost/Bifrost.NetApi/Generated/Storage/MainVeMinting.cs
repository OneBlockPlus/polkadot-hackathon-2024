//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Bifrost.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> VeMintingStorage
    /// </summary>
    public sealed class VeMintingStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> VeMintingStorage Constructor
        /// </summary>
        public VeMintingStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VeMinting", "Supply"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VeMinting", "VeConfigs"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Bifrost.NetApi.Generated.Model.bifrost_ve_minting.VeConfig)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VeMinting", "Epoch"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Bifrost.NetApi.Generated.Model.primitive_types.U256)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VeMinting", "Locked"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(Bifrost.NetApi.Generated.Model.bifrost_ve_minting.LockedBalance)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VeMinting", "UserLocked"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VeMinting", "PointHistory"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Bifrost.NetApi.Generated.Model.primitive_types.U256), typeof(Bifrost.NetApi.Generated.Model.bifrost_ve_minting.Point)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VeMinting", "UserPointHistory"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Bifrost.NetApi.Generated.Model.primitive_types.U256>), typeof(Bifrost.NetApi.Generated.Model.bifrost_ve_minting.Point)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VeMinting", "UserPointEpoch"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(Bifrost.NetApi.Generated.Model.primitive_types.U256)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VeMinting", "SlopeChanges"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Primitive.I128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VeMinting", "IncentiveConfigs"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Bifrost.NetApi.Generated.Model.bifrost_ve_minting.incentive.IncentiveConfig)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VeMinting", "UserRewardPerTokenPaid"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Bifrost.NetApi.Generated.Types.Base.BTreeMapT5)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VeMinting", "Rewards"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Bifrost.NetApi.Generated.Types.Base.BTreeMapT5)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VeMinting", "UserMarkupInfos"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Bifrost.NetApi.Generated.Model.bifrost_ve_minting.traits.UserMarkupInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VeMinting", "LockedTokens"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32>), typeof(Bifrost.NetApi.Generated.Model.bifrost_ve_minting.traits.LockedToken)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VeMinting", "TotalLock"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VeMinting", "MarkupCoefficient"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Bifrost.NetApi.Generated.Model.bifrost_ve_minting.traits.MarkupCoefficientInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VeMinting", "Position"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VeMinting", "UserPositions"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT53)));
        }
        
        /// <summary>
        /// >> SupplyParams
        /// </summary>
        public static string SupplyParams()
        {
            return RequestGenerator.GetStorage("VeMinting", "Supply", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> SupplyDefault
        /// Default value as hex string
        /// </summary>
        public static string SupplyDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> Supply
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> Supply(string blockhash, CancellationToken token)
        {
            string parameters = VeMintingStorage.SupplyParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> VeConfigsParams
        /// </summary>
        public static string VeConfigsParams()
        {
            return RequestGenerator.GetStorage("VeMinting", "VeConfigs", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> VeConfigsDefault
        /// Default value as hex string
        /// </summary>
        public static string VeConfigsDefault()
        {
            return "0x000000000000000000000000000000000000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> VeConfigs
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bifrost_ve_minting.VeConfig> VeConfigs(string blockhash, CancellationToken token)
        {
            string parameters = VeMintingStorage.VeConfigsParams();
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bifrost_ve_minting.VeConfig>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> EpochParams
        /// </summary>
        public static string EpochParams()
        {
            return RequestGenerator.GetStorage("VeMinting", "Epoch", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> EpochDefault
        /// Default value as hex string
        /// </summary>
        public static string EpochDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> Epoch
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.primitive_types.U256> Epoch(string blockhash, CancellationToken token)
        {
            string parameters = VeMintingStorage.EpochParams();
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.primitive_types.U256>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LockedParams
        /// </summary>
        public static string LockedParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("VeMinting", "Locked", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> LockedDefault
        /// Default value as hex string
        /// </summary>
        public static string LockedDefault()
        {
            return "0x0000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> Locked
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bifrost_ve_minting.LockedBalance> Locked(Substrate.NetApi.Model.Types.Primitive.U128 key, string blockhash, CancellationToken token)
        {
            string parameters = VeMintingStorage.LockedParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bifrost_ve_minting.LockedBalance>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UserLockedParams
        /// </summary>
        public static string UserLockedParams(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("VeMinting", "UserLocked", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UserLockedDefault
        /// Default value as hex string
        /// </summary>
        public static string UserLockedDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> UserLocked
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> UserLocked(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = VeMintingStorage.UserLockedParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PointHistoryParams
        /// </summary>
        public static string PointHistoryParams(Bifrost.NetApi.Generated.Model.primitive_types.U256 key)
        {
            return RequestGenerator.GetStorage("VeMinting", "PointHistory", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PointHistoryDefault
        /// Default value as hex string
        /// </summary>
        public static string PointHistoryDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "0000000000000000000000000";
        }
        
        /// <summary>
        /// >> PointHistory
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bifrost_ve_minting.Point> PointHistory(Bifrost.NetApi.Generated.Model.primitive_types.U256 key, string blockhash, CancellationToken token)
        {
            string parameters = VeMintingStorage.PointHistoryParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bifrost_ve_minting.Point>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UserPointHistoryParams
        /// </summary>
        public static string UserPointHistoryParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Bifrost.NetApi.Generated.Model.primitive_types.U256> key)
        {
            return RequestGenerator.GetStorage("VeMinting", "UserPointHistory", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> UserPointHistoryDefault
        /// Default value as hex string
        /// </summary>
        public static string UserPointHistoryDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "0000000000000000000000000";
        }
        
        /// <summary>
        /// >> UserPointHistory
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bifrost_ve_minting.Point> UserPointHistory(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Bifrost.NetApi.Generated.Model.primitive_types.U256> key, string blockhash, CancellationToken token)
        {
            string parameters = VeMintingStorage.UserPointHistoryParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bifrost_ve_minting.Point>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UserPointEpochParams
        /// </summary>
        public static string UserPointEpochParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("VeMinting", "UserPointEpoch", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UserPointEpochDefault
        /// Default value as hex string
        /// </summary>
        public static string UserPointEpochDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> UserPointEpoch
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.primitive_types.U256> UserPointEpoch(Substrate.NetApi.Model.Types.Primitive.U128 key, string blockhash, CancellationToken token)
        {
            string parameters = VeMintingStorage.UserPointEpochParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.primitive_types.U256>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SlopeChangesParams
        /// </summary>
        public static string SlopeChangesParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("VeMinting", "SlopeChanges", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SlopeChangesDefault
        /// Default value as hex string
        /// </summary>
        public static string SlopeChangesDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> SlopeChanges
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.I128> SlopeChanges(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = VeMintingStorage.SlopeChangesParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.I128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> IncentiveConfigsParams
        /// </summary>
        public static string IncentiveConfigsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("VeMinting", "IncentiveConfigs", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> IncentiveConfigsDefault
        /// Default value as hex string
        /// </summary>
        public static string IncentiveConfigsDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> IncentiveConfigs
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bifrost_ve_minting.incentive.IncentiveConfig> IncentiveConfigs(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = VeMintingStorage.IncentiveConfigsParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bifrost_ve_minting.incentive.IncentiveConfig>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UserRewardPerTokenPaidParams
        /// </summary>
        public static string UserRewardPerTokenPaidParams(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("VeMinting", "UserRewardPerTokenPaid", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UserRewardPerTokenPaidDefault
        /// Default value as hex string
        /// </summary>
        public static string UserRewardPerTokenPaidDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> UserRewardPerTokenPaid
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Types.Base.BTreeMapT5> UserRewardPerTokenPaid(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = VeMintingStorage.UserRewardPerTokenPaidParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Types.Base.BTreeMapT5>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RewardsParams
        /// </summary>
        public static string RewardsParams(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("VeMinting", "Rewards", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RewardsDefault
        /// Default value as hex string
        /// </summary>
        public static string RewardsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Rewards
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Types.Base.BTreeMapT5> Rewards(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = VeMintingStorage.RewardsParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Types.Base.BTreeMapT5>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UserMarkupInfosParams
        /// </summary>
        public static string UserMarkupInfosParams(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("VeMinting", "UserMarkupInfos", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UserMarkupInfosDefault
        /// Default value as hex string
        /// </summary>
        public static string UserMarkupInfosDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> UserMarkupInfos
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bifrost_ve_minting.traits.UserMarkupInfo> UserMarkupInfos(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = VeMintingStorage.UserMarkupInfosParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bifrost_ve_minting.traits.UserMarkupInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LockedTokensParams
        /// </summary>
        public static string LockedTokensParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("VeMinting", "LockedTokens", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> LockedTokensDefault
        /// Default value as hex string
        /// </summary>
        public static string LockedTokensDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> LockedTokens
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bifrost_ve_minting.traits.LockedToken> LockedTokens(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = VeMintingStorage.LockedTokensParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bifrost_ve_minting.traits.LockedToken>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TotalLockParams
        /// </summary>
        public static string TotalLockParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("VeMinting", "TotalLock", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> TotalLockDefault
        /// Default value as hex string
        /// </summary>
        public static string TotalLockDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> TotalLock
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> TotalLock(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = VeMintingStorage.TotalLockParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MarkupCoefficientParams
        /// </summary>
        public static string MarkupCoefficientParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("VeMinting", "MarkupCoefficient", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MarkupCoefficientDefault
        /// Default value as hex string
        /// </summary>
        public static string MarkupCoefficientDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MarkupCoefficient
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bifrost_ve_minting.traits.MarkupCoefficientInfo> MarkupCoefficient(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = VeMintingStorage.MarkupCoefficientParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bifrost_ve_minting.traits.MarkupCoefficientInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PositionParams
        /// </summary>
        public static string PositionParams()
        {
            return RequestGenerator.GetStorage("VeMinting", "Position", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> PositionDefault
        /// Default value as hex string
        /// </summary>
        public static string PositionDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> Position
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> Position(string blockhash, CancellationToken token)
        {
            string parameters = VeMintingStorage.PositionParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UserPositionsParams
        /// </summary>
        public static string UserPositionsParams(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("VeMinting", "UserPositions", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UserPositionsDefault
        /// Default value as hex string
        /// </summary>
        public static string UserPositionsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> UserPositions
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT53> UserPositions(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = VeMintingStorage.UserPositionsParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT53>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> VeMintingCalls
    /// </summary>
    public sealed class VeMintingCalls
    {
        
        /// <summary>
        /// >> set_config
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetConfig(Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> min_mint, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> min_block)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(min_mint.Encode());
            byteArray.AddRange(min_block.Encode());
            return new Method(124, "VeMinting", 0, "set_config", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> create_lock
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CreateLock(Substrate.NetApi.Model.Types.Primitive.U128 value, Substrate.NetApi.Model.Types.Primitive.U32 unlock_time)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(value.Encode());
            byteArray.AddRange(unlock_time.Encode());
            return new Method(124, "VeMinting", 1, "create_lock", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> increase_amount
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method IncreaseAmount(Substrate.NetApi.Model.Types.Primitive.U128 position, Substrate.NetApi.Model.Types.Primitive.U128 value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(position.Encode());
            byteArray.AddRange(value.Encode());
            return new Method(124, "VeMinting", 2, "increase_amount", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> increase_unlock_time
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method IncreaseUnlockTime(Substrate.NetApi.Model.Types.Primitive.U128 position, Substrate.NetApi.Model.Types.Primitive.U32 time)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(position.Encode());
            byteArray.AddRange(time.Encode());
            return new Method(124, "VeMinting", 3, "increase_unlock_time", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> withdraw
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Withdraw(Substrate.NetApi.Model.Types.Primitive.U128 position)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(position.Encode());
            return new Method(124, "VeMinting", 4, "withdraw", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> notify_rewards
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method NotifyRewards(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 incentive_from, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> rewards_duration, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U128>> rewards)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(incentive_from.Encode());
            byteArray.AddRange(rewards_duration.Encode());
            byteArray.AddRange(rewards.Encode());
            return new Method(124, "VeMinting", 5, "notify_rewards", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> get_rewards
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method GetRewards()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(124, "VeMinting", 6, "get_rewards", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> redeem_unlock
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RedeemUnlock(Substrate.NetApi.Model.Types.Primitive.U128 position)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(position.Encode());
            return new Method(124, "VeMinting", 7, "redeem_unlock", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_markup_coefficient
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetMarkupCoefficient(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId asset_id, Bifrost.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128 markup, Bifrost.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128 hardcap)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(markup.Encode());
            byteArray.AddRange(hardcap.Encode());
            return new Method(124, "VeMinting", 8, "set_markup_coefficient", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> deposit_markup
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method DepositMarkup(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId asset_id, Substrate.NetApi.Model.Types.Primitive.U128 value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(value.Encode());
            return new Method(124, "VeMinting", 9, "deposit_markup", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> withdraw_markup
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method WithdrawMarkup(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId asset_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            return new Method(124, "VeMinting", 10, "withdraw_markup", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> refresh
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Refresh(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId asset_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            return new Method(124, "VeMinting", 11, "refresh", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> VeMintingConstants
    /// </summary>
    public sealed class VeMintingConstants
    {
        
        /// <summary>
        /// >> TokenType
        /// </summary>
        public Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId TokenType()
        {
            var result = new Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId();
            result.Create("0x0101");
            return result;
        }
        
        /// <summary>
        /// >> VeMintingPalletId
        /// </summary>
        public Bifrost.NetApi.Generated.Model.frame_support.PalletId VeMintingPalletId()
        {
            var result = new Bifrost.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x62662F76656D6E74");
            return result;
        }
        
        /// <summary>
        /// >> IncentivePalletId
        /// </summary>
        public Bifrost.NetApi.Generated.Model.frame_support.PalletId IncentivePalletId()
        {
            var result = new Bifrost.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x62662F7665696374");
            return result;
        }
        
        /// <summary>
        /// >> Week
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 Week()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xE0C40000");
            return result;
        }
        
        /// <summary>
        /// >> MaxBlock
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxBlock()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x8066A000");
            return result;
        }
        
        /// <summary>
        /// >> Multiplier
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 Multiplier()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0010A5D4E80000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> VoteWeightMultiplier
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 VoteWeightMultiplier()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x01000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxPositions
        ///  The maximum number of positions that should exist on an account.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxPositions()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x0A000000");
            return result;
        }
        
        /// <summary>
        /// >> MarkupRefreshLimit
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MarkupRefreshLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> VeMintingErrors
    /// </summary>
    public enum VeMintingErrors
    {
        
        /// <summary>
        /// >> NotEnoughBalance
        /// </summary>
        NotEnoughBalance,
        
        /// <summary>
        /// >> Expired
        /// </summary>
        Expired,
        
        /// <summary>
        /// >> BelowMinimumMint
        /// </summary>
        BelowMinimumMint,
        
        /// <summary>
        /// >> LockNotExist
        /// </summary>
        LockNotExist,
        
        /// <summary>
        /// >> LockExist
        /// </summary>
        LockExist,
        
        /// <summary>
        /// >> NoRewards
        /// </summary>
        NoRewards,
        
        /// <summary>
        /// >> ArgumentsError
        /// </summary>
        ArgumentsError,
        
        /// <summary>
        /// >> ExceedsMaxPositions
        /// </summary>
        ExceedsMaxPositions,
        
        /// <summary>
        /// >> NoController
        /// </summary>
        NoController,
    }
}
