//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Bifrost.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> VtokenVotingStorage
    /// </summary>
    public sealed class VtokenVotingStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> VtokenVotingStorage Constructor
        /// </summary>
        public VtokenVotingStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenVoting", "ReferendumInfoFor"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32>), typeof(Bifrost.NetApi.Generated.Model.bifrost_vtoken_voting.vote.EnumReferendumInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenVoting", "VotingFor"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Bifrost.NetApi.Generated.Model.bifrost_vtoken_voting.vote.EnumVoting)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenVoting", "ClassLocksFor"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT61)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenVoting", "PendingReferendumInfo"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U64), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenVoting", "PendingRemoveDelegatorVote"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U64), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U16>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenVoting", "VoteLockingPeriod"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenVoting", "UndecidingTimeout"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenVoting", "Delegators"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT62)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenVoting", "VoteCapRatio"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Bifrost.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenVoting", "DelegatorVotes"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32>), typeof(Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT63)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenVoting", "PendingDelegatorVotes"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32>), typeof(Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT63)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenVoting", "ReferendumTimeout"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT64)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenVoting", "VoteDelegatorFor"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32>), typeof(Substrate.NetApi.Model.Types.Primitive.U16)));
        }
        
        /// <summary>
        /// >> ReferendumInfoForParams
        ///  Information concerning any given referendum.
        /// </summary>
        public static string ReferendumInfoForParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("VtokenVoting", "ReferendumInfoFor", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ReferendumInfoForDefault
        /// Default value as hex string
        /// </summary>
        public static string ReferendumInfoForDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ReferendumInfoFor
        ///  Information concerning any given referendum.
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bifrost_vtoken_voting.vote.EnumReferendumInfo> ReferendumInfoFor(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32> key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenVotingStorage.ReferendumInfoForParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bifrost_vtoken_voting.vote.EnumReferendumInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> VotingForParams
        ///  All voting for a particular voter in a particular voting class. We store the balance for the
        ///  number of votes that we have recorded.
        /// </summary>
        public static string VotingForParams(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("VtokenVoting", "VotingFor", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> VotingForDefault
        /// Default value as hex string
        /// </summary>
        public static string VotingForDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "00000000000000000000000000000";
        }
        
        /// <summary>
        /// >> VotingFor
        ///  All voting for a particular voter in a particular voting class. We store the balance for the
        ///  number of votes that we have recorded.
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bifrost_vtoken_voting.vote.EnumVoting> VotingFor(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenVotingStorage.VotingForParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bifrost_vtoken_voting.vote.EnumVoting>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ClassLocksForParams
        ///  The voting classes which have a non-zero lock requirement and the lock amounts which they
        ///  require. The actual amount locked on behalf of this pallet should always be the maximum of
        ///  this list.
        /// </summary>
        public static string ClassLocksForParams(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("VtokenVoting", "ClassLocksFor", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ClassLocksForDefault
        /// Default value as hex string
        /// </summary>
        public static string ClassLocksForDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ClassLocksFor
        ///  The voting classes which have a non-zero lock requirement and the lock amounts which they
        ///  require. The actual amount locked on behalf of this pallet should always be the maximum of
        ///  this list.
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT61> ClassLocksFor(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenVotingStorage.ClassLocksForParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT61>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PendingReferendumInfoParams
        /// </summary>
        public static string PendingReferendumInfoParams(Substrate.NetApi.Model.Types.Primitive.U64 key)
        {
            return RequestGenerator.GetStorage("VtokenVoting", "PendingReferendumInfo", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PendingReferendumInfoDefault
        /// Default value as hex string
        /// </summary>
        public static string PendingReferendumInfoDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PendingReferendumInfo
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32>> PendingReferendumInfo(Substrate.NetApi.Model.Types.Primitive.U64 key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenVotingStorage.PendingReferendumInfoParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PendingVotingInfoParams
        /// </summary>
        public static string PendingVotingInfoParams(Substrate.NetApi.Model.Types.Primitive.U64 key)
        {
            return RequestGenerator.GetStorage("VtokenVoting", "PendingVotingInfo", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PendingVotingInfoDefault
        /// Default value as hex string
        /// </summary>
        public static string PendingVotingInfoDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PendingRemoveDelegatorVoteParams
        /// </summary>
        public static string PendingRemoveDelegatorVoteParams(Substrate.NetApi.Model.Types.Primitive.U64 key)
        {
            return RequestGenerator.GetStorage("VtokenVoting", "PendingRemoveDelegatorVote", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PendingRemoveDelegatorVoteDefault
        /// Default value as hex string
        /// </summary>
        public static string PendingRemoveDelegatorVoteDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PendingRemoveDelegatorVote
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U16>> PendingRemoveDelegatorVote(Substrate.NetApi.Model.Types.Primitive.U64 key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenVotingStorage.PendingRemoveDelegatorVoteParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U16>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> VoteLockingPeriodParams
        /// </summary>
        public static string VoteLockingPeriodParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("VtokenVoting", "VoteLockingPeriod", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> VoteLockingPeriodDefault
        /// Default value as hex string
        /// </summary>
        public static string VoteLockingPeriodDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> VoteLockingPeriod
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> VoteLockingPeriod(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenVotingStorage.VoteLockingPeriodParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UndecidingTimeoutParams
        /// </summary>
        public static string UndecidingTimeoutParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("VtokenVoting", "UndecidingTimeout", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UndecidingTimeoutDefault
        /// Default value as hex string
        /// </summary>
        public static string UndecidingTimeoutDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> UndecidingTimeout
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> UndecidingTimeout(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenVotingStorage.UndecidingTimeoutParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DelegatorsParams
        /// </summary>
        public static string DelegatorsParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("VtokenVoting", "Delegators", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> DelegatorsDefault
        /// Default value as hex string
        /// </summary>
        public static string DelegatorsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Delegators
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT62> Delegators(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenVotingStorage.DelegatorsParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT62>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> VoteCapRatioParams
        /// </summary>
        public static string VoteCapRatioParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("VtokenVoting", "VoteCapRatio", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> VoteCapRatioDefault
        /// Default value as hex string
        /// </summary>
        public static string VoteCapRatioDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> VoteCapRatio
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill> VoteCapRatio(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenVotingStorage.VoteCapRatioParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DelegatorVotesParams
        /// </summary>
        public static string DelegatorVotesParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("VtokenVoting", "DelegatorVotes", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, key.Value);
        }
        
        /// <summary>
        /// >> DelegatorVotesDefault
        /// Default value as hex string
        /// </summary>
        public static string DelegatorVotesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> DelegatorVotes
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT63> DelegatorVotes(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32> key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenVotingStorage.DelegatorVotesParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT63>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PendingDelegatorVotesParams
        /// </summary>
        public static string PendingDelegatorVotesParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("VtokenVoting", "PendingDelegatorVotes", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, key.Value);
        }
        
        /// <summary>
        /// >> PendingDelegatorVotesDefault
        /// Default value as hex string
        /// </summary>
        public static string PendingDelegatorVotesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PendingDelegatorVotes
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT63> PendingDelegatorVotes(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32> key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenVotingStorage.PendingDelegatorVotesParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT63>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ReferendumTimeoutParams
        /// </summary>
        public static string ReferendumTimeoutParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("VtokenVoting", "ReferendumTimeout", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ReferendumTimeoutDefault
        /// Default value as hex string
        /// </summary>
        public static string ReferendumTimeoutDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ReferendumTimeout
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT64> ReferendumTimeout(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenVotingStorage.ReferendumTimeoutParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT64>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> VoteDelegatorForParams
        /// </summary>
        public static string VoteDelegatorForParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("VtokenVoting", "VoteDelegatorFor", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, key.Value);
        }
        
        /// <summary>
        /// >> VoteDelegatorForDefault
        /// Default value as hex string
        /// </summary>
        public static string VoteDelegatorForDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> VoteDelegatorFor
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U16> VoteDelegatorFor(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32> key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenVotingStorage.VoteDelegatorForParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U16>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> VtokenVotingCalls
    /// </summary>
    public sealed class VtokenVotingCalls
    {
        
        /// <summary>
        /// >> vote
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Vote(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId vtoken, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> poll_index, Bifrost.NetApi.Generated.Model.bifrost_vtoken_voting.vote.EnumAccountVote vtoken_vote)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(vtoken.Encode());
            byteArray.AddRange(poll_index.Encode());
            byteArray.AddRange(vtoken_vote.Encode());
            return new Method(130, "VtokenVoting", 0, "vote", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unlock
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Unlock(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId vtoken, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> poll_index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(vtoken.Encode());
            byteArray.AddRange(poll_index.Encode());
            return new Method(130, "VtokenVoting", 1, "unlock", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_delegator_vote
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveDelegatorVote(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId vtoken, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> poll_index, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U16> derivative_index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(vtoken.Encode());
            byteArray.AddRange(poll_index.Encode());
            byteArray.AddRange(derivative_index.Encode());
            return new Method(130, "VtokenVoting", 2, "remove_delegator_vote", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> kill_referendum
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method KillReferendum(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId vtoken, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> poll_index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(vtoken.Encode());
            byteArray.AddRange(poll_index.Encode());
            return new Method(130, "VtokenVoting", 3, "kill_referendum", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_delegator
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddDelegator(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId vtoken, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U16> derivative_index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(vtoken.Encode());
            byteArray.AddRange(derivative_index.Encode());
            return new Method(130, "VtokenVoting", 4, "add_delegator", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_referendum_status
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetReferendumStatus(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId vtoken, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> poll_index, Bifrost.NetApi.Generated.Model.bifrost_vtoken_voting.vote.EnumReferendumInfo info)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(vtoken.Encode());
            byteArray.AddRange(poll_index.Encode());
            byteArray.AddRange(info.Encode());
            return new Method(130, "VtokenVoting", 5, "set_referendum_status", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_vote_locking_period
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetVoteLockingPeriod(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId vtoken, Substrate.NetApi.Model.Types.Primitive.U32 locking_period)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(vtoken.Encode());
            byteArray.AddRange(locking_period.Encode());
            return new Method(130, "VtokenVoting", 6, "set_vote_locking_period", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_undeciding_timeout
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetUndecidingTimeout(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId vtoken, Substrate.NetApi.Model.Types.Primitive.U32 undeciding_timeout)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(vtoken.Encode());
            byteArray.AddRange(undeciding_timeout.Encode());
            return new Method(130, "VtokenVoting", 7, "set_undeciding_timeout", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> notify_vote
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method NotifyVote(Substrate.NetApi.Model.Types.Primitive.U64 query_id, Bifrost.NetApi.Generated.Model.staging_xcm.v4.EnumResponse response)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(query_id.Encode());
            byteArray.AddRange(response.Encode());
            return new Method(130, "VtokenVoting", 8, "notify_vote", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> notify_remove_delegator_vote
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method NotifyRemoveDelegatorVote(Substrate.NetApi.Model.Types.Primitive.U64 query_id, Bifrost.NetApi.Generated.Model.staging_xcm.v4.EnumResponse response)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(query_id.Encode());
            byteArray.AddRange(response.Encode());
            return new Method(130, "VtokenVoting", 10, "notify_remove_delegator_vote", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_vote_cap_ratio
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetVoteCapRatio(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId vtoken, Bifrost.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill vote_cap_ratio)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(vtoken.Encode());
            byteArray.AddRange(vote_cap_ratio.Encode());
            return new Method(130, "VtokenVoting", 11, "set_vote_cap_ratio", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> VtokenVotingConstants
    /// </summary>
    public sealed class VtokenVotingConstants
    {
        
        /// <summary>
        /// >> ParachainId
        /// </summary>
        public Bifrost.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id ParachainId()
        {
            var result = new Bifrost.NetApi.Generated.Model.polkadot_parachain_primitives.primitives.Id();
            result.Create("0xEE070000");
            return result;
        }
        
        /// <summary>
        /// >> MaxVotes
        ///  The maximum number of concurrent votes an account may have.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxVotes()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00010000");
            return result;
        }
        
        /// <summary>
        /// >> QueryTimeout
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 QueryTimeout()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
        
        /// <summary>
        /// >> ReferendumCheckInterval
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 ReferendumCheckInterval()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x2C010000");
            return result;
        }
    }
    
    /// <summary>
    /// >> VtokenVotingErrors
    /// </summary>
    public enum VtokenVotingErrors
    {
        
        /// <summary>
        /// >> XcmFailure
        /// XCM execution Failure
        /// </summary>
        XcmFailure,
        
        /// <summary>
        /// >> VTokenNotSupport
        /// The given currency is not supported.
        /// </summary>
        VTokenNotSupport,
        
        /// <summary>
        /// >> DerivativeIndexOccupied
        /// Derivative index occupied.
        /// </summary>
        DerivativeIndexOccupied,
        
        /// <summary>
        /// >> PendingVote
        /// Another vote is pending.
        /// </summary>
        PendingVote,
        
        /// <summary>
        /// >> PendingUpdateReferendumStatus
        /// Another update referendum status is pending.
        /// </summary>
        PendingUpdateReferendumStatus,
        
        /// <summary>
        /// >> NoData
        /// No data available in storage.
        /// </summary>
        NoData,
        
        /// <summary>
        /// >> NotOngoing
        /// Poll is not ongoing.
        /// </summary>
        NotOngoing,
        
        /// <summary>
        /// >> NotCompleted
        /// Poll is not completed.
        /// </summary>
        NotCompleted,
        
        /// <summary>
        /// >> NotKilled
        /// Poll is not killed.
        /// </summary>
        NotKilled,
        
        /// <summary>
        /// >> NotExpired
        /// Poll is not expired.
        /// </summary>
        NotExpired,
        
        /// <summary>
        /// >> NotVoter
        /// The given account did not vote on the poll.
        /// </summary>
        NotVoter,
        
        /// <summary>
        /// >> NoPermission
        /// The actor has no permission to conduct the action.
        /// </summary>
        NoPermission,
        
        /// <summary>
        /// >> NoPermissionYet
        /// The actor has no permission to conduct the action right now but will do in the future.
        /// </summary>
        NoPermissionYet,
        
        /// <summary>
        /// >> AlreadyDelegating
        /// The account is already delegating.
        /// </summary>
        AlreadyDelegating,
        
        /// <summary>
        /// >> InsufficientFunds
        /// Too high a balance was provided that the account cannot afford.
        /// </summary>
        InsufficientFunds,
        
        /// <summary>
        /// >> MaxVotesReached
        /// Maximum number of votes reached.
        /// </summary>
        MaxVotesReached,
        
        /// <summary>
        /// >> TooMany
        /// Maximum number of items reached.
        /// </summary>
        TooMany,
        
        /// <summary>
        /// >> NotStandardVote
        /// The given vote is not Standard vote.
        /// </summary>
        NotStandardVote,
        
        /// <summary>
        /// >> InvalidConviction
        /// The given conviction is not valid.
        /// </summary>
        InvalidConviction,
        
        /// <summary>
        /// >> OutOfRange
        /// The given value is out of range.
        /// </summary>
        OutOfRange,
    }
}
