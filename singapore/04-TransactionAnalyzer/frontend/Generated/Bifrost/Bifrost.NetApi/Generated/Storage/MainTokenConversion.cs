//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Bifrost.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> TokenConversionStorage
    /// </summary>
    public sealed class TokenConversionStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> TokenConversionStorage Constructor
        /// </summary>
        public TokenConversionStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("TokenConversion", "RelaychainLease"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("TokenConversion", "ExchangeRate"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.I32), typeof(Bifrost.NetApi.Generated.Model.bifrost_vstoken_conversion.primitives.VstokenConversionExchangeRate)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("TokenConversion", "ExchangeFee"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Bifrost.NetApi.Generated.Model.bifrost_vstoken_conversion.primitives.VstokenConversionExchangeFee)));
        }
        
        /// <summary>
        /// >> RelaychainLeaseParams
        /// </summary>
        public static string RelaychainLeaseParams()
        {
            return RequestGenerator.GetStorage("TokenConversion", "RelaychainLease", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> RelaychainLeaseDefault
        /// Default value as hex string
        /// </summary>
        public static string RelaychainLeaseDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> RelaychainLease
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> RelaychainLease(string blockhash, CancellationToken token)
        {
            string parameters = TokenConversionStorage.RelaychainLeaseParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ExchangeRateParams
        /// </summary>
        public static string ExchangeRateParams(Substrate.NetApi.Model.Types.Primitive.I32 key)
        {
            return RequestGenerator.GetStorage("TokenConversion", "ExchangeRate", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ExchangeRateDefault
        /// Default value as hex string
        /// </summary>
        public static string ExchangeRateDefault()
        {
            return "0x0000";
        }
        
        /// <summary>
        /// >> ExchangeRate
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bifrost_vstoken_conversion.primitives.VstokenConversionExchangeRate> ExchangeRate(Substrate.NetApi.Model.Types.Primitive.I32 key, string blockhash, CancellationToken token)
        {
            string parameters = TokenConversionStorage.ExchangeRateParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bifrost_vstoken_conversion.primitives.VstokenConversionExchangeRate>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ExchangeFeeParams
        ///  exchange fee
        /// </summary>
        public static string ExchangeFeeParams()
        {
            return RequestGenerator.GetStorage("TokenConversion", "ExchangeFee", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ExchangeFeeDefault
        /// Default value as hex string
        /// </summary>
        public static string ExchangeFeeDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> ExchangeFee
        ///  exchange fee
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bifrost_vstoken_conversion.primitives.VstokenConversionExchangeFee> ExchangeFee(string blockhash, CancellationToken token)
        {
            string parameters = TokenConversionStorage.ExchangeFeeParams();
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bifrost_vstoken_conversion.primitives.VstokenConversionExchangeFee>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> TokenConversionCalls
    /// </summary>
    public sealed class TokenConversionCalls
    {
        
        /// <summary>
        /// >> vsbond_convert_to_vstoken
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method VsbondConvertToVstoken(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId vs_bond_currency_id, Substrate.NetApi.Model.Types.Primitive.U128 vsbond_amount, Substrate.NetApi.Model.Types.Primitive.U128 minimum_vstoken)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(vs_bond_currency_id.Encode());
            byteArray.AddRange(vsbond_amount.Encode());
            byteArray.AddRange(minimum_vstoken.Encode());
            return new Method(118, "TokenConversion", 0, "vsbond_convert_to_vstoken", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> vstoken_convert_to_vsbond
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method VstokenConvertToVsbond(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Primitive.U128 vstoken_amount, Substrate.NetApi.Model.Types.Primitive.U128 minimum_vsbond)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(vstoken_amount.Encode());
            byteArray.AddRange(minimum_vsbond.Encode());
            return new Method(118, "TokenConversion", 1, "vstoken_convert_to_vsbond", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_exchange_fee
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetExchangeFee(Bifrost.NetApi.Generated.Model.bifrost_vstoken_conversion.primitives.VstokenConversionExchangeFee exchange_fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(exchange_fee.Encode());
            return new Method(118, "TokenConversion", 2, "set_exchange_fee", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_exchange_rate
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetExchangeRate(Substrate.NetApi.Model.Types.Primitive.I32 lease, Bifrost.NetApi.Generated.Model.bifrost_vstoken_conversion.primitives.VstokenConversionExchangeRate exchange_rate)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(lease.Encode());
            byteArray.AddRange(exchange_rate.Encode());
            return new Method(118, "TokenConversion", 3, "set_exchange_rate", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_relaychain_lease
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetRelaychainLease(Substrate.NetApi.Model.Types.Primitive.U32 lease)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(lease.Encode());
            return new Method(118, "TokenConversion", 4, "set_relaychain_lease", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> TokenConversionConstants
    /// </summary>
    public sealed class TokenConversionConstants
    {
        
        /// <summary>
        /// >> RelayCurrencyId
        /// </summary>
        public Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId RelayCurrencyId()
        {
            var result = new Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId();
            result.Create("0x0800");
            return result;
        }
        
        /// <summary>
        /// >> TreasuryAccount
        /// </summary>
        public Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 TreasuryAccount()
        {
            var result = new Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32();
            result.Create("0x6D6F646C62662F74727372790000000000000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> VsbondAccount
        /// </summary>
        public Bifrost.NetApi.Generated.Model.frame_support.PalletId VsbondAccount()
        {
            var result = new Bifrost.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x62662F73616C7062");
            return result;
        }
    }
    
    /// <summary>
    /// >> TokenConversionErrors
    /// </summary>
    public enum TokenConversionErrors
    {
        
        /// <summary>
        /// >> NotEnoughBalance
        /// </summary>
        NotEnoughBalance,
        
        /// <summary>
        /// >> NotSupportTokenType
        /// </summary>
        NotSupportTokenType,
        
        /// <summary>
        /// >> CalculationOverflow
        /// </summary>
        CalculationOverflow,
    }
}
