//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Bifrost.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> SystemMakerStorage
    /// </summary>
    public sealed class SystemMakerStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> SystemMakerStorage Constructor
        /// </summary>
        public SystemMakerStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("SystemMaker", "Infos"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Bifrost.NetApi.Generated.Model.bifrost_system_maker.pallet.Info)));
        }
        
        /// <summary>
        /// >> InfosParams
        /// </summary>
        public static string InfosParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("SystemMaker", "Infos", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> InfosDefault
        /// Default value as hex string
        /// </summary>
        public static string InfosDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Infos
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bifrost_system_maker.pallet.Info> Infos(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = SystemMakerStorage.InfosParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bifrost_system_maker.pallet.Info>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> SystemMakerCalls
    /// </summary>
    public sealed class SystemMakerCalls
    {
        
        /// <summary>
        /// >> set_config
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetConfig(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Bifrost.NetApi.Generated.Model.bifrost_system_maker.pallet.Info info)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(info.Encode());
            return new Method(121, "SystemMaker", 0, "set_config", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> charge
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Charge(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Primitive.U128 value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(value.Encode());
            return new Method(121, "SystemMaker", 1, "charge", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> close
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Close(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            return new Method(121, "SystemMaker", 2, "close", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> payout
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Payout(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Primitive.U128 value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(value.Encode());
            return new Method(121, "SystemMaker", 3, "payout", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> SystemMakerConstants
    /// </summary>
    public sealed class SystemMakerConstants
    {
        
        /// <summary>
        /// >> TreasuryAccount
        /// </summary>
        public Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 TreasuryAccount()
        {
            var result = new Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32();
            result.Create("0x6D6F646C62662F74727372790000000000000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> RelayChainToken
        /// </summary>
        public Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId RelayChainToken()
        {
            var result = new Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId();
            result.Create("0x0800");
            return result;
        }
        
        /// <summary>
        /// >> SystemMakerPalletId
        /// </summary>
        public Bifrost.NetApi.Generated.Model.frame_support.PalletId SystemMakerPalletId()
        {
            var result = new Bifrost.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x62662F7379736D6B");
            return result;
        }
    }
    
    /// <summary>
    /// >> SystemMakerErrors
    /// </summary>
    public enum SystemMakerErrors
    {
        
        /// <summary>
        /// >> NotEnoughBalance
        /// </summary>
        NotEnoughBalance,
        
        /// <summary>
        /// >> NotSupportTokenType
        /// </summary>
        NotSupportTokenType,
        
        /// <summary>
        /// >> CalculationOverflow
        /// </summary>
        CalculationOverflow,
    }
}
