//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Bifrost.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> PricesStorage
    /// </summary>
    public sealed class PricesStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> PricesStorage Constructor
        /// </summary>
        public PricesStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Prices", "EmergencyPrice"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Bifrost.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Prices", "ForeignToNativeAsset"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId)));
        }
        
        /// <summary>
        /// >> EmergencyPriceParams
        ///  Mapping from currency id to it's emergency price
        /// </summary>
        public static string EmergencyPriceParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("Prices", "EmergencyPrice", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> EmergencyPriceDefault
        /// Default value as hex string
        /// </summary>
        public static string EmergencyPriceDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> EmergencyPrice
        ///  Mapping from currency id to it's emergency price
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128> EmergencyPrice(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = PricesStorage.EmergencyPriceParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ForeignToNativeAssetParams
        ///  Mapping from foreign vault token to our's vault token
        /// </summary>
        public static string ForeignToNativeAssetParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("Prices", "ForeignToNativeAsset", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ForeignToNativeAssetDefault
        /// Default value as hex string
        /// </summary>
        public static string ForeignToNativeAssetDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ForeignToNativeAsset
        ///  Mapping from foreign vault token to our's vault token
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> ForeignToNativeAsset(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = PricesStorage.ForeignToNativeAssetParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> PricesCalls
    /// </summary>
    public sealed class PricesCalls
    {
        
        /// <summary>
        /// >> set_price
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetPrice(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId asset_id, Bifrost.NetApi.Generated.Model.sp_arithmetic.fixed_point.FixedU128 price)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(price.Encode());
            return new Method(132, "Prices", 0, "set_price", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> reset_price
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ResetPrice(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId asset_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            return new Method(132, "Prices", 1, "reset_price", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_foreign_asset
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetForeignAsset(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId foreign_asset_id, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId asset_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(foreign_asset_id.Encode());
            byteArray.AddRange(asset_id.Encode());
            return new Method(132, "Prices", 2, "set_foreign_asset", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> PricesConstants
    /// </summary>
    public sealed class PricesConstants
    {
        
        /// <summary>
        /// >> RelayCurrency
        ///  Relay currency
        /// </summary>
        public Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId RelayCurrency()
        {
            var result = new Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId();
            result.Create("0x0800");
            return result;
        }
    }
}
