//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Bifrost.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> CurrenciesStorage
    /// </summary>
    public sealed class CurrenciesStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> CurrenciesStorage Constructor
        /// </summary>
        public CurrenciesStorage(SubstrateClientExt client)
        {
            this._client = client;
        }
    }
    
    /// <summary>
    /// >> CurrenciesCalls
    /// </summary>
    public sealed class CurrenciesCalls
    {
        
        /// <summary>
        /// >> transfer
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Transfer(Bifrost.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress dest, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(dest.Encode());
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(72, "Currencies", 0, "transfer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> transfer_native_currency
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method TransferNativeCurrency(Bifrost.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress dest, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(dest.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(72, "Currencies", 1, "transfer_native_currency", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_balance
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateBalance(Bifrost.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress who, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id, Substrate.NetApi.Model.Types.Primitive.I128 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(72, "Currencies", 2, "update_balance", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> CurrenciesConstants
    /// </summary>
    public sealed class CurrenciesConstants
    {
        
        /// <summary>
        /// >> GetNativeCurrencyId
        /// </summary>
        public Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId GetNativeCurrencyId()
        {
            var result = new Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId();
            result.Create("0x0001");
            return result;
        }
    }
    
    /// <summary>
    /// >> CurrenciesErrors
    /// </summary>
    public enum CurrenciesErrors
    {
        
        /// <summary>
        /// >> AmountIntoBalanceFailed
        /// Unable to convert the Amount type into Balance.
        /// </summary>
        AmountIntoBalanceFailed,
        
        /// <summary>
        /// >> BalanceTooLow
        /// Balance is too low.
        /// </summary>
        BalanceTooLow,
        
        /// <summary>
        /// >> DepositFailed
        /// Deposit result is not expected
        /// </summary>
        DepositFailed,
    }
}
