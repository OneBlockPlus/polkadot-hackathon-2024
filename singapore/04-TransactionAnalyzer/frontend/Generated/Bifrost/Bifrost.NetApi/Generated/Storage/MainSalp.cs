//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Bifrost.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> SalpStorage
    /// </summary>
    public sealed class SalpStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> SalpStorage Constructor
        /// </summary>
        public SalpStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Salp", "MultisigConfirmAccount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Salp", "CurrentTrieIndex"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Salp", "CurrentNonce"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Salp", "QueryIdContributionInfo"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U64), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Salp", "Funds"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.bifrost_salp.FundInfo>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Salp", "RedeemPool"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Salp", "FailedFundsToRefund"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>), typeof(Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.bifrost_salp.FundInfo>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Salp", "ReserveInfos"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32>), typeof(Bifrost.NetApi.Generated.Model.bifrost_salp.ReserveInfo)));
        }
        
        /// <summary>
        /// >> MultisigConfirmAccountParams
        ///  Multisig confirm account
        /// </summary>
        public static string MultisigConfirmAccountParams()
        {
            return RequestGenerator.GetStorage("Salp", "MultisigConfirmAccount", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> MultisigConfirmAccountDefault
        /// Default value as hex string
        /// </summary>
        public static string MultisigConfirmAccountDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MultisigConfirmAccount
        ///  Multisig confirm account
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32> MultisigConfirmAccount(string blockhash, CancellationToken token)
        {
            string parameters = SalpStorage.MultisigConfirmAccountParams();
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CurrentTrieIndexParams
        ///  Tracker for the next available fund index
        /// </summary>
        public static string CurrentTrieIndexParams()
        {
            return RequestGenerator.GetStorage("Salp", "CurrentTrieIndex", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CurrentTrieIndexDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrentTrieIndexDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> CurrentTrieIndex
        ///  Tracker for the next available fund index
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CurrentTrieIndex(string blockhash, CancellationToken token)
        {
            string parameters = SalpStorage.CurrentTrieIndexParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CurrentNonceParams
        ///  Tracker for the next nonce index
        /// </summary>
        public static string CurrentNonceParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Salp", "CurrentNonce", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CurrentNonceDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrentNonceDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> CurrentNonce
        ///  Tracker for the next nonce index
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CurrentNonce(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = SalpStorage.CurrentNonceParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> QueryIdContributionInfoParams
        ///  Record contribution
        /// </summary>
        public static string QueryIdContributionInfoParams(Substrate.NetApi.Model.Types.Primitive.U64 key)
        {
            return RequestGenerator.GetStorage("Salp", "QueryIdContributionInfo", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> QueryIdContributionInfoDefault
        /// Default value as hex string
        /// </summary>
        public static string QueryIdContributionInfoDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> QueryIdContributionInfo
        ///  Record contribution
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128>> QueryIdContributionInfo(Substrate.NetApi.Model.Types.Primitive.U64 key, string blockhash, CancellationToken token)
        {
            string parameters = SalpStorage.QueryIdContributionInfoParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> FundsParams
        ///  Info on all of the funds.
        /// </summary>
        public static string FundsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Salp", "Funds", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> FundsDefault
        /// Default value as hex string
        /// </summary>
        public static string FundsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Funds
        ///  Info on all of the funds.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.bifrost_salp.FundInfo>> Funds(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = SalpStorage.FundsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.bifrost_salp.FundInfo>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RedeemPoolParams
        ///  The balance can be redeemed to users.
        /// </summary>
        public static string RedeemPoolParams()
        {
            return RequestGenerator.GetStorage("Salp", "RedeemPool", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> RedeemPoolDefault
        /// Default value as hex string
        /// </summary>
        public static string RedeemPoolDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> RedeemPool
        ///  The balance can be redeemed to users.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> RedeemPool(string blockhash, CancellationToken token)
        {
            string parameters = SalpStorage.RedeemPoolParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> FailedFundsToRefundParams
        /// </summary>
        public static string FailedFundsToRefundParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("Salp", "FailedFundsToRefund", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> FailedFundsToRefundDefault
        /// Default value as hex string
        /// </summary>
        public static string FailedFundsToRefundDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> FailedFundsToRefund
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.bifrost_salp.FundInfo>> FailedFundsToRefund(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> key, string blockhash, CancellationToken token)
        {
            string parameters = SalpStorage.FailedFundsToRefundParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.bifrost_salp.FundInfo>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ReserveInfosParams
        /// </summary>
        public static string ReserveInfosParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("Salp", "ReserveInfos", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ReserveInfosDefault
        /// Default value as hex string
        /// </summary>
        public static string ReserveInfosDefault()
        {
            return "0x0000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> ReserveInfos
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bifrost_salp.ReserveInfo> ReserveInfos(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = SalpStorage.ReserveInfosParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bifrost_salp.ReserveInfo>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> SalpCalls
    /// </summary>
    public sealed class SalpCalls
    {
        
        /// <summary>
        /// >> set_multisig_confirm_account
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetMultisigConfirmAccount(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 account)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(account.Encode());
            return new Method(105, "Salp", 0, "set_multisig_confirm_account", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> fund_success
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method FundSuccess(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(index.Encode());
            return new Method(105, "Salp", 1, "fund_success", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> fund_fail
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method FundFail(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(index.Encode());
            return new Method(105, "Salp", 2, "fund_fail", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> continue_fund
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ContinueFund(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> index, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> first_slot, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> last_slot)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(index.Encode());
            byteArray.AddRange(first_slot.Encode());
            byteArray.AddRange(last_slot.Encode());
            return new Method(105, "Salp", 3, "continue_fund", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> fund_retire
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method FundRetire(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(index.Encode());
            return new Method(105, "Salp", 4, "fund_retire", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> fund_end
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method FundEnd(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(index.Encode());
            return new Method(105, "Salp", 5, "fund_end", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> create
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Create(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> index, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> cap, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> first_slot, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> last_slot)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(index.Encode());
            byteArray.AddRange(cap.Encode());
            byteArray.AddRange(first_slot.Encode());
            byteArray.AddRange(last_slot.Encode());
            return new Method(105, "Salp", 6, "create", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> edit
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Edit(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> index, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> cap, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> raised, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> first_slot, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> last_slot, Substrate.NetApi.Model.Types.Base.BaseOpt<Bifrost.NetApi.Generated.Model.bifrost_salp.EnumFundStatus> fund_status)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(index.Encode());
            byteArray.AddRange(cap.Encode());
            byteArray.AddRange(raised.Encode());
            byteArray.AddRange(first_slot.Encode());
            byteArray.AddRange(last_slot.Encode());
            byteArray.AddRange(fund_status.Encode());
            return new Method(105, "Salp", 7, "edit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> contribute
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Contribute(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> index, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(index.Encode());
            byteArray.AddRange(value.Encode());
            return new Method(105, "Salp", 8, "contribute", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> confirm_contribute
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ConfirmContribute(Substrate.NetApi.Model.Types.Primitive.U64 query_id, Substrate.NetApi.Model.Types.Primitive.Bool is_success)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(query_id.Encode());
            byteArray.AddRange(is_success.Encode());
            return new Method(105, "Salp", 9, "confirm_contribute", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unlock
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Unlock(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 who, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(index.Encode());
            return new Method(105, "Salp", 10, "unlock", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unlock_by_vsbond
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UnlockByVsbond(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 who, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId vsbond)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(vsbond.Encode());
            return new Method(105, "Salp", 11, "unlock_by_vsbond", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unlock_vstoken
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UnlockVstoken(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 who)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(who.Encode());
            return new Method(105, "Salp", 12, "unlock_vstoken", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> batch_unlock
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method BatchUnlock(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(index.Encode());
            return new Method(105, "Salp", 13, "batch_unlock", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> withdraw
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Withdraw(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(index.Encode());
            return new Method(105, "Salp", 14, "withdraw", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> refund
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Refund(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> index, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> first_slot, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> last_slot, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(index.Encode());
            byteArray.AddRange(first_slot.Encode());
            byteArray.AddRange(last_slot.Encode());
            byteArray.AddRange(value.Encode());
            return new Method(105, "Salp", 15, "refund", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> redeem
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Redeem(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> index, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(index.Encode());
            byteArray.AddRange(value.Encode());
            return new Method(105, "Salp", 16, "redeem", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> dissolve_refunded
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method DissolveRefunded(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> index, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> first_slot, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> last_slot)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(index.Encode());
            byteArray.AddRange(first_slot.Encode());
            byteArray.AddRange(last_slot.Encode());
            return new Method(105, "Salp", 17, "dissolve_refunded", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> dissolve
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Dissolve(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(index.Encode());
            return new Method(105, "Salp", 18, "dissolve", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> buyback
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Buyback(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(value.Encode());
            return new Method(105, "Salp", 19, "buyback", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> confirm_contribution
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ConfirmContribution(Substrate.NetApi.Model.Types.Primitive.U64 query_id, Bifrost.NetApi.Generated.Model.staging_xcm.v4.EnumResponse response)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(query_id.Encode());
            byteArray.AddRange(response.Encode());
            return new Method(105, "Salp", 20, "confirm_contribution", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> buyback_vstoken_by_stable_pool
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method BuybackVstokenByStablePool(Substrate.NetApi.Model.Types.Primitive.U32 pool_id, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId currency_id_in, Substrate.NetApi.Model.Types.Primitive.U128 value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(currency_id_in.Encode());
            byteArray.AddRange(value.Encode());
            return new Method(105, "Salp", 21, "buyback_vstoken_by_stable_pool", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> reserve
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Reserve(Substrate.NetApi.Model.Types.Primitive.U32 index, Substrate.NetApi.Model.Types.Primitive.U128 value, Substrate.NetApi.Model.Types.Primitive.Bool if_mint)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(index.Encode());
            byteArray.AddRange(value.Encode());
            byteArray.AddRange(if_mint.Encode());
            return new Method(105, "Salp", 22, "reserve", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> batch_handle_reserve
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method BatchHandleReserve(Substrate.NetApi.Model.Types.Primitive.U32 index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(index.Encode());
            return new Method(105, "Salp", 23, "batch_handle_reserve", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel_reservation
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CancelReservation(Substrate.NetApi.Model.Types.Primitive.U32 index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(index.Encode());
            return new Method(105, "Salp", 24, "cancel_reservation", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> SalpConstants
    /// </summary>
    public sealed class SalpConstants
    {
        
        /// <summary>
        /// >> PalletId
        ///  ModuleID for the crowdloan module. An appropriate value could be
        ///  ```ModuleId(*b"py/cfund")```
        /// </summary>
        public Bifrost.NetApi.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new Bifrost.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x62662F73616C7023");
            return result;
        }
        
        /// <summary>
        /// >> MinContribution
        ///  The minimum amount that may be contributed into a crowdloan. Should almost certainly be
        ///  at least ExistentialDeposit.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinContribution()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00743BA40B0000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> RelayChainToken
        /// </summary>
        public Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId RelayChainToken()
        {
            var result = new Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId();
            result.Create("0x0800");
            return result;
        }
        
        /// <summary>
        /// >> LeasePeriod
        ///  The number of blocks over which a single period lasts.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 LeasePeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x803A0900");
            return result;
        }
        
        /// <summary>
        /// >> VSBondValidPeriod
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 VSBondValidPeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xC04B0300");
            return result;
        }
        
        /// <summary>
        /// >> ReleaseCycle
        ///  The time interval from 1:1 redeem-pool to bancor-pool to release.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 ReleaseCycle()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x201C0000");
            return result;
        }
        
        /// <summary>
        /// >> ReleaseRatio
        ///  The release ratio from the 1:1 redeem-pool to the bancor-pool per cycle.
        /// 
        ///  **NOTE: THE RELEASE RATIO MUST BE IN [0, 1].**
        /// </summary>
        public Bifrost.NetApi.Generated.Model.sp_arithmetic.per_things.Percent ReleaseRatio()
        {
            var result = new Bifrost.NetApi.Generated.Model.sp_arithmetic.per_things.Percent();
            result.Create("0x32");
            return result;
        }
        
        /// <summary>
        /// >> RemoveKeysLimit
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 RemoveKeysLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xF4010000");
            return result;
        }
        
        /// <summary>
        /// >> SlotLength
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 SlotLength()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x08000000");
            return result;
        }
        
        /// <summary>
        /// >> TreasuryAccount
        /// </summary>
        public Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 TreasuryAccount()
        {
            var result = new Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32();
            result.Create("0x6D6F646C62662F74727372790000000000000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> BuybackPalletId
        /// </summary>
        public Bifrost.NetApi.Generated.Model.frame_support.PalletId BuybackPalletId()
        {
            var result = new Bifrost.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x62662F73616C7063");
            return result;
        }
        
        /// <summary>
        /// >> LockId
        /// </summary>
        public Bifrost.NetApi.Generated.Types.Base.Arr8U8 LockId()
        {
            var result = new Bifrost.NetApi.Generated.Types.Base.Arr8U8();
            result.Create("0x73616C706C6F636B");
            return result;
        }
        
        /// <summary>
        /// >> BatchLimit
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 BatchLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x32000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> SalpErrors
    /// </summary>
    public enum SalpErrors
    {
        
        /// <summary>
        /// >> FirstSlotTooFarInFuture
        /// The first slot needs to at least be less than 3 `max_value`.
        /// </summary>
        FirstSlotTooFarInFuture,
        
        /// <summary>
        /// >> LastSlotBeforeFirstSlot
        /// Last slot must be greater than first slot.
        /// </summary>
        LastSlotBeforeFirstSlot,
        
        /// <summary>
        /// >> LastSlotTooFarInFuture
        /// The last slot cannot be more then 3 slots after the first slot.
        /// </summary>
        LastSlotTooFarInFuture,
        
        /// <summary>
        /// >> Overflow
        /// There was an overflow.
        /// </summary>
        Overflow,
        
        /// <summary>
        /// >> ContributionTooSmall
        /// The contribution was below the minimum, `MinContribution`.
        /// </summary>
        ContributionTooSmall,
        
        /// <summary>
        /// >> ZeroContribution
        /// The account doesn't have any contribution to the fund.
        /// </summary>
        ZeroContribution,
        
        /// <summary>
        /// >> InvalidParaId
        /// Invalid fund index.
        /// </summary>
        InvalidParaId,
        
        /// <summary>
        /// >> InvalidFundStatus
        /// Invalid fund status.
        /// </summary>
        InvalidFundStatus,
        
        /// <summary>
        /// >> InvalidContributionStatus
        /// Invalid contribution status.
        /// </summary>
        InvalidContributionStatus,
        
        /// <summary>
        /// >> CapExceeded
        /// Contributions exceed maximum amount.
        /// </summary>
        CapExceeded,
        
        /// <summary>
        /// >> FundAlreadyCreated
        /// The fund has been registered.
        /// </summary>
        FundAlreadyCreated,
        
        /// <summary>
        /// >> XcmFailed
        /// Crosschain xcm failed
        /// </summary>
        XcmFailed,
        
        /// <summary>
        /// >> NotEnoughReservedAssetsToRefund
        /// Don't have enough vsToken/vsBond to refund
        /// </summary>
        NotEnoughReservedAssetsToRefund,
        
        /// <summary>
        /// >> NotEnoughBalanceInRefundPool
        /// Don't have enough token to refund by users
        /// </summary>
        NotEnoughBalanceInRefundPool,
        
        /// <summary>
        /// >> NotEnoughBalanceToUnlock
        /// Don't have enough vsToken/vsBond to unlock
        /// </summary>
        NotEnoughBalanceToUnlock,
        
        /// <summary>
        /// >> VSBondExpired
        /// The vsBond is expired now
        /// </summary>
        VSBondExpired,
        
        /// <summary>
        /// >> UnRedeemableNow
        /// The vsBond cannot be redeemed by now
        /// </summary>
        UnRedeemableNow,
        
        /// <summary>
        /// >> NotEnoughFreeAssetsToRedeem
        /// Dont have enough vsToken/vsBond to redeem
        /// </summary>
        NotEnoughFreeAssetsToRedeem,
        
        /// <summary>
        /// >> NotEnoughBalanceInRedeemPool
        /// Don't have enough token to redeem by users
        /// </summary>
        NotEnoughBalanceInRedeemPool,
        
        /// <summary>
        /// >> NotEnoughBalanceInFund
        /// </summary>
        NotEnoughBalanceInFund,
        
        /// <summary>
        /// >> InvalidFundSameSlot
        /// </summary>
        InvalidFundSameSlot,
        
        /// <summary>
        /// >> InvalidFundNotExist
        /// </summary>
        InvalidFundNotExist,
        
        /// <summary>
        /// >> InvalidRefund
        /// </summary>
        InvalidRefund,
        
        /// <summary>
        /// >> NotEnoughBalanceToContribute
        /// </summary>
        NotEnoughBalanceToContribute,
        
        /// <summary>
        /// >> NotSupportTokenType
        /// </summary>
        NotSupportTokenType,
        
        /// <summary>
        /// >> ResponderNotRelayChain
        /// Responder is not a relay chain
        /// </summary>
        ResponderNotRelayChain,
        
        /// <summary>
        /// >> NotFindContributionValue
        /// No contribution record found
        /// </summary>
        NotFindContributionValue,
        
        /// <summary>
        /// >> ArgumentsError
        /// </summary>
        ArgumentsError,
    }
}
