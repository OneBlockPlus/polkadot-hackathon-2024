//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Bifrost.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> OracleStorage
    /// </summary>
    public sealed class OracleStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> OracleStorage Constructor
        /// </summary>
        public OracleStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Oracle", "RawValues"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>), typeof(Bifrost.NetApi.Generated.Model.orml_oracle.module.TimestampedValue)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Oracle", "Values"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Bifrost.NetApi.Generated.Model.orml_oracle.module.TimestampedValue)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Oracle", "HasDispatched"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Bifrost.NetApi.Generated.Model.orml_utilities.ordered_set.OrderedSet)));
        }
        
        /// <summary>
        /// >> RawValuesParams
        ///  Raw values for each oracle operators
        /// </summary>
        public static string RawValuesParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> key)
        {
            return RequestGenerator.GetStorage("Oracle", "RawValues", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, key.Value);
        }
        
        /// <summary>
        /// >> RawValuesDefault
        /// Default value as hex string
        /// </summary>
        public static string RawValuesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> RawValues
        ///  Raw values for each oracle operators
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.orml_oracle.module.TimestampedValue> RawValues(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> key, string blockhash, CancellationToken token)
        {
            string parameters = OracleStorage.RawValuesParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.orml_oracle.module.TimestampedValue>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ValuesParams
        ///  Up to date combined value from Raw Values
        /// </summary>
        public static string ValuesParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("Oracle", "Values", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ValuesDefault
        /// Default value as hex string
        /// </summary>
        public static string ValuesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Values
        ///  Up to date combined value from Raw Values
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.orml_oracle.module.TimestampedValue> Values(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = OracleStorage.ValuesParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.orml_oracle.module.TimestampedValue>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> HasDispatchedParams
        ///  If an oracle operator has fed a value in this block
        /// </summary>
        public static string HasDispatchedParams()
        {
            return RequestGenerator.GetStorage("Oracle", "HasDispatched", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> HasDispatchedDefault
        /// Default value as hex string
        /// </summary>
        public static string HasDispatchedDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> HasDispatched
        ///  If an oracle operator has fed a value in this block
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.orml_utilities.ordered_set.OrderedSet> HasDispatched(string blockhash, CancellationToken token)
        {
            string parameters = OracleStorage.HasDispatchedParams();
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.orml_utilities.ordered_set.OrderedSet>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> OracleCalls
    /// </summary>
    public sealed class OracleCalls
    {
        
        /// <summary>
        /// >> feed_values
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method FeedValues(Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT9 values)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(values.Encode());
            return new Method(133, "Oracle", 0, "feed_values", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> OracleConstants
    /// </summary>
    public sealed class OracleConstants
    {
        
        /// <summary>
        /// >> RootOperatorAccountId
        ///  The root operator account id, record all sudo feeds on this account.
        /// </summary>
        public Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 RootOperatorAccountId()
        {
            var result = new Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32();
            result.Create("0x6D6F646C62662F6F7261636C0000000000000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxHasDispatchedSize
        ///  Maximum size of HasDispatched
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxHasDispatchedSize()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxFeedValues
        ///  Maximum size the vector used for feed values
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxFeedValues()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> OracleErrors
    /// </summary>
    public enum OracleErrors
    {
        
        /// <summary>
        /// >> NoPermission
        /// Sender does not have permission
        /// </summary>
        NoPermission,
        
        /// <summary>
        /// >> AlreadyFeeded
        /// Feeder has already feeded at this block
        /// </summary>
        AlreadyFeeded,
    }
}
