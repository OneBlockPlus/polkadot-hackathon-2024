//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Bifrost.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> VtokenMintingStorage
    /// </summary>
    public sealed class VtokenMintingStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> VtokenMintingStorage Constructor
        /// </summary>
        public VtokenMintingStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "Fees"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_arithmetic.per_things.Permill, Bifrost.NetApi.Generated.Model.sp_arithmetic.per_things.Permill>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "TokenPool"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "UnlockDuration"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumTimeUnit)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "OngoingTimeUnit"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumTimeUnit)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "MinimumMint"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "MinimumRedeem"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "TokenUnlockNextId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "TokenUnlockLedger"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128, Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumTimeUnit, Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumRedeemType>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "UserUnlockLedger"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT45>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "TimeUnitUnlockLedger"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumTimeUnit, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT46, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "TokenToRebond"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "MinTimeUnit"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumTimeUnit)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "UnlockingTotal"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "HookIterationLimit"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "MintWithLockBlocks"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "VtokenIncentiveCoef"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VtokenMinting", "VtokenLockLedger"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT47>)));
        }
        
        /// <summary>
        /// >> FeesParams
        /// </summary>
        public static string FeesParams()
        {
            return RequestGenerator.GetStorage("VtokenMinting", "Fees", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> FeesDefault
        /// Default value as hex string
        /// </summary>
        public static string FeesDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> Fees
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_arithmetic.per_things.Permill, Bifrost.NetApi.Generated.Model.sp_arithmetic.per_things.Permill>> Fees(string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.FeesParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_arithmetic.per_things.Permill, Bifrost.NetApi.Generated.Model.sp_arithmetic.per_things.Permill>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TokenPoolParams
        /// </summary>
        public static string TokenPoolParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "TokenPool", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> TokenPoolDefault
        /// Default value as hex string
        /// </summary>
        public static string TokenPoolDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> TokenPool
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> TokenPool(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.TokenPoolParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UnlockDurationParams
        /// </summary>
        public static string UnlockDurationParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "UnlockDuration", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UnlockDurationDefault
        /// Default value as hex string
        /// </summary>
        public static string UnlockDurationDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> UnlockDuration
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumTimeUnit> UnlockDuration(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.UnlockDurationParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumTimeUnit>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OngoingTimeUnitParams
        /// </summary>
        public static string OngoingTimeUnitParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "OngoingTimeUnit", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> OngoingTimeUnitDefault
        /// Default value as hex string
        /// </summary>
        public static string OngoingTimeUnitDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> OngoingTimeUnit
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumTimeUnit> OngoingTimeUnit(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.OngoingTimeUnitParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumTimeUnit>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MinimumMintParams
        /// </summary>
        public static string MinimumMintParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "MinimumMint", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MinimumMintDefault
        /// Default value as hex string
        /// </summary>
        public static string MinimumMintDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> MinimumMint
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> MinimumMint(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.MinimumMintParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MinimumRedeemParams
        /// </summary>
        public static string MinimumRedeemParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "MinimumRedeem", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MinimumRedeemDefault
        /// Default value as hex string
        /// </summary>
        public static string MinimumRedeemDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> MinimumRedeem
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> MinimumRedeem(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.MinimumRedeemParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TokenUnlockNextIdParams
        /// </summary>
        public static string TokenUnlockNextIdParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "TokenUnlockNextId", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> TokenUnlockNextIdDefault
        /// Default value as hex string
        /// </summary>
        public static string TokenUnlockNextIdDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> TokenUnlockNextId
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> TokenUnlockNextId(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.TokenUnlockNextIdParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TokenUnlockLedgerParams
        /// </summary>
        public static string TokenUnlockLedgerParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "TokenUnlockLedger", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> TokenUnlockLedgerDefault
        /// Default value as hex string
        /// </summary>
        public static string TokenUnlockLedgerDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> TokenUnlockLedger
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128, Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumTimeUnit, Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumRedeemType>> TokenUnlockLedger(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId, Substrate.NetApi.Model.Types.Primitive.U32> key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.TokenUnlockLedgerParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128, Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumTimeUnit, Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumRedeemType>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UserUnlockLedgerParams
        /// </summary>
        public static string UserUnlockLedgerParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "UserUnlockLedger", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> UserUnlockLedgerDefault
        /// Default value as hex string
        /// </summary>
        public static string UserUnlockLedgerDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> UserUnlockLedger
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT45>> UserUnlockLedger(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.UserUnlockLedgerParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT45>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TimeUnitUnlockLedgerParams
        /// </summary>
        public static string TimeUnitUnlockLedgerParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumTimeUnit, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "TimeUnitUnlockLedger", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> TimeUnitUnlockLedgerDefault
        /// Default value as hex string
        /// </summary>
        public static string TimeUnitUnlockLedgerDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> TimeUnitUnlockLedger
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT46, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>> TimeUnitUnlockLedger(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumTimeUnit, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.TimeUnitUnlockLedgerParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT46, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TokenToRebondParams
        /// </summary>
        public static string TokenToRebondParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "TokenToRebond", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> TokenToRebondDefault
        /// Default value as hex string
        /// </summary>
        public static string TokenToRebondDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> TokenToRebond
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> TokenToRebond(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.TokenToRebondParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MinTimeUnitParams
        /// </summary>
        public static string MinTimeUnitParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "MinTimeUnit", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MinTimeUnitDefault
        /// Default value as hex string
        /// </summary>
        public static string MinTimeUnitDefault()
        {
            return "0x0000";
        }
        
        /// <summary>
        /// >> MinTimeUnit
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumTimeUnit> MinTimeUnit(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.MinTimeUnitParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumTimeUnit>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UnlockingTotalParams
        /// </summary>
        public static string UnlockingTotalParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "UnlockingTotal", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UnlockingTotalDefault
        /// Default value as hex string
        /// </summary>
        public static string UnlockingTotalDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> UnlockingTotal
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> UnlockingTotal(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.UnlockingTotalParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> HookIterationLimitParams
        /// </summary>
        public static string HookIterationLimitParams()
        {
            return RequestGenerator.GetStorage("VtokenMinting", "HookIterationLimit", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> HookIterationLimitDefault
        /// Default value as hex string
        /// </summary>
        public static string HookIterationLimitDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> HookIterationLimit
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> HookIterationLimit(string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.HookIterationLimitParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MintWithLockBlocksParams
        /// </summary>
        public static string MintWithLockBlocksParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "MintWithLockBlocks", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MintWithLockBlocksDefault
        /// Default value as hex string
        /// </summary>
        public static string MintWithLockBlocksDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MintWithLockBlocks
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> MintWithLockBlocks(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.MintWithLockBlocksParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> VtokenIncentiveCoefParams
        /// </summary>
        public static string VtokenIncentiveCoefParams(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "VtokenIncentiveCoef", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> VtokenIncentiveCoefDefault
        /// Default value as hex string
        /// </summary>
        public static string VtokenIncentiveCoefDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> VtokenIncentiveCoef
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> VtokenIncentiveCoef(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.VtokenIncentiveCoefParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> VtokenLockLedgerParams
        /// </summary>
        public static string VtokenLockLedgerParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> key)
        {
            return RequestGenerator.GetStorage("VtokenMinting", "VtokenLockLedger", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> VtokenLockLedgerDefault
        /// Default value as hex string
        /// </summary>
        public static string VtokenLockLedgerDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> VtokenLockLedger
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT47>> VtokenLockLedger(Substrate.NetApi.Model.Types.Base.BaseTuple<Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32, Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId> key, string blockhash, CancellationToken token)
        {
            string parameters = VtokenMintingStorage.VtokenLockLedgerParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT47>>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> VtokenMintingCalls
    /// </summary>
    public sealed class VtokenMintingCalls
    {
        
        /// <summary>
        /// >> mint
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Mint(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId token_id, Substrate.NetApi.Model.Types.Primitive.U128 token_amount, Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT7 remark, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> channel_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(token_id.Encode());
            byteArray.AddRange(token_amount.Encode());
            byteArray.AddRange(remark.Encode());
            byteArray.AddRange(channel_id.Encode());
            return new Method(115, "VtokenMinting", 0, "mint", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> redeem
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Redeem(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId vtoken_id, Substrate.NetApi.Model.Types.Primitive.U128 vtoken_amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(vtoken_id.Encode());
            byteArray.AddRange(vtoken_amount.Encode());
            return new Method(115, "VtokenMinting", 1, "redeem", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> rebond
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Rebond(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId token_id, Substrate.NetApi.Model.Types.Primitive.U128 token_amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(token_id.Encode());
            byteArray.AddRange(token_amount.Encode());
            return new Method(115, "VtokenMinting", 2, "rebond", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> rebond_by_unlock_id
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RebondByUnlockId(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId token_id, Substrate.NetApi.Model.Types.Primitive.U32 unlock_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(token_id.Encode());
            byteArray.AddRange(unlock_id.Encode());
            return new Method(115, "VtokenMinting", 3, "rebond_by_unlock_id", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_unlock_duration
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetUnlockDuration(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId token_id, Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumTimeUnit unlock_duration)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(token_id.Encode());
            byteArray.AddRange(unlock_duration.Encode());
            return new Method(115, "VtokenMinting", 4, "set_unlock_duration", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_minimum_mint
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetMinimumMint(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId token_id, Substrate.NetApi.Model.Types.Primitive.U128 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(token_id.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(115, "VtokenMinting", 5, "set_minimum_mint", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_minimum_redeem
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetMinimumRedeem(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId token_id, Substrate.NetApi.Model.Types.Primitive.U128 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(token_id.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(115, "VtokenMinting", 6, "set_minimum_redeem", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_support_rebond_token
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddSupportRebondToken(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId token_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(token_id.Encode());
            return new Method(115, "VtokenMinting", 7, "add_support_rebond_token", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_support_rebond_token
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveSupportRebondToken(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId token_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(token_id.Encode());
            return new Method(115, "VtokenMinting", 8, "remove_support_rebond_token", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_fees
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetFees(Bifrost.NetApi.Generated.Model.sp_arithmetic.per_things.Permill mint_fee, Bifrost.NetApi.Generated.Model.sp_arithmetic.per_things.Permill redeem_fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(mint_fee.Encode());
            byteArray.AddRange(redeem_fee.Encode());
            return new Method(115, "VtokenMinting", 9, "set_fees", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_hook_iteration_limit
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetHookIterationLimit(Substrate.NetApi.Model.Types.Primitive.U32 limit)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(limit.Encode());
            return new Method(115, "VtokenMinting", 10, "set_hook_iteration_limit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_unlocking_total
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetUnlockingTotal(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId token_id, Substrate.NetApi.Model.Types.Primitive.U128 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(token_id.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(115, "VtokenMinting", 11, "set_unlocking_total", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_min_time_unit
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetMinTimeUnit(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId token_id, Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumTimeUnit time_unit)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(token_id.Encode());
            byteArray.AddRange(time_unit.Encode());
            return new Method(115, "VtokenMinting", 12, "set_min_time_unit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> recreate_currency_ongoing_time_unit
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RecreateCurrencyOngoingTimeUnit(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId token_id, Bifrost.NetApi.Generated.Model.bifrost_primitives.EnumTimeUnit time_unit)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(token_id.Encode());
            byteArray.AddRange(time_unit.Encode());
            return new Method(115, "VtokenMinting", 13, "recreate_currency_ongoing_time_unit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> mint_with_lock
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method MintWithLock(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId token_id, Substrate.NetApi.Model.Types.Primitive.U128 token_amount, Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT7 remark, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> channel_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(token_id.Encode());
            byteArray.AddRange(token_amount.Encode());
            byteArray.AddRange(remark.Encode());
            byteArray.AddRange(channel_id.Encode());
            return new Method(115, "VtokenMinting", 14, "mint_with_lock", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unlock_incentive_minted_vtoken
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UnlockIncentiveMintedVtoken(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId vtoken_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(vtoken_id.Encode());
            return new Method(115, "VtokenMinting", 15, "unlock_incentive_minted_vtoken", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_incentive_coef
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetIncentiveCoef(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId vtoken_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> new_coef_op)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(vtoken_id.Encode());
            byteArray.AddRange(new_coef_op.Encode());
            return new Method(115, "VtokenMinting", 16, "set_incentive_coef", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_vtoken_incentive_lock_blocks
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetVtokenIncentiveLockBlocks(Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId vtoken_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> new_blockes_op)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(vtoken_id.Encode());
            byteArray.AddRange(new_blockes_op.Encode());
            return new Method(115, "VtokenMinting", 17, "set_vtoken_incentive_lock_blocks", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> VtokenMintingConstants
    /// </summary>
    public sealed class VtokenMintingConstants
    {
        
        /// <summary>
        /// >> MaximumUnlockIdOfUser
        ///  The amount of mint
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaximumUnlockIdOfUser()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x0A000000");
            return result;
        }
        
        /// <summary>
        /// >> MaximumUnlockIdOfTimeUnit
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaximumUnlockIdOfTimeUnit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x32000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxLockRecords
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxLockRecords()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
        
        /// <summary>
        /// >> EntranceAccount
        /// </summary>
        public Bifrost.NetApi.Generated.Model.frame_support.PalletId EntranceAccount()
        {
            var result = new Bifrost.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x62662F76746B696E");
            return result;
        }
        
        /// <summary>
        /// >> ExitAccount
        /// </summary>
        public Bifrost.NetApi.Generated.Model.frame_support.PalletId ExitAccount()
        {
            var result = new Bifrost.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x62662F76746F7574");
            return result;
        }
        
        /// <summary>
        /// >> FeeAccount
        /// </summary>
        public Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 FeeAccount()
        {
            var result = new Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32();
            result.Create("0x6D6F646C62662F74727372790000000000000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> RedeemFeeAccount
        /// </summary>
        public Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 RedeemFeeAccount()
        {
            var result = new Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32();
            result.Create("0x6D6F646C62662F74727372790000000000000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> IncentivePoolAccount
        /// </summary>
        public Bifrost.NetApi.Generated.Model.frame_support.PalletId IncentivePoolAccount()
        {
            var result = new Bifrost.NetApi.Generated.Model.frame_support.PalletId();
            result.Create("0x62662F696E706F6F");
            return result;
        }
        
        /// <summary>
        /// >> RelayChainToken
        /// </summary>
        public Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId RelayChainToken()
        {
            var result = new Bifrost.NetApi.Generated.Model.bifrost_primitives.currency.EnumCurrencyId();
            result.Create("0x0800");
            return result;
        }
        
        /// <summary>
        /// >> AstarParachainId
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 AstarParachainId()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xD6070000");
            return result;
        }
        
        /// <summary>
        /// >> MoonbeamParachainId
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MoonbeamParachainId()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xD4070000");
            return result;
        }
        
        /// <summary>
        /// >> HydradxParachainId
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 HydradxParachainId()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xF2070000");
            return result;
        }
        
        /// <summary>
        /// >> InterlayParachainId
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 InterlayParachainId()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xF0070000");
            return result;
        }
        
        /// <summary>
        /// >> MantaParachainId
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MantaParachainId()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x38080000");
            return result;
        }
    }
    
    /// <summary>
    /// >> VtokenMintingErrors
    /// </summary>
    public enum VtokenMintingErrors
    {
        
        /// <summary>
        /// >> BelowMinimumMint
        /// </summary>
        BelowMinimumMint,
        
        /// <summary>
        /// >> BelowMinimumRedeem
        /// </summary>
        BelowMinimumRedeem,
        
        /// <summary>
        /// >> InvalidRebondToken
        /// Invalid token to rebond.
        /// </summary>
        InvalidRebondToken,
        
        /// <summary>
        /// >> NotSupportTokenType
        /// Token type not support.
        /// </summary>
        NotSupportTokenType,
        
        /// <summary>
        /// >> NotEnoughBalanceToUnlock
        /// </summary>
        NotEnoughBalanceToUnlock,
        
        /// <summary>
        /// >> TokenToRebondNotZero
        /// </summary>
        TokenToRebondNotZero,
        
        /// <summary>
        /// >> OngoingTimeUnitNotSet
        /// </summary>
        OngoingTimeUnitNotSet,
        
        /// <summary>
        /// >> TokenUnlockLedgerNotFound
        /// </summary>
        TokenUnlockLedgerNotFound,
        
        /// <summary>
        /// >> UserUnlockLedgerNotFound
        /// </summary>
        UserUnlockLedgerNotFound,
        
        /// <summary>
        /// >> TimeUnitUnlockLedgerNotFound
        /// </summary>
        TimeUnitUnlockLedgerNotFound,
        
        /// <summary>
        /// >> UnlockDurationNotFound
        /// </summary>
        UnlockDurationNotFound,
        
        /// <summary>
        /// >> Unexpected
        /// </summary>
        Unexpected,
        
        /// <summary>
        /// >> CalculationOverflow
        /// </summary>
        CalculationOverflow,
        
        /// <summary>
        /// >> ExceedMaximumUnlockId
        /// </summary>
        ExceedMaximumUnlockId,
        
        /// <summary>
        /// >> TooManyRedeems
        /// </summary>
        TooManyRedeems,
        
        /// <summary>
        /// >> CanNotRedeem
        /// </summary>
        CanNotRedeem,
        
        /// <summary>
        /// >> CanNotRebond
        /// </summary>
        CanNotRebond,
        
        /// <summary>
        /// >> NotEnoughBalance
        /// </summary>
        NotEnoughBalance,
        
        /// <summary>
        /// >> VeBNCCheckingError
        /// </summary>
        VeBNCCheckingError,
        
        /// <summary>
        /// >> IncentiveCoefNotFound
        /// </summary>
        IncentiveCoefNotFound,
        
        /// <summary>
        /// >> TooManyLocks
        /// </summary>
        TooManyLocks,
        
        /// <summary>
        /// >> ConvertError
        /// </summary>
        ConvertError,
        
        /// <summary>
        /// >> NoUnlockRecord
        /// </summary>
        NoUnlockRecord,
        
        /// <summary>
        /// >> FailToRemoveLock
        /// </summary>
        FailToRemoveLock,
        
        /// <summary>
        /// >> BalanceZero
        /// </summary>
        BalanceZero,
        
        /// <summary>
        /// >> IncentiveLockBlocksNotSet
        /// </summary>
        IncentiveLockBlocksNotSet,
    }
}
