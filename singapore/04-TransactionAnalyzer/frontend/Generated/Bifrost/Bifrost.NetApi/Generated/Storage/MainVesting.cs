//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Bifrost.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> VestingStorage
    /// </summary>
    public sealed class VestingStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> VestingStorage Constructor
        /// </summary>
        public VestingStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Vesting", "VestingStartAt"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Vesting", "Cliff"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Vesting", "Vesting"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT39)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Vesting", "StorageVersion"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Bifrost.NetApi.Generated.Model.bifrost_vesting.EnumReleases)));
        }
        
        /// <summary>
        /// >> VestingStartAtParams
        ///  Start at
        /// </summary>
        public static string VestingStartAtParams()
        {
            return RequestGenerator.GetStorage("Vesting", "VestingStartAt", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> VestingStartAtDefault
        /// Default value as hex string
        /// </summary>
        public static string VestingStartAtDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> VestingStartAt
        ///  Start at
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> VestingStartAt(string blockhash, CancellationToken token)
        {
            string parameters = VestingStorage.VestingStartAtParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CliffParams
        ///  Cliff vesting
        /// </summary>
        public static string CliffParams(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Vesting", "Cliff", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CliffDefault
        /// Default value as hex string
        /// </summary>
        public static string CliffDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Cliff
        ///  Cliff vesting
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> Cliff(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = VestingStorage.CliffParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> VestingParams
        ///  Information regarding the vesting of a given account.
        /// </summary>
        public static string VestingParams(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Vesting", "Vesting", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> VestingDefault
        /// Default value as hex string
        /// </summary>
        public static string VestingDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Vesting
        ///  Information regarding the vesting of a given account.
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT39> Vesting(Bifrost.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = VestingStorage.VestingParams(key);
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bounded_collections.bounded_vec.BoundedVecT39>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> StorageVersionParams
        ///  Storage version of the pallet.
        /// 
        ///  New networks start with latest version, as determined by the genesis build.
        /// </summary>
        public static string StorageVersionParams()
        {
            return RequestGenerator.GetStorage("Vesting", "StorageVersion", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> StorageVersionDefault
        /// Default value as hex string
        /// </summary>
        public static string StorageVersionDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> StorageVersion
        ///  Storage version of the pallet.
        /// 
        ///  New networks start with latest version, as determined by the genesis build.
        /// </summary>
        public async Task<Bifrost.NetApi.Generated.Model.bifrost_vesting.EnumReleases> StorageVersion(string blockhash, CancellationToken token)
        {
            string parameters = VestingStorage.StorageVersionParams();
            var result = await _client.GetStorageAsync<Bifrost.NetApi.Generated.Model.bifrost_vesting.EnumReleases>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> VestingCalls
    /// </summary>
    public sealed class VestingCalls
    {
        
        /// <summary>
        /// >> vest
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Vest()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(60, "Vesting", 0, "vest", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> vest_other
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method VestOther(Bifrost.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress target)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(target.Encode());
            return new Method(60, "Vesting", 1, "vest_other", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> vested_transfer
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method VestedTransfer(Bifrost.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress target, Bifrost.NetApi.Generated.Model.bifrost_vesting.vesting_info.VestingInfo schedule)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(target.Encode());
            byteArray.AddRange(schedule.Encode());
            return new Method(60, "Vesting", 2, "vested_transfer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_vested_transfer
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceVestedTransfer(Bifrost.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress source, Bifrost.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress target, Bifrost.NetApi.Generated.Model.bifrost_vesting.vesting_info.VestingInfo schedule)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(source.Encode());
            byteArray.AddRange(target.Encode());
            byteArray.AddRange(schedule.Encode());
            return new Method(60, "Vesting", 3, "force_vested_transfer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> init_vesting_start_at
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method InitVestingStartAt(Substrate.NetApi.Model.Types.Primitive.U32 vesting_start_at)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(vesting_start_at.Encode());
            return new Method(60, "Vesting", 5, "init_vesting_start_at", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_vesting_per_block
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetVestingPerBlock(Bifrost.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress target, Substrate.NetApi.Model.Types.Primitive.U32 index, Substrate.NetApi.Model.Types.Primitive.U128 per_block)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(target.Encode());
            byteArray.AddRange(index.Encode());
            byteArray.AddRange(per_block.Encode());
            return new Method(60, "Vesting", 6, "set_vesting_per_block", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_set_cliff
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceSetCliff(Bifrost.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress target, Substrate.NetApi.Model.Types.Primitive.U32 cliff_block)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(target.Encode());
            byteArray.AddRange(cliff_block.Encode());
            return new Method(60, "Vesting", 7, "force_set_cliff", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> merge_schedules
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method MergeSchedules(Substrate.NetApi.Model.Types.Primitive.U32 schedule1_index, Substrate.NetApi.Model.Types.Primitive.U32 schedule2_index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(schedule1_index.Encode());
            byteArray.AddRange(schedule2_index.Encode());
            return new Method(60, "Vesting", 4, "merge_schedules", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> VestingConstants
    /// </summary>
    public sealed class VestingConstants
    {
        
        /// <summary>
        /// >> MinVestedTransfer
        ///  The minimum amount transferred to call `vested_transfer`.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinVestedTransfer()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00E40B54020000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxVestingSchedules
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxVestingSchedules()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x1C000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> VestingErrors
    /// </summary>
    public enum VestingErrors
    {
        
        /// <summary>
        /// >> NotVesting
        /// The account given is not vesting.
        /// </summary>
        NotVesting,
        
        /// <summary>
        /// >> AtMaxVestingSchedules
        /// The account already has `MaxVestingSchedules` count of schedules and thus
        /// cannot add another one. Consider merging existing schedules in order to add another.
        /// </summary>
        AtMaxVestingSchedules,
        
        /// <summary>
        /// >> AmountLow
        /// Amount being transferred is too low to create a vesting schedule.
        /// </summary>
        AmountLow,
        
        /// <summary>
        /// >> ScheduleIndexOutOfBounds
        /// An index was out of bounds of the vesting schedules.
        /// </summary>
        ScheduleIndexOutOfBounds,
        
        /// <summary>
        /// >> InvalidScheduleParams
        /// Failed to create a new schedule because some parameter was invalid.
        /// </summary>
        InvalidScheduleParams,
        
        /// <summary>
        /// >> SamePerBlock
        /// change to the same per_block param
        /// </summary>
        SamePerBlock,
        
        /// <summary>
        /// >> VestingStartAtNotSet
        /// VestingStartAt storage is not set
        /// </summary>
        VestingStartAtNotSet,
        
        /// <summary>
        /// >> WrongLockedAmount
        /// Wrong amount
        /// </summary>
        WrongLockedAmount,
        
        /// <summary>
        /// >> WrongCliffVesting
        /// Wrong vesting during cliff period
        /// </summary>
        WrongCliffVesting,
    }
}
