//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Attributes;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Metadata.V14;
using System.Collections.Generic;


namespace Substrate.NetApi.Generated.Model.pallet_omnipool.types
{
    
    
    /// <summary>
    /// >> 434 - Composite[pallet_omnipool.types.AssetState]
    /// </summary>
    [SubstrateNodeType(TypeDefEnum.Composite)]
    public sealed class AssetState : BaseType
    {
        
        /// <summary>
        /// >> hub_reserve
        /// </summary>
        private Substrate.NetApi.Model.Types.Primitive.U128 _hubReserve;
        
        /// <summary>
        /// >> shares
        /// </summary>
        private Substrate.NetApi.Model.Types.Primitive.U128 _shares;
        
        /// <summary>
        /// >> protocol_shares
        /// </summary>
        private Substrate.NetApi.Model.Types.Primitive.U128 _protocolShares;
        
        /// <summary>
        /// >> cap
        /// </summary>
        private Substrate.NetApi.Model.Types.Primitive.U128 _cap;
        
        /// <summary>
        /// >> tradable
        /// </summary>
        private Substrate.NetApi.Generated.Model.pallet_omnipool.types.Tradability _tradable;
        
        public Substrate.NetApi.Model.Types.Primitive.U128 HubReserve
        {
            get
            {
                return this._hubReserve;
            }
            set
            {
                this._hubReserve = value;
            }
        }
        
        public Substrate.NetApi.Model.Types.Primitive.U128 Shares
        {
            get
            {
                return this._shares;
            }
            set
            {
                this._shares = value;
            }
        }
        
        public Substrate.NetApi.Model.Types.Primitive.U128 ProtocolShares
        {
            get
            {
                return this._protocolShares;
            }
            set
            {
                this._protocolShares = value;
            }
        }
        
        public Substrate.NetApi.Model.Types.Primitive.U128 Cap
        {
            get
            {
                return this._cap;
            }
            set
            {
                this._cap = value;
            }
        }
        
        public Substrate.NetApi.Generated.Model.pallet_omnipool.types.Tradability Tradable
        {
            get
            {
                return this._tradable;
            }
            set
            {
                this._tradable = value;
            }
        }
        
        public override string TypeName()
        {
            return "AssetState";
        }
        
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(HubReserve.Encode());
            result.AddRange(Shares.Encode());
            result.AddRange(ProtocolShares.Encode());
            result.AddRange(Cap.Encode());
            result.AddRange(Tradable.Encode());
            return result.ToArray();
        }
        
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            HubReserve = new Substrate.NetApi.Model.Types.Primitive.U128();
            HubReserve.Decode(byteArray, ref p);
            Shares = new Substrate.NetApi.Model.Types.Primitive.U128();
            Shares.Decode(byteArray, ref p);
            ProtocolShares = new Substrate.NetApi.Model.Types.Primitive.U128();
            ProtocolShares.Decode(byteArray, ref p);
            Cap = new Substrate.NetApi.Model.Types.Primitive.U128();
            Cap.Decode(byteArray, ref p);
            Tradable = new Substrate.NetApi.Generated.Model.pallet_omnipool.types.Tradability();
            Tradable.Decode(byteArray, ref p);
            var bytesLength = p - start;
            TypeSize = bytesLength;
            Bytes = new byte[bytesLength];
            System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
        }
    }
}
