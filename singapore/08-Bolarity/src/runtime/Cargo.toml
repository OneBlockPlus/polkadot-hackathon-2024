[package]
name = "bolarity-runtime"
version = "0.0.0"
publish = false
authors = { workspace = true }
edition = { workspace = true }
repository = { workspace = true }

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
byte-slice-cast= { workspace = true, default-features = false }
log = { workspace = true }
parity-scale-codec = { workspace = true }
scale-info = { workspace = true }
static_assertions = "1.1"

# Substrate
sp-api = { workspace = true }
sp-block-builder = { workspace = true }
sp-genesis-builder = { workspace = true }
sp-consensus-babe = { workspace = true }
sp-consensus-grandpa = { workspace = true }
sp-core = { workspace = true }
sp-inherents = { workspace = true }
sp-io = { workspace = true }
sp-offchain = { workspace = true }
sp-runtime = { workspace = true }
sp-session = { workspace = true }
sp-staking = { workspace = true }
sp-std = { workspace = true }
sp-transaction-pool = { workspace = true }
sp-statement-store = { workspace = true }
sp-version = { workspace = true }
# Substrate FRAME
frame-benchmarking = { workspace = true, optional = true }
frame-election-provider-support = { workspace = true }
frame-executive = { workspace = true }
frame-support = { workspace = true }
frame-system = { workspace = true }
frame-system-benchmarking = { workspace = true, optional = true }
frame-system-rpc-runtime-api = { workspace = true }
pallet-authorship = { workspace = true }
pallet-babe = { workspace = true }
pallet-bags-list = { workspace = true }
pallet-balances = { workspace = true, features = ["insecure_zero_ed"] }
pallet-collective = { workspace = true }
pallet-contracts = { workspace = true }
pallet-democracy = { workspace = true }
pallet-election-provider-multi-phase = { workspace = true }
pallet-elections-phragmen = { workspace = true }
pallet-grandpa = { workspace = true }
pallet-im-online = { workspace = true }
pallet-insecure-randomness-collective-flip = { workspace = true }
pallet-membership = { workspace = true }
pallet-nomination-pools = { workspace = true }
pallet-nomination-pools-runtime-api = { workspace = true }
pallet-offences = { workspace = true }
pallet-offences-benchmarking = { workspace = true, optional = true }
pallet-preimage = { workspace = true }
pallet-scheduler = { workspace = true }
pallet-session = { workspace = true }
pallet-staking = { workspace = true }
pallet-staking-reward-curve = { workspace = true }
pallet-staking-runtime-api = { workspace = true }
pallet-sudo = { workspace = true }
pallet-timestamp = { workspace = true }
pallet-transaction-payment = { workspace = true }
pallet-transaction-payment-rpc-runtime-api = { workspace = true }
pallet-treasury = { workspace = true }
pallet-utility = { workspace = true }
pallet-fast-unstake = { workspace = true }

# Frontier
fp-account = { workspace = true, features = ["serde"] }
fp-evm = { workspace = true, features = ["serde"] }
fp-rpc = { workspace = true }
fp-self-contained = { workspace = true, features = ["serde"] }
# Frontier FRAME
pallet-base-fee = { workspace = true }
pallet-dynamic-fee = { workspace = true }
#pallet-ethereum = { workspace = true }
pallet-evm = { workspace = true }
pallet-evm-chain-id = { workspace = true }
pallet-evm-precompile-modexp = { workspace = true }
pallet-evm-precompile-sha3fips = { workspace = true }
pallet-evm-precompile-simple = { workspace = true }
pallet-evm-precompile-dispatch = { workspace = true }
pallet-hotfix-sufficients = { workspace = true }

# Local Pallet
pallet-template = { path = "../pallets/template", default-features = false }
pallet-evm-precompile-call-hybrid-vm = { workspace = true, default-features = false }
pallet-hybrid-vm = { workspace = true, default-features = false }
pallet-hybrid-vm-port = { workspace = true, default-features = false }
hp-system = { workspace = true, default-features = false}

[build-dependencies]
substrate-wasm-builder = { workspace = true, optional = true }

[features]
default = ["std", "with-rocksdb-weights"]
with-rocksdb-weights = []
with-paritydb-weights = []
std = [
    "log/std",
    "parity-scale-codec/std",
    "scale-info/std",
    # Substrate
    "sp-api/std",
    "sp-block-builder/std",
    "sp-genesis-builder/std",
    "sp-consensus-babe/std",
    "sp-consensus-grandpa/std",
    "sp-core/std",
    "sp-inherents/std",
    "sp-io/std",
    "sp-offchain/std",
    "sp-runtime/std",
    "sp-session/std",
    "sp-staking/std",
    "sp-std/std",
    "sp-transaction-pool/std",
    "sp-statement-store/std",
    "sp-version/std",
    "substrate-wasm-builder",
    # Substrate FRAME
    "frame-benchmarking/std",
    "frame-executive/std",
    "frame-support/std",
    "frame-system/std",
    "frame-system-rpc-runtime-api/std",
    "frame-system-benchmarking?/std",
    "pallet-authorship/std",
    "pallet-babe/std",
    "pallet-bags-list/std",
    "pallet-balances/std",
    "pallet-collective/std",
    "pallet-contracts/std",
    "pallet-democracy/std",
    "pallet-election-provider-multi-phase/std",
    "pallet-elections-phragmen/std",
    "pallet-grandpa/std",
    "pallet-im-online/std",
    "pallet-insecure-randomness-collective-flip/std",
    "pallet-membership/std",
    "pallet-nomination-pools/std",
    "pallet-nomination-pools-runtime-api/std",
    "pallet-offences/std",
    "pallet-preimage/std",
    "pallet-scheduler/std",
    "pallet-session/std",
    "pallet-staking-runtime-api/std",
    "pallet-staking/std",
    "pallet-sudo/std",
    "pallet-timestamp/std",
    "pallet-transaction-payment-rpc-runtime-api/std",
    "pallet-transaction-payment/std",
    "pallet-treasury/std",
    "pallet-utility/std",
    "pallet-fast-unstake/std",
    # Frontier
    "fp-account/std",
    "fp-evm/std",
    "fp-rpc/std",
    "fp-self-contained/std",
    # Frontier FRAME
    "pallet-base-fee/std",
    "pallet-dynamic-fee/std",
#    "pallet-ethereum/std",
    "pallet-evm-chain-id/std",
    "pallet-evm-precompile-dispatch/std",
    "pallet-evm-precompile-modexp/std",
    "pallet-evm-precompile-sha3fips/std",
    "pallet-evm-precompile-simple/std",
    "pallet-evm/std",
    "pallet-hotfix-sufficients/std",
    # Local Pallet
    "pallet-evm-precompile-call-hybrid-vm/std",
    "pallet-hybrid-vm/std",
    "pallet-hybrid-vm-port/std",
]
runtime-benchmarks = [
    "frame-benchmarking/runtime-benchmarks",
    "frame-system-benchmarking/runtime-benchmarks",
    "frame-system/runtime-benchmarks",
    "pallet-balances/runtime-benchmarks",
#    "pallet-ethereum/runtime-benchmarks",
    "pallet-evm/runtime-benchmarks",
    "pallet-grandpa/runtime-benchmarks",
    "pallet-hotfix-sufficients/runtime-benchmarks",
    "pallet-offences-benchmarking",
    "pallet-contracts/runtime-benchmarks",
    "pallet-sudo/runtime-benchmarks",
    "pallet-timestamp/runtime-benchmarks",
    "pallet-hybrid-vm-port/runtime-benchmarks",
]