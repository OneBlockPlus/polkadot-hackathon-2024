//! Autogenerated weights for orml_rate_limit
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-29, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// /Users/ermal/Acala/target/release/acala
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=orml_rate_limit
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=../templates/orml-weight-template.hbs
// --output=./tokens/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for orml_rate_limit.
pub trait WeightInfo {
	fn update_rate_limit_rule() -> Weight;
	fn add_whitelist() -> Weight;
	fn remove_whitelist() -> Weight;
	fn reset_whitelist() -> Weight;
}

/// Default weights.
impl WeightInfo for () {
	// Storage: RateLimit RateLimitRules (r:1 w:1)
	// Storage: RateLimit RateLimitQuota (r:0 w:1)
	fn update_rate_limit_rule() -> Weight {
		// Minimum execution time: 31_000 nanoseconds.
		Weight::from_parts(32_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: RateLimit LimitWhitelist (r:1 w:1)
	fn add_whitelist() -> Weight {
		// Minimum execution time: 25_000 nanoseconds.
		Weight::from_parts(27_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: RateLimit LimitWhitelist (r:1 w:1)
	fn remove_whitelist() -> Weight {
		// Minimum execution time: 26_000 nanoseconds.
		Weight::from_parts(27_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: RateLimit LimitWhitelist (r:0 w:1)
	fn reset_whitelist() -> Weight {
		// Minimum execution time: 22_000 nanoseconds.
		Weight::from_parts(22_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}
