
//! Autogenerated weights for `veles_parachain_pallet`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2024-10-16, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `DESKTOP-F2AGLQ1`, CPU: `AMD Ryzen 7 5825U with Radeon Graphics`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("local")`, DB CACHE: 1024

// Executed Command:
// target/release/veles-parachain-node
// benchmark
// pallet
// --chain=local
// --wasm-execution=compiled
// --pallet
// veles-parachain-pallet
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// pallets/veles-parachain-pallet/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

pub trait WeightInfo {
	fn update_vote_pass_ratio() -> Weight;
	fn update_penalty_levels() -> Weight;
	fn update_beneficiary_splits() -> Weight;
	fn update_time_value() -> Weight;
	fn update_fee_value() -> Weight;
	fn register_for_trader_account() -> Weight;
	fn register_for_project_validator_account() -> Weight;
	fn register_for_project_owner_account() -> Weight;
	fn submit_carbon_footprint_report() -> Weight;
	fn cast_vote() -> Weight;
	fn propose_project() -> Weight;
	fn propose_carbon_credit_batch() -> Weight;
	fn create_sale_order() -> Weight;
	fn complete_sale_order() -> Weight;
	fn close_sale_order() -> Weight;
	fn open_account_complaint() -> Weight;
	fn open_hash_complaint() -> Weight;
	fn retire_carbon_credits() -> Weight;
	fn repay_project_owner_debts() -> Weight;
	fn update_pallet_base_time() -> Weight;
	fn update_carbon_footprint_report() -> Weight;
	fn update_project_proposal() -> Weight;
	fn update_carbon_credit_batch_proposal() -> Weight;
	fn update_carbon_credit_sale_order() -> Weight;
	fn update_complaint_for_account() -> Weight;
	fn update_complaint_for_hash() -> Weight;
	fn update_project_owner_penalty_level() -> Weight;
	fn update_validator_penalty_level() -> Weight;
	fn update_project_penalty_level() -> Weight;
}

/// Weight functions for `veles_parachain_pallet`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `VelesParachainPallet::AuthorityAccounts` (r:1 w:0)
	/// Proof: `VelesParachainPallet::AuthorityAccounts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::VotePassRatio` (r:0 w:1)
	/// Proof: `VelesParachainPallet::VotePassRatio` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_vote_pass_ratio() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `64`
		//  Estimated: `1549`
		// Minimum execution time: 8_596_000 picoseconds.
		Weight::from_parts(9_097_000, 0)
			.saturating_add(Weight::from_parts(0, 1549))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `VelesParachainPallet::AuthorityAccounts` (r:1 w:0)
	/// Proof: `VelesParachainPallet::AuthorityAccounts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::VotePassRatio` (r:0 w:1)
	/// Proof: `VelesParachainPallet::VotePassRatio` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_penalty_levels() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `64`
		//  Estimated: `1549`
		// Minimum execution time: 8_536_000 picoseconds.
		Weight::from_parts(8_867_000, 0)
			.saturating_add(Weight::from_parts(0, 1549))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `VelesParachainPallet::AuthorityAccounts` (r:1 w:0)
	/// Proof: `VelesParachainPallet::AuthorityAccounts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::BeneficiarySplits` (r:0 w:1)
	/// Proof: `VelesParachainPallet::BeneficiarySplits` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_beneficiary_splits() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `64`
		//  Estimated: `1549`
		// Minimum execution time: 8_987_000 picoseconds.
		Weight::from_parts(9_648_000, 0)
			.saturating_add(Weight::from_parts(0, 1549))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `VelesParachainPallet::AuthorityAccounts` (r:1 w:0)
	/// Proof: `VelesParachainPallet::AuthorityAccounts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::PalletTimeValues` (r:1 w:1)
	/// Proof: `VelesParachainPallet::PalletTimeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_time_value() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `64`
		//  Estimated: `1549`
		// Minimum execution time: 9_307_000 picoseconds.
		Weight::from_parts(9_618_000, 0)
			.saturating_add(Weight::from_parts(0, 1549))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `VelesParachainPallet::AuthorityAccounts` (r:1 w:0)
	/// Proof: `VelesParachainPallet::AuthorityAccounts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::PalletFeeValues` (r:1 w:1)
	/// Proof: `VelesParachainPallet::PalletFeeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_fee_value() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `64`
		//  Estimated: `1549`
		// Minimum execution time: 9_227_000 picoseconds.
		Weight::from_parts(9_718_000, 0)
			.saturating_add(Weight::from_parts(0, 1549))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `VelesParachainPallet::CarbonFootprintAccounts` (r:1 w:0)
	/// Proof: `VelesParachainPallet::CarbonFootprintAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::TraderAccounts` (r:1 w:1)
	/// Proof: `VelesParachainPallet::TraderAccounts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::Validators` (r:1 w:0)
	/// Proof: `VelesParachainPallet::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ProjectOwners` (r:1 w:0)
	/// Proof: `VelesParachainPallet::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonFootprintReports` (r:1 w:0)
	/// Proof: `VelesParachainPallet::CarbonFootprintReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::PalletFeeValues` (r:1 w:0)
	/// Proof: `VelesParachainPallet::PalletFeeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn register_for_trader_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `160`
		//  Estimated: `3625`
		// Minimum execution time: 18_544_000 picoseconds.
		Weight::from_parts(19_778_000, 0)
			.saturating_add(Weight::from_parts(0, 3625))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `VelesParachainPallet::CarbonFootprintAccounts` (r:2 w:0)
	/// Proof: `VelesParachainPallet::CarbonFootprintAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::TraderAccounts` (r:1 w:0)
	/// Proof: `VelesParachainPallet::TraderAccounts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::Validators` (r:2 w:1)
	/// Proof: `VelesParachainPallet::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ProjectOwners` (r:2 w:0)
	/// Proof: `VelesParachainPallet::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonFootprintReports` (r:2 w:0)
	/// Proof: `VelesParachainPallet::CarbonFootprintReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ProjectProposals` (r:1 w:0)
	/// Proof: `VelesParachainPallet::ProjectProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonCreditBatchProposals` (r:1 w:0)
	/// Proof: `VelesParachainPallet::CarbonCreditBatchProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ComplaintsForAccounts` (r:1 w:0)
	/// Proof: `VelesParachainPallet::ComplaintsForAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ComplaintsForHashes` (r:1 w:0)
	/// Proof: `VelesParachainPallet::ComplaintsForHashes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::PalletFeeValues` (r:1 w:0)
	/// Proof: `VelesParachainPallet::PalletFeeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn register_for_project_validator_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `166`
		//  Estimated: `6106`
		// Minimum execution time: 32_350_000 picoseconds.
		Weight::from_parts(33_934_000, 0)
			.saturating_add(Weight::from_parts(0, 6106))
			.saturating_add(T::DbWeight::get().reads(15))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `VelesParachainPallet::CarbonFootprintAccounts` (r:2 w:0)
	/// Proof: `VelesParachainPallet::CarbonFootprintAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::TraderAccounts` (r:1 w:0)
	/// Proof: `VelesParachainPallet::TraderAccounts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::Validators` (r:2 w:0)
	/// Proof: `VelesParachainPallet::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ProjectOwners` (r:2 w:1)
	/// Proof: `VelesParachainPallet::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonFootprintReports` (r:2 w:0)
	/// Proof: `VelesParachainPallet::CarbonFootprintReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ProjectProposals` (r:1 w:0)
	/// Proof: `VelesParachainPallet::ProjectProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonCreditBatchProposals` (r:1 w:0)
	/// Proof: `VelesParachainPallet::CarbonCreditBatchProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ComplaintsForAccounts` (r:1 w:0)
	/// Proof: `VelesParachainPallet::ComplaintsForAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ComplaintsForHashes` (r:1 w:0)
	/// Proof: `VelesParachainPallet::ComplaintsForHashes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::PalletFeeValues` (r:1 w:0)
	/// Proof: `VelesParachainPallet::PalletFeeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn register_for_project_owner_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `166`
		//  Estimated: `6106`
		// Minimum execution time: 32_000_000 picoseconds.
		Weight::from_parts(33_172_000, 0)
			.saturating_add(Weight::from_parts(0, 6106))
			.saturating_add(T::DbWeight::get().reads(15))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `VelesParachainPallet::TraderAccounts` (r:1 w:0)
	/// Proof: `VelesParachainPallet::TraderAccounts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::Validators` (r:2 w:0)
	/// Proof: `VelesParachainPallet::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ProjectOwners` (r:2 w:0)
	/// Proof: `VelesParachainPallet::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonFootprintReports` (r:2 w:1)
	/// Proof: `VelesParachainPallet::CarbonFootprintReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ProjectProposals` (r:1 w:0)
	/// Proof: `VelesParachainPallet::ProjectProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonCreditBatchProposals` (r:1 w:0)
	/// Proof: `VelesParachainPallet::CarbonCreditBatchProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ComplaintsForAccounts` (r:1 w:0)
	/// Proof: `VelesParachainPallet::ComplaintsForAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ComplaintsForHashes` (r:1 w:0)
	/// Proof: `VelesParachainPallet::ComplaintsForHashes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonFootprintAccounts` (r:1 w:0)
	/// Proof: `VelesParachainPallet::CarbonFootprintAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::PalletFeeValues` (r:1 w:0)
	/// Proof: `VelesParachainPallet::PalletFeeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `VelesParachainPallet::PalletTimeValues` (r:1 w:0)
	/// Proof: `VelesParachainPallet::PalletTimeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::VotingTimeouts` (r:1 w:1)
	/// Proof: `VelesParachainPallet::VotingTimeouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn submit_carbon_footprint_report() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `172`
		//  Estimated: `6112`
		// Minimum execution time: 35_717_000 picoseconds.
		Weight::from_parts(37_210_000, 0)
			.saturating_add(Weight::from_parts(0, 6112))
			.saturating_add(T::DbWeight::get().reads(17))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `VelesParachainPallet::Validators` (r:1 w:0)
	/// Proof: `VelesParachainPallet::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::PalletFeeValues` (r:1 w:0)
	/// Proof: `VelesParachainPallet::PalletFeeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ProjectOwners` (r:1 w:0)
	/// Proof: `VelesParachainPallet::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::PenaltyLevels` (r:1 w:0)
	/// Proof: `VelesParachainPallet::PenaltyLevels` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `VelesParachainPallet::ComplaintsForAccounts` (r:1 w:1)
	/// Proof: `VelesParachainPallet::ComplaintsForAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cast_vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `348`
		//  Estimated: `3813`
		// Minimum execution time: 23_674_000 picoseconds.
		Weight::from_parts(24_476_000, 0)
			.saturating_add(Weight::from_parts(0, 3813))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `VelesParachainPallet::ProjectOwners` (r:2 w:0)
	/// Proof: `VelesParachainPallet::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ProjectOwnerDebts` (r:1 w:0)
	/// Proof: `VelesParachainPallet::ProjectOwnerDebts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ProjectProposals` (r:1 w:1)
	/// Proof: `VelesParachainPallet::ProjectProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonFootprintReports` (r:1 w:0)
	/// Proof: `VelesParachainPallet::CarbonFootprintReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonCreditBatchProposals` (r:1 w:0)
	/// Proof: `VelesParachainPallet::CarbonCreditBatchProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ComplaintsForAccounts` (r:1 w:0)
	/// Proof: `VelesParachainPallet::ComplaintsForAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ComplaintsForHashes` (r:1 w:0)
	/// Proof: `VelesParachainPallet::ComplaintsForHashes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonFootprintAccounts` (r:1 w:0)
	/// Proof: `VelesParachainPallet::CarbonFootprintAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::Validators` (r:2 w:0)
	/// Proof: `VelesParachainPallet::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::PalletFeeValues` (r:1 w:0)
	/// Proof: `VelesParachainPallet::PalletFeeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::PenaltyLevels` (r:1 w:0)
	/// Proof: `VelesParachainPallet::PenaltyLevels` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `VelesParachainPallet::PalletTimeValues` (r:1 w:0)
	/// Proof: `VelesParachainPallet::PalletTimeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::VotingTimeouts` (r:1 w:1)
	/// Proof: `VelesParachainPallet::VotingTimeouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_project() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `242`
		//  Estimated: `6182`
		// Minimum execution time: 45_035_000 picoseconds.
		Weight::from_parts(46_326_000, 0)
			.saturating_add(Weight::from_parts(0, 6182))
			.saturating_add(T::DbWeight::get().reads(17))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `VelesParachainPallet::ProjectOwners` (r:2 w:0)
	/// Proof: `VelesParachainPallet::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ProjectOwnerDebts` (r:1 w:0)
	/// Proof: `VelesParachainPallet::ProjectOwnerDebts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::Projects` (r:1 w:0)
	/// Proof: `VelesParachainPallet::Projects` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonFootprintReports` (r:1 w:0)
	/// Proof: `VelesParachainPallet::CarbonFootprintReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ProjectProposals` (r:1 w:0)
	/// Proof: `VelesParachainPallet::ProjectProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonCreditBatchProposals` (r:1 w:1)
	/// Proof: `VelesParachainPallet::CarbonCreditBatchProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ComplaintsForAccounts` (r:1 w:0)
	/// Proof: `VelesParachainPallet::ComplaintsForAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ComplaintsForHashes` (r:1 w:0)
	/// Proof: `VelesParachainPallet::ComplaintsForHashes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonFootprintAccounts` (r:1 w:0)
	/// Proof: `VelesParachainPallet::CarbonFootprintAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::Validators` (r:1 w:0)
	/// Proof: `VelesParachainPallet::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::PalletFeeValues` (r:1 w:0)
	/// Proof: `VelesParachainPallet::PalletFeeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::PenaltyLevels` (r:1 w:0)
	/// Proof: `VelesParachainPallet::PenaltyLevels` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `VelesParachainPallet::PalletTimeValues` (r:1 w:0)
	/// Proof: `VelesParachainPallet::PalletTimeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::VotingTimeouts` (r:1 w:1)
	/// Proof: `VelesParachainPallet::VotingTimeouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_carbon_credit_batch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `355`
		//  Estimated: `6295`
		// Minimum execution time: 46_557_000 picoseconds.
		Weight::from_parts(47_399_000, 0)
			.saturating_add(Weight::from_parts(0, 6295))
			.saturating_add(T::DbWeight::get().reads(17))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `VelesParachainPallet::CarbonFootprintAccounts` (r:1 w:0)
	/// Proof: `VelesParachainPallet::CarbonFootprintAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::TraderAccounts` (r:1 w:0)
	/// Proof: `VelesParachainPallet::TraderAccounts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ProjectOwners` (r:1 w:0)
	/// Proof: `VelesParachainPallet::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonCreditBatches` (r:1 w:0)
	/// Proof: `VelesParachainPallet::CarbonCreditBatches` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonCreditHoldings` (r:1 w:1)
	/// Proof: `VelesParachainPallet::CarbonCreditHoldings` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `VelesParachainPallet::PalletTimeValues` (r:1 w:0)
	/// Proof: `VelesParachainPallet::PalletTimeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::SaleOrderTimeouts` (r:1 w:1)
	/// Proof: `VelesParachainPallet::SaleOrderTimeouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonCreditSaleOrders` (r:0 w:1)
	/// Proof: `VelesParachainPallet::CarbonCreditSaleOrders` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_sale_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `329`
		//  Estimated: `3794`
		// Minimum execution time: 29_886_000 picoseconds.
		Weight::from_parts(30_638_000, 0)
			.saturating_add(Weight::from_parts(0, 3794))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Veles::CarbonFootprintAccounts` (r:1 w:0)
	/// Proof: `Veles::CarbonFootprintAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::TraderAccounts` (r:1 w:0)
	/// Proof: `Veles::TraderAccounts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ProjectOwners` (r:4 w:0)
	/// Proof: `Veles::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditSaleOrders` (r:1 w:1)
	/// Proof: `Veles::CarbonCreditSaleOrders` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditBatches` (r:1 w:0)
	/// Proof: `Veles::CarbonCreditBatches` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:5 w:5)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Veles::Projects` (r:1 w:0)
	/// Proof: `Veles::Projects` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::BeneficiarySplits` (r:1 w:0)
	/// Proof: `Veles::BeneficiarySplits` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::PenaltyLevels` (r:1 w:0)
	/// Proof: `Veles::PenaltyLevels` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::Validators` (r:3 w:0)
	/// Proof: `Veles::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditHoldings` (r:2 w:2)
	/// Proof: `Veles::CarbonCreditHoldings` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::SaleOrderTimeouts` (r:1 w:1)
	/// Proof: `Veles::SaleOrderTimeouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn complete_sale_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1231`
		//  Estimated: `14005`
		// Minimum execution time: 211_708_000 picoseconds.
		Weight::from_parts(215_455_000, 0)
			.saturating_add(Weight::from_parts(0, 14050))
			.saturating_add(T::DbWeight::get().reads(22))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	/// Storage: `VelesParachainPallet::CarbonFootprintAccounts` (r:1 w:0)
	/// Proof: `VelesParachainPallet::CarbonFootprintAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::TraderAccounts` (r:1 w:0)
	/// Proof: `VelesParachainPallet::TraderAccounts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ProjectOwners` (r:1 w:0)
	/// Proof: `VelesParachainPallet::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonCreditSaleOrders` (r:1 w:1)
	/// Proof: `VelesParachainPallet::CarbonCreditSaleOrders` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonCreditBatches` (r:1 w:0)
	/// Proof: `VelesParachainPallet::CarbonCreditBatches` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonCreditHoldings` (r:1 w:1)
	/// Proof: `VelesParachainPallet::CarbonCreditHoldings` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::SaleOrderTimeouts` (r:1 w:1)
	/// Proof: `VelesParachainPallet::SaleOrderTimeouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn close_sale_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `515`
		//  Estimated: `3980`
		// Minimum execution time: 27_211_000 picoseconds.
		Weight::from_parts(28_212_000, 0)
			.saturating_add(Weight::from_parts(0, 3980))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `VelesParachainPallet::Validators` (r:3 w:0)
	/// Proof: `VelesParachainPallet::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonFootprintReports` (r:1 w:0)
	/// Proof: `VelesParachainPallet::CarbonFootprintReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ProjectProposals` (r:1 w:0)
	/// Proof: `VelesParachainPallet::ProjectProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonCreditBatchProposals` (r:1 w:0)
	/// Proof: `VelesParachainPallet::CarbonCreditBatchProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ComplaintsForAccounts` (r:2 w:1)
	/// Proof: `VelesParachainPallet::ComplaintsForAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ComplaintsForHashes` (r:1 w:0)
	/// Proof: `VelesParachainPallet::ComplaintsForHashes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonFootprintAccounts` (r:1 w:0)
	/// Proof: `VelesParachainPallet::CarbonFootprintAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ProjectOwners` (r:3 w:0)
	/// Proof: `VelesParachainPallet::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::PalletFeeValues` (r:1 w:0)
	/// Proof: `VelesParachainPallet::PalletFeeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::PenaltyLevels` (r:1 w:0)
	/// Proof: `VelesParachainPallet::PenaltyLevels` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `VelesParachainPallet::Projects` (r:2 w:0)
	/// Proof: `VelesParachainPallet::Projects` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonCreditBatches` (r:2 w:1)
	/// Proof: `VelesParachainPallet::CarbonCreditBatches` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `VelesParachainPallet::PalletTimeValues` (r:1 w:0)
	/// Proof: `VelesParachainPallet::PalletTimeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ComplaintTimeouts` (r:1 w:1)
	/// Proof: `VelesParachainPallet::ComplaintTimeouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn open_account_complaint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `659`
		//  Estimated: `9074`
		// Minimum execution time: 63_979_000 picoseconds.
		Weight::from_parts(66_103_000, 0)
			.saturating_add(Weight::from_parts(0, 9074))
			.saturating_add(T::DbWeight::get().reads(23))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `VelesParachainPallet::Validators` (r:2 w:0)
	/// Proof: `VelesParachainPallet::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonFootprintReports` (r:1 w:0)
	/// Proof: `VelesParachainPallet::CarbonFootprintReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ProjectProposals` (r:1 w:0)
	/// Proof: `VelesParachainPallet::ProjectProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonCreditBatchProposals` (r:1 w:0)
	/// Proof: `VelesParachainPallet::CarbonCreditBatchProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ComplaintsForAccounts` (r:1 w:0)
	/// Proof: `VelesParachainPallet::ComplaintsForAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ComplaintsForHashes` (r:2 w:1)
	/// Proof: `VelesParachainPallet::ComplaintsForHashes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonFootprintAccounts` (r:1 w:0)
	/// Proof: `VelesParachainPallet::CarbonFootprintAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ProjectOwners` (r:2 w:0)
	/// Proof: `VelesParachainPallet::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::PalletFeeValues` (r:1 w:0)
	/// Proof: `VelesParachainPallet::PalletFeeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `VelesParachainPallet::Projects` (r:1 w:0)
	/// Proof: `VelesParachainPallet::Projects` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonCreditBatches` (r:2 w:1)
	/// Proof: `VelesParachainPallet::CarbonCreditBatches` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `VelesParachainPallet::PalletTimeValues` (r:1 w:0)
	/// Proof: `VelesParachainPallet::PalletTimeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ComplaintTimeouts` (r:1 w:1)
	/// Proof: `VelesParachainPallet::ComplaintTimeouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn open_hash_complaint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `659`
		//  Estimated: `6599`
		// Minimum execution time: 54_111_000 picoseconds.
		Weight::from_parts(56_887_000, 0)
			.saturating_add(Weight::from_parts(0, 6599))
			.saturating_add(T::DbWeight::get().reads(19))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `VelesParachainPallet::CarbonFootprintAccounts` (r:1 w:1)
	/// Proof: `VelesParachainPallet::CarbonFootprintAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonCreditBatches` (r:1 w:0)
	/// Proof: `VelesParachainPallet::CarbonCreditBatches` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonCreditHoldings` (r:1 w:1)
	/// Proof: `VelesParachainPallet::CarbonCreditHoldings` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `VelesParachainPallet::CarbonCreditRetirements` (r:0 w:1)
	/// Proof: `VelesParachainPallet::CarbonCreditRetirements` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn retire_carbon_credits() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `397`
		//  Estimated: `3862`
		// Minimum execution time: 28_774_000 picoseconds.
		Weight::from_parts(29_976_000, 0)
			.saturating_add(Weight::from_parts(0, 3862))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Veles::ProjectOwners` (r:1 w:0)
	/// Proof: `Veles::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ProjectOwnerDebts` (r:1 w:1)
	/// Proof: `Veles::ProjectOwnerDebts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:3 w:3)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn repay_project_owner_debts() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `546`
		//  Estimated: `8799`
		// Minimum execution time: 94_427_000 picoseconds.
		Weight::from_parts(96_862_000, 0)
			.saturating_add(Weight::from_parts(0, 8680))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `VelesParachainPallet::PalletTimeValues` (r:1 w:1)
	/// Proof: `VelesParachainPallet::PalletTimeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_pallet_base_time() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `1491`
		// Minimum execution time: 6_031_000 picoseconds.
		Weight::from_parts(6_292_000, 0)
			.saturating_add(Weight::from_parts(0, 1491))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `VelesParachainPallet::CarbonFootprintReports` (r:1 w:1)
	/// Proof: `VelesParachainPallet::CarbonFootprintReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::VotePassRatio` (r:1 w:0)
	/// Proof: `VelesParachainPallet::VotePassRatio` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `VelesParachainPallet::CarbonFootprintAccounts` (r:1 w:1)
	/// Proof: `VelesParachainPallet::CarbonFootprintAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_carbon_footprint_report() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `237`
		//  Estimated: `3702`
		// Minimum execution time: 19_607_000 picoseconds.
		Weight::from_parts(20_177_000, 0)
			.saturating_add(Weight::from_parts(0, 3702))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `VelesParachainPallet::ProjectProposals` (r:1 w:1)
	/// Proof: `VelesParachainPallet::ProjectProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::VotePassRatio` (r:1 w:0)
	/// Proof: `VelesParachainPallet::VotePassRatio` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `VelesParachainPallet::Projects` (r:0 w:1)
	/// Proof: `VelesParachainPallet::Projects` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_project_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `159`
		//  Estimated: `3624`
		// Minimum execution time: 14_918_000 picoseconds.
		Weight::from_parts(15_419_000, 0)
			.saturating_add(Weight::from_parts(0, 3624))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `VelesParachainPallet::CarbonCreditBatchProposals` (r:1 w:1)
	/// Proof: `VelesParachainPallet::CarbonCreditBatchProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::VotePassRatio` (r:1 w:0)
	/// Proof: `VelesParachainPallet::VotePassRatio` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `VelesParachainPallet::Projects` (r:1 w:0)
	/// Proof: `VelesParachainPallet::Projects` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonCreditBatches` (r:0 w:1)
	/// Proof: `VelesParachainPallet::CarbonCreditBatches` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonCreditHoldings` (r:0 w:1)
	/// Proof: `VelesParachainPallet::CarbonCreditHoldings` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_carbon_credit_batch_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `353`
		//  Estimated: `3818`
		// Minimum execution time: 20_409_000 picoseconds.
		Weight::from_parts(21_451_000, 0)
			.saturating_add(Weight::from_parts(0, 3818))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `VelesParachainPallet::CarbonCreditSaleOrders` (r:1 w:1)
	/// Proof: `VelesParachainPallet::CarbonCreditSaleOrders` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonCreditHoldings` (r:1 w:1)
	/// Proof: `VelesParachainPallet::CarbonCreditHoldings` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_carbon_credit_sale_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `350`
		//  Estimated: `3815`
		// Minimum execution time: 16_140_000 picoseconds.
		Weight::from_parts(16_682_000, 0)
			.saturating_add(Weight::from_parts(0, 3815))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `VelesParachainPallet::ComplaintsForAccounts` (r:1 w:1)
	/// Proof: `VelesParachainPallet::ComplaintsForAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::VotePassRatio` (r:1 w:0)
	/// Proof: `VelesParachainPallet::VotePassRatio` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::PalletTimeValues` (r:1 w:0)
	/// Proof: `VelesParachainPallet::PalletTimeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ProjectOwners` (r:1 w:1)
	/// Proof: `VelesParachainPallet::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::PenaltyTimeoutsAccounts` (r:2 w:2)
	/// Proof: `VelesParachainPallet::PenaltyTimeoutsAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::Projects` (r:1 w:0)
	/// Proof: `VelesParachainPallet::Projects` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonCreditBatches` (r:1 w:0)
	/// Proof: `VelesParachainPallet::CarbonCreditBatches` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_complaint_for_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `292`
		//  Estimated: `6232`
		// Minimum execution time: 30_317_000 picoseconds.
		Weight::from_parts(31_229_000, 0)
			.saturating_add(Weight::from_parts(0, 6232))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `VelesParachainPallet::ComplaintsForHashes` (r:1 w:1)
	/// Proof: `VelesParachainPallet::ComplaintsForHashes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::VotePassRatio` (r:1 w:0)
	/// Proof: `VelesParachainPallet::VotePassRatio` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::PalletTimeValues` (r:1 w:0)
	/// Proof: `VelesParachainPallet::PalletTimeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonCreditBatches` (r:1 w:1)
	/// Proof: `VelesParachainPallet::CarbonCreditBatches` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonCreditRetirements` (r:3 w:0)
	/// Proof: `VelesParachainPallet::CarbonCreditRetirements` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonFootprintAccounts` (r:2 w:2)
	/// Proof: `VelesParachainPallet::CarbonFootprintAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::Projects` (r:1 w:0)
	/// Proof: `VelesParachainPallet::Projects` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::ProjectOwnerDebts` (r:1 w:1)
	/// Proof: `VelesParachainPallet::ProjectOwnerDebts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::CarbonCreditHoldings` (r:5 w:0)
	/// Proof: `VelesParachainPallet::CarbonCreditHoldings` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::PenaltyTimeoutsHashes` (r:1 w:1)
	/// Proof: `VelesParachainPallet::PenaltyTimeoutsHashes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_complaint_for_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1303`
		//  Estimated: `14668`
		// Minimum execution time: 77_455_000 picoseconds.
		Weight::from_parts(79_979_000, 0)
			.saturating_add(Weight::from_parts(0, 14668))
			.saturating_add(T::DbWeight::get().reads(17))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `VelesParachainPallet::ProjectOwners` (r:1 w:1)
	/// Proof: `VelesParachainPallet::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::PalletTimeValues` (r:1 w:0)
	/// Proof: `VelesParachainPallet::PalletTimeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_project_owner_penalty_level() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `87`
		//  Estimated: `3552`
		// Minimum execution time: 10_460_000 picoseconds.
		Weight::from_parts(10_820_000, 0)
			.saturating_add(Weight::from_parts(0, 3552))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `VelesParachainPallet::Validators` (r:1 w:1)
	/// Proof: `VelesParachainPallet::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::PalletTimeValues` (r:1 w:0)
	/// Proof: `VelesParachainPallet::PalletTimeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_validator_penalty_level() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `87`
		//  Estimated: `3552`
		// Minimum execution time: 10_560_000 picoseconds.
		Weight::from_parts(10_951_000, 0)
			.saturating_add(Weight::from_parts(0, 3552))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `VelesParachainPallet::Projects` (r:1 w:1)
	/// Proof: `VelesParachainPallet::Projects` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VelesParachainPallet::PalletTimeValues` (r:1 w:0)
	/// Proof: `VelesParachainPallet::PalletTimeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_project_penalty_level() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `122`
		//  Estimated: `3587`
		// Minimum execution time: 11_983_000 picoseconds.
		Weight::from_parts(12_494_000, 0)
			.saturating_add(Weight::from_parts(0, 3587))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

impl WeightInfo for () {
	fn update_vote_pass_ratio() -> Weight {
		Weight::from_parts(9_097_000, 0)
			.saturating_add(Weight::from_parts(0, 1549))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn update_penalty_levels() -> Weight {
		Weight::from_parts(8_867_000, 0)
			.saturating_add(Weight::from_parts(0, 1549))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn update_beneficiary_splits() -> Weight {
		Weight::from_parts(9_648_000, 0)
			.saturating_add(Weight::from_parts(0, 1549))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn update_time_value() -> Weight {
		Weight::from_parts(9_618_000, 0)
			.saturating_add(Weight::from_parts(0, 1549))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn update_fee_value() -> Weight {
		Weight::from_parts(9_718_000, 0)
			.saturating_add(Weight::from_parts(0, 1549))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn register_for_trader_account() -> Weight {
		Weight::from_parts(19_778_000, 0)
			.saturating_add(Weight::from_parts(0, 3625))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn register_for_project_validator_account() -> Weight {
		Weight::from_parts(33_934_000, 0)
			.saturating_add(Weight::from_parts(0, 6106))
			.saturating_add(RocksDbWeight::get().reads(15))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn register_for_project_owner_account() -> Weight {
		Weight::from_parts(33_172_000, 0)
			.saturating_add(Weight::from_parts(0, 6106))
			.saturating_add(RocksDbWeight::get().reads(15))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn submit_carbon_footprint_report() -> Weight {
		Weight::from_parts(37_210_000, 0)
			.saturating_add(Weight::from_parts(0, 6112))
			.saturating_add(RocksDbWeight::get().reads(17))
			.saturating_add(RocksDbWeight::get().writes(2))
	}

	fn cast_vote() -> Weight {
		Weight::from_parts(24_476_000, 0)
			.saturating_add(Weight::from_parts(0, 3813))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn propose_project() -> Weight {
		Weight::from_parts(46_326_000, 0)
			.saturating_add(Weight::from_parts(0, 6182))
			.saturating_add(RocksDbWeight::get().reads(17))
			.saturating_add(RocksDbWeight::get().writes(2))
	}

	fn propose_carbon_credit_batch() -> Weight {
		Weight::from_parts(47_399_000, 0)
			.saturating_add(Weight::from_parts(0, 6295))
			.saturating_add(RocksDbWeight::get().reads(17))
			.saturating_add(RocksDbWeight::get().writes(2))
	}

	fn create_sale_order() -> Weight {
		Weight::from_parts(30_638_000, 0)
			.saturating_add(Weight::from_parts(0, 3794))
			.saturating_add(RocksDbWeight::get().reads(9))
			.saturating_add(RocksDbWeight::get().writes(3))
	}

	fn complete_sale_order() -> Weight {
		Weight::from_parts(215_455_000, 0)
			.saturating_add(Weight::from_parts(0, 14050))
			.saturating_add(RocksDbWeight::get().reads(22))
			.saturating_add(RocksDbWeight::get().writes(9))
	}

	fn close_sale_order() -> Weight {
		Weight::from_parts(28_212_000, 0)
			.saturating_add(Weight::from_parts(0, 3980))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(3))
	}

	fn open_account_complaint() -> Weight {
		Weight::from_parts(66_103_000, 0)
			.saturating_add(Weight::from_parts(0, 9074))
			.saturating_add(RocksDbWeight::get().reads(23))
			.saturating_add(RocksDbWeight::get().writes(3))
	}

	fn open_hash_complaint() -> Weight {
		Weight::from_parts(56_887_000, 0)
			.saturating_add(Weight::from_parts(0, 6599))
			.saturating_add(RocksDbWeight::get().reads(19))
			.saturating_add(RocksDbWeight::get().writes(3))
	}

	fn retire_carbon_credits() -> Weight {
		Weight::from_parts(29_976_000, 0)
			.saturating_add(Weight::from_parts(0, 3862))
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(3))
	}

	fn repay_project_owner_debts() -> Weight {
		Weight::from_parts(96_862_000, 0)
			.saturating_add(Weight::from_parts(0, 8680))
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(4))
	}

	fn update_pallet_base_time() -> Weight {
		Weight::from_parts(6_292_000, 0)
			.saturating_add(Weight::from_parts(0, 1491))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn update_carbon_footprint_report() -> Weight {
		Weight::from_parts(20_177_000, 0)
			.saturating_add(Weight::from_parts(0, 3702))
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(2))
	}

	fn update_project_proposal() -> Weight {
		Weight::from_parts(15_419_000, 0)
			.saturating_add(Weight::from_parts(0, 3624))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}

	fn update_carbon_credit_batch_proposal() -> Weight {
		Weight::from_parts(21_451_000, 0)
			.saturating_add(Weight::from_parts(0, 3818))
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(3))
	}

	fn update_carbon_credit_sale_order() -> Weight {
		Weight::from_parts(16_682_000, 0)
			.saturating_add(Weight::from_parts(0, 3815))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}

	fn update_complaint_for_account() -> Weight {
		Weight::from_parts(31_229_000, 0)
			.saturating_add(Weight::from_parts(0, 6232))
			.saturating_add(RocksDbWeight::get().reads(8))
			.saturating_add(RocksDbWeight::get().writes(4))
	}

	fn update_complaint_for_hash() -> Weight {
		Weight::from_parts(79_979_000, 0)
			.saturating_add(Weight::from_parts(0, 14668))
			.saturating_add(RocksDbWeight::get().reads(17))
			.saturating_add(RocksDbWeight::get().writes(6))
	}

	fn update_project_owner_penalty_level() -> Weight {
		Weight::from_parts(10_820_000, 0)
			.saturating_add(Weight::from_parts(0, 3552))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn update_validator_penalty_level() -> Weight {
		Weight::from_parts(10_951_000, 0)
			.saturating_add(Weight::from_parts(0, 3552))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn update_project_penalty_level() -> Weight {
		Weight::from_parts(12_494_000, 0)
			.saturating_add(Weight::from_parts(0, 3587))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}