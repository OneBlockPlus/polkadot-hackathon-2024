{
  "address": "0x91695a2B145c1e15b1e51b52d555aD0d763275fD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCredibility",
          "type": "uint256"
        }
      ],
      "name": "CredibilityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "credibilityAdded",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CREDIBILITY_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MEMBER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "addStake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newCollator",
          "type": "address"
        }
      ],
      "name": "change_target",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "check_free_balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "credibilityPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentState",
      "outputs": [
        {
          "internalType": "enum LunaCred.daoState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "getCredibilityPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "grant_admin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newMember",
          "type": "address"
        }
      ],
      "name": "grant_member",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "memberStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDelegationStk",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "exMember",
          "type": "address"
        }
      ],
      "name": "remove_member",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reset_dao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "schedule_revoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakedOnBehalfOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract ParachainStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingPrecompileAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "target",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa101dee1790654f2fd28bd42290c35f33dcb8a970d19d53c81b5ab92324ff771",
  "receipt": {
    "to": null,
    "from": "0xAfAeC3e0c839019Cf3be55e7e7500F0edF6A833d",
    "contractAddress": "0x91695a2B145c1e15b1e51b52d555aD0d763275fD",
    "transactionIndex": 0,
    "gasUsed": "2384490",
    "logsBloom": "0x
    "blockHash": "0x4082ad0309e7b682b0939e4fa053a153372e217f89c700acf69f4bacf702cea1",
    "transactionHash": "0xa101dee1790654f2fd28bd42290c35f33dcb8a970d19d53c81b5ab92324ff771",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9100188,
        "transactionHash": "0xa101dee1790654f2fd28bd42290c35f33dcb8a970d19d53c81b5ab92324ff771",
        "address": "0x91695a2B145c1e15b1e51b52d555aD0d763275fD",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000afaec3e0c839019cf3be55e7e7500f0edf6a833d",
          "0x000000000000000000000000afaec3e0c839019cf3be55e7e7500f0edf6a833d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x4082ad0309e7b682b0939e4fa053a153372e217f89c700acf69f4bacf702cea1"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9100188,
        "transactionHash": "0xa101dee1790654f2fd28bd42290c35f33dcb8a970d19d53c81b5ab92324ff771",
        "address": "0x91695a2B145c1e15b1e51b52d555aD0d763275fD",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xffa60083152bd11704a80cc8c7a409dad8aa74288b454a3ba0e94c0abc7cf168",
          "0x000000000000000000000000afaec3e0c839019cf3be55e7e7500f0edf6a833d",
          "0x000000000000000000000000afaec3e0c839019cf3be55e7e7500f0edf6a833d"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x4082ad0309e7b682b0939e4fa053a153372e217f89c700acf69f4bacf702cea1"
      }
    ],
    "blockNumber": 9100188,
    "cumulativeGasUsed": "2384490",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd34fedcEfBaaCbd74bD3d0bB80b3a67e6B2dEfb7",
    "0xAfAeC3e0c839019Cf3be55e7e7500F0edF6A833d"
  ],
  "numDeployments": 2,
  "solcInputHash": "ee1c6fac7c37fc3c71663f11f344ef95",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCredibility\",\"type\":\"uint256\"}],\"name\":\"CredibilityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"credibilityAdded\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CREDIBILITY_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MEMBER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCollator\",\"type\":\"address\"}],\"name\":\"change_target\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"check_free_balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"credibilityPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"internalType\":\"enum LunaCred.daoState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"getCredibilityPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"grant_admin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMember\",\"type\":\"address\"}],\"name\":\"grant_member\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"memberStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDelegationStk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"exMember\",\"type\":\"address\"}],\"name\":\"remove_member\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset_dao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schedule_revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedOnBehalfOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract ParachainStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPrecompileAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LunaCred.sol\":\"LunaCred\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/LunaCred.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// This is a PoC to use the staking precompile wrapper as a Solidity developer.\\npragma solidity >=0.8.0;\\n\\nimport \\\"./StakingInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ncontract LunaCred is AccessControl {\\n\\n    using SafeMath for uint256;\\n    \\n    // Role definition for contract members\\n    bytes32 public constant MEMBER = keccak256(\\\"MEMBER\\\");\\n\\n    // Possible states for the DAO to be in:\\n    // COLLECTING: the DAO is collecting funds before creating a delegation once the minimum delegation stake has been reached\\n    // STAKING: the DAO has an active delegation\\n    // REVOKING: the DAO has scheduled a delegation revoke\\n    // REVOKED: the scheduled revoke has been executed\\n    enum daoState{ COLLECTING, STAKING, REVOKING, REVOKED }\\n\\n    // Current state that the DAO is in\\n    daoState public currentState; \\n\\n    // Member stakes (doesnt include rewards, represents member shares)\\n    mapping(address => uint256) public memberStakes;\\n\\n    //credbility points mapping for the stakers and the addresses\\n    mapping(address => uint256) public credibilityPoints;\\n    \\n       mapping(address => mapping(address => uint256)) public stakedOnBehalfOf;\\n\\n    // Total Staking Pool (doesnt include rewards, represents total shares)\\n    uint256 public totalStake;\\n\\n    // The ParachainStaking wrapper at the known pre-compile address. This will be used to make\\n    // all calls to the underlying staking solution\\n    ParachainStaking public staking;\\n    \\n    // Minimum Delegation Amount\\n    uint256 public constant minDelegationStk = 1 ether;\\n    // / Credibility points are 30% of staked amount\\n    uint256 public constant CREDIBILITY_RATE = 30;\\n    // Moonbeam Staking Precompile address\\n    address public constant stakingPrecompileAddress = 0x0000000000000000000000000000000000000800;\\n\\n    // The collator that this DAO is currently nominating\\n    address public target;\\n\\n    // Event for a member deposit\\n    // event deposit(address indexed _from, uint _value);\\n   event Deposit(address indexed from, address indexed recipient, uint256 value, uint256 credibilityAdded);\\n\\n    // Event for a member withdrawal\\n    event withdrawal(address indexed _from, address indexed _to, uint _value);\\n     event CredibilityUpdated(address indexed user, uint256 newCredibility);\\n\\n    // Initialize a new DelegationDao dedicated to delegating to the given collator target.\\n    constructor(address _target, address admin) {\\n        \\n        //Sets the collator that this DAO nominating\\n        target = _target;\\n        \\n        // Initializes Moonbeam's parachain staking precompile\\n        staking = ParachainStaking(stakingPrecompileAddress);\\n        \\n        //Initializes Roles\\n        // _setupRole(DEFAULT_ADMIN_ROLE, admin);\\n        // _setupRole(MEMBER, admin);\\n\\n       // Grant the admin the default admin role\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n\\n        // Grant the admin the MEMBER role\\n        _grantRole(MEMBER, admin);\\n        //Initialize the DAO state\\n        currentState = daoState.COLLECTING;\\n        \\n    }\\n\\n    // Grant a user the role of admin\\n    function grant_admin(address newAdmin)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        onlyRole(MEMBER)\\n    {\\n        grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\\n        grantRole(MEMBER, newAdmin);\\n    }\\n\\n    // Grant a user membership\\n    function grant_member(address newMember)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        grantRole(MEMBER, newMember);\\n    }\\n\\n    // Revoke a user membership\\n    function remove_member(address payable exMember)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        revokeRole(MEMBER, exMember);\\n    }\\n\\n    // Increase member stake via a payable function and automatically stake the added amount if possible\\n    // function add_stake() external payable onlyRole(MEMBER) {\\n    //     if (currentState == daoState.STAKING ) {\\n    //         // Sanity check\\n    //         if(!staking.isDelegator(address(this))){\\n    //              revert(\\\"The DAO is in an inconsistent state.\\\");\\n    //         }\\n    //         memberStakes[msg.sender] = memberStakes[msg.sender].add(msg.value);\\n    //         totalStake = totalStake.add(msg.value);\\n    //         emit deposit(msg.sender, msg.value);\\n    //         staking.delegatorBondMore(target, msg.value);\\n    //     }\\n    //     else if  (currentState == daoState.COLLECTING ){\\n    //         memberStakes[msg.sender] = memberStakes[msg.sender].add(msg.value);\\n    //         totalStake = totalStake.add(msg.value);\\n    //         emit deposit(msg.sender, msg.value);\\n    //         if(totalStake < minDelegationStk){\\n    //             return;\\n    //         } else {\\n    //             //initialiate the delegation and change the state          \\n    //             staking.delegate(target, address(this).balance, staking.candidateDelegationCount(target), staking.delegatorDelegationCount(address(this)));\\n    //             currentState = daoState.STAKING;\\n    //         }\\n    //     }\\n    //     else {\\n    //         revert(\\\"The DAO is not accepting new stakes in the current state.\\\");\\n    //     }\\n    // }\\n\\n// uint256 public constant CREDIBILITY_POINTS_RATE = 100; // 1 token = 100 points\\n\\n// Modify the add_stake function\\n    function addStake(address recipient) external payable onlyRole(MEMBER) {\\n        require(hasRole(MEMBER, recipient), \\\"Recipient must be a DAO member\\\");\\n        \\n        if (currentState == daoState.STAKING) {\\n            require(staking.isDelegator(address(this)), \\\"DAO is in an inconsistent state\\\");\\n            staking.delegatorBondMore(target, msg.value);\\n        } else if (currentState == daoState.COLLECTING) {\\n            if (address(this).balance >= minDelegationStk) {\\n                staking.delegate(target, address(this).balance, staking.candidateDelegationCount(target), staking.delegatorDelegationCount(address(this)));\\n                currentState = daoState.STAKING;\\n            }\\n        } else {\\n            revert(\\\"DAO is not accepting new stakes\\\");\\n        }\\n        \\n        memberStakes[msg.sender] = memberStakes[msg.sender].add(msg.value);\\n        totalStake = totalStake.add(msg.value);\\n        \\n        // Calculate and add credibility points\\n        uint256 credibilityAdded = msg.value.mul(CREDIBILITY_RATE).div(100);\\n        credibilityPoints[recipient] = credibilityPoints[recipient].add(credibilityAdded);\\n        \\n        emit Deposit(msg.sender, recipient, msg.value, credibilityAdded);\\n    }\\n    \\n\\n// Add a new function to check credibility points\\nfunction getCredibilityPoints(address member) public view returns (uint256) {\\n    return credibilityPoints[member];\\n}\\n\\n    // Function for a user to withdraw their stake\\n    function withdraw(address payable account) public onlyRole(MEMBER) {\\n        require(currentState != daoState.STAKING, \\\"The DAO is not in the correct state to withdraw.\\\");\\n        if (currentState == daoState.REVOKING) {\\n            bool result = execute_revoke();\\n            require(result, \\\"Schedule revoke delay is not finished yet.\\\");\\n        }\\n        if (currentState == daoState.REVOKED || currentState == daoState.COLLECTING) {\\n            //Sanity checks\\n            if(staking.isDelegator(address(this))){\\n                 revert(\\\"The DAO is in an inconsistent state.\\\");\\n            }\\n            require(totalStake!=0, \\\"Cannot divide by zero.\\\");\\n            //Calculate the withdrawal amount including staking rewards\\n            uint amount = address(this)\\n                .balance\\n                .mul(memberStakes[msg.sender])\\n                .div(totalStake);\\n            require(check_free_balance() >= amount, \\\"Not enough free balance for withdrawal.\\\");\\n            Address.sendValue(account, amount);\\n            totalStake = totalStake.sub(memberStakes[msg.sender]);\\n            memberStakes[msg.sender] = 0;\\n            emit withdrawal(msg.sender, account, amount);\\n        }\\n    }\\n\\n    // Schedule revoke, admin only\\n    function schedule_revoke() public onlyRole(DEFAULT_ADMIN_ROLE){\\n        require(currentState == daoState.STAKING, \\\"The DAO is not in the correct state to schedule a revoke.\\\");\\n        staking.scheduleRevokeDelegation(target);\\n        currentState = daoState.REVOKING;\\n    }\\n    \\n    // Try to execute the revoke, returns true if it succeeds, false if it doesn't\\n    function execute_revoke() internal onlyRole(MEMBER) returns(bool) {\\n        require(currentState == daoState.REVOKING, \\\"The DAO is not in the correct state to execute a revoke.\\\");\\n        staking.executeDelegationRequest(address(this), target);\\n        if (staking.isDelegator(address(this))){\\n            return false;\\n        } else {\\n            currentState = daoState.REVOKED;\\n            return true;\\n        }\\n    }\\n\\n    // Check how much free balance the DAO currently has. It should be the staking rewards if the DAO state is anything other than REVOKED or COLLECTING. \\n    function check_free_balance() public view onlyRole(MEMBER) returns(uint256) {\\n        return address(this).balance;\\n    }\\n    \\n    // Change the collator target, admin only\\n    function change_target(address newCollator) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(currentState == daoState.REVOKED || currentState == daoState.COLLECTING, \\\"The DAO is not in the correct state to change staking target.\\\");\\n        target = newCollator;\\n    }\\n\\n    // Reset the DAO state back to COLLECTING, admin only\\n    function reset_dao() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        currentState = daoState.COLLECTING;\\n    }\\n\\n\\n}\",\"keccak256\":\"0xcdfb5c5c6d1512713ccc05ca1fb694ec50e9736864e0402ee783266158a7aac0\",\"license\":\"MIT\"},\"contracts/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.20;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, throws on overflow.\\n  */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n    c = a * b;\\n    assert(c / a == b);\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers, truncating the quotient.\\n  */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\\n    // uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n    return a / b;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    assert(b <= a);\\n    return a - b;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, throws on overflow.\\n  */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    c = a + b;\\n    assert(c >= a);\\n    return c;\\n  }\\n}\",\"keccak256\":\"0xd51ab997cd808b68cfb7be410190ef88692d5019b73b90f8a9761727a03673e2\",\"license\":\"GPL-3.0-only\"},\"contracts/StakingInterface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.3;\\n\\n/// @dev The ParachainStaking contract's address.\\naddress constant PARACHAIN_STAKING_ADDRESS = 0x0000000000000000000000000000000000000800;\\n\\n/// @dev The ParachainStaking contract's instance.\\nParachainStaking constant PARACHAIN_STAKING_CONTRACT = ParachainStaking(\\n    PARACHAIN_STAKING_ADDRESS\\n);\\n\\n/// @author The Moonbeam Team\\n/// @title Pallet Parachain Staking Interface\\n/// @dev The interface through which solidity contracts will interact with Parachain Staking\\n/// We follow this same interface including four-byte function selectors, in the precompile that\\n/// wraps the pallet\\n/// @custom:address 0x0000000000000000000000000000000000000800\\ninterface ParachainStaking {\\n    /// @dev Check whether the specified address is currently a staking delegator\\n    /// @custom:selector fd8ab482\\n    /// @param delegator the address that we want to confirm is a delegator\\n    /// @return A boolean confirming whether the address is a delegator\\n    function isDelegator(address delegator) external view returns (bool);\\n\\n    /// @dev Check whether the specified address is currently a collator candidate\\n    /// @custom:selector d51b9e93\\n    /// @param candidate the address that we want to confirm is a collator andidate\\n    /// @return A boolean confirming whether the address is a collator candidate\\n    function isCandidate(address candidate) external view returns (bool);\\n\\n    /// @dev Check whether the specifies address is currently a part of the active set\\n    /// @custom:selector 740d7d2a\\n    /// @param candidate the address that we want to confirm is a part of the active set\\n    /// @return A boolean confirming whether the address is a part of the active set\\n    function isSelectedCandidate(\\n        address candidate\\n    ) external view returns (bool);\\n\\n    /// @dev Total points awarded to all collators in a particular round\\n    /// @custom:selector 9799b4e7\\n    /// @param round the round for which we are querying the points total\\n    /// @return The total points awarded to all collators in the round\\n    function points(uint256 round) external view returns (uint256);\\n\\n    /// @dev Total points awarded to a specific collator in a particular round.\\n    /// A value of `0` may signify that no blocks were produced or that the storage for that round has been removed\\n    /// @custom:selector bfea66ac\\n    /// @param round the round for which we are querying the awarded points\\n    /// @param candidate The candidate to whom the points are awarded\\n    /// @return The total points awarded to the collator for the provided round\\n    function awardedPoints(\\n        uint32 round,\\n        address candidate\\n    ) external view returns (uint32);\\n\\n    /// @dev The amount delegated in support of the candidate by the delegator\\n    /// @custom:selector a73e51bc\\n    /// @param delegator Who made this delegation\\n    /// @param candidate The candidate for which the delegation is in support of\\n    /// @return The amount of the delegation in support of the candidate by the delegator\\n    function delegationAmount(\\n        address delegator,\\n        address candidate\\n    ) external view returns (uint256);\\n\\n    /// @dev Whether the delegation is in the top delegations\\n    /// @custom:selector 91cc8657\\n    /// @param delegator Who made this delegation\\n    /// @param candidate The candidate for which the delegation is in support of\\n    /// @return If delegation is in top delegations (is counted)\\n    function isInTopDelegations(\\n        address delegator,\\n        address candidate\\n    ) external view returns (bool);\\n\\n    /// @dev Get the minimum delegation amount\\n    /// @custom:selector 02985992\\n    /// @return The minimum delegation amount\\n    function minDelegation() external view returns (uint256);\\n\\n    /// @dev Get the CandidateCount weight hint\\n    /// @custom:selector a9a981a3\\n    /// @return The CandidateCount weight hint\\n    function candidateCount() external view returns (uint256);\\n\\n    /// @dev Get the current round number\\n    /// @custom:selector 146ca531\\n    /// @return The current round number\\n    function round() external view returns (uint256);\\n\\n    /// @dev Get the CandidateDelegationCount weight hint\\n    /// @custom:selector 2ec087eb\\n    /// @param candidate The address for which we are querying the nomination count\\n    /// @return The number of nominations backing the collator\\n    function candidateDelegationCount(\\n        address candidate\\n    ) external view returns (uint32);\\n\\n    /// @dev Get the CandidateAutoCompoundingDelegationCount weight hint\\n    /// @custom:selector 905f0806\\n    /// @param candidate The address for which we are querying the auto compounding\\n    ///     delegation count\\n    /// @return The number of auto compounding delegations\\n    function candidateAutoCompoundingDelegationCount(\\n        address candidate\\n    ) external view returns (uint32);\\n\\n    /// @dev Get the DelegatorDelegationCount weight hint\\n    /// @custom:selector 067ec822\\n    /// @param delegator The address for which we are querying the delegation count\\n    /// @return The number of delegations made by the delegator\\n    function delegatorDelegationCount(\\n        address delegator\\n    ) external view returns (uint256);\\n\\n    /// @dev Get the selected candidates for the current round\\n    /// @custom:selector bcf868a6\\n    /// @return The selected candidate accounts\\n    function selectedCandidates() external view returns (address[] memory);\\n\\n    /// @dev Whether there exists a pending request for a delegation made by a delegator\\n    /// @custom:selector 3b16def8\\n    /// @param delegator the delegator that made the delegation\\n    /// @param candidate the candidate for which the delegation was made\\n    /// @return Whether a pending request exists for such delegation\\n    function delegationRequestIsPending(\\n        address delegator,\\n        address candidate\\n    ) external view returns (bool);\\n\\n    /// @dev Whether there exists a pending exit for candidate\\n    /// @custom:selector 43443682\\n    /// @param candidate the candidate for which the exit request was made\\n    /// @return Whether a pending request exists for such delegation\\n    function candidateExitIsPending(\\n        address candidate\\n    ) external view returns (bool);\\n\\n    /// @dev Whether there exists a pending bond less request made by a candidate\\n    /// @custom:selector d0deec11\\n    /// @param candidate the candidate which made the request\\n    /// @return Whether a pending bond less request was made by the candidate\\n    function candidateRequestIsPending(\\n        address candidate\\n    ) external view returns (bool);\\n\\n    /// @dev Returns the percent value of auto-compound set for a delegation\\n    /// @custom:selector b4d4c7fd\\n    /// @param delegator the delegator that made the delegation\\n    /// @param candidate the candidate for which the delegation was made\\n    /// @return Percent of rewarded amount that is auto-compounded on each payout\\n    function delegationAutoCompound(\\n        address delegator,\\n        address candidate\\n    ) external view returns (uint8);\\n\\n    /// @dev Join the set of collator candidates\\n    /// @custom:selector 1f2f83ad\\n    /// @param amount The amount self-bonded by the caller to become a collator candidate\\n    /// @param candidateCount The number of candidates in the CandidatePool\\n    function joinCandidates(uint256 amount, uint256 candidateCount) external;\\n\\n    /// @dev Request to leave the set of collator candidates\\n    /// @custom:selector b1a3c1b7\\n    /// @param candidateCount The number of candidates in the CandidatePool\\n    function scheduleLeaveCandidates(uint256 candidateCount) external;\\n\\n    /// @dev Execute due request to leave the set of collator candidates\\n    /// @custom:selector 3867f308\\n    /// @param candidate The candidate address for which the pending exit request will be executed\\n    /// @param candidateDelegationCount The number of delegations for the candidate to be revoked\\n    function executeLeaveCandidates(\\n        address candidate,\\n        uint256 candidateDelegationCount\\n    ) external;\\n\\n    /// @dev Cancel request to leave the set of collator candidates\\n    /// @custom:selector 9c76ebb4\\n    /// @param candidateCount The number of candidates in the CandidatePool\\n    function cancelLeaveCandidates(uint256 candidateCount) external;\\n\\n    /// @dev Temporarily leave the set of collator candidates without unbonding\\n    /// @custom:selector a6485ccd\\n    function goOffline() external;\\n\\n    /// @dev Rejoin the set of collator candidates if previously had called `goOffline`\\n    /// @custom:selector 6e5b676b\\n    function goOnline() external;\\n\\n    /// @dev Request to bond more for collator candidates\\n    /// @custom:selector a52c8643\\n    /// @param more The additional amount self-bonded\\n    function candidateBondMore(uint256 more) external;\\n\\n    /// @dev Request to bond less for collator candidates\\n    /// @custom:selector 60744ae0\\n    /// @param less The amount to be subtracted from self-bond and unreserved\\n    function scheduleCandidateBondLess(uint256 less) external;\\n\\n    /// @dev Execute pending candidate bond request\\n    /// @custom:selector 2e290290\\n    /// @param candidate The address for the candidate for which the request will be executed\\n    function executeCandidateBondLess(address candidate) external;\\n\\n    /// @dev Cancel pending candidate bond request\\n    /// @custom:selector b5ad5f07\\n    function cancelCandidateBondLess() external;\\n\\n    /// @notice DEPRECATED use delegateWithAutoCompound instead for lower weight and better UX\\n    /// @dev Make a delegation in support of a collator candidate\\n    /// @custom:selector 829f5ee3\\n    /// @param candidate The address of the supported collator candidate\\n    /// @param amount The amount bonded in support of the collator candidate\\n    /// @param candidateDelegationCount The number of delegations in support of the candidate\\n    /// @param delegatorDelegationCount The number of existing delegations by the caller\\n    function delegate(\\n        address candidate,\\n        uint256 amount,\\n        uint256 candidateDelegationCount,\\n        uint256 delegatorDelegationCount\\n    ) external;\\n\\n    /// @dev Make a delegation in support of a collator candidate\\n    /// @custom:selector 4b8bc9bf\\n    /// @param candidate The address of the supported collator candidate\\n    /// @param amount The amount bonded in support of the collator candidate\\n    /// @param autoCompound The percent of reward that should be auto-compounded\\n    /// @param candidateDelegationCount The number of delegations in support of the candidate\\n    /// @param candidateAutoCompoundingDelegationCount The number of auto-compounding delegations\\n    /// in support of the candidate\\n    /// @param delegatorDelegationCount The number of existing delegations by the caller\\n    function delegateWithAutoCompound(\\n        address candidate,\\n        uint256 amount,\\n        uint8 autoCompound,\\n        uint256 candidateDelegationCount,\\n        uint256 candidateAutoCompoundingDelegationCount,\\n        uint256 delegatorDelegationCount\\n    ) external;\\n\\n    /// @dev Request to revoke an existing delegation\\n    /// @custom:selector 1a1c740c\\n    /// @param candidate The address of the collator candidate which will no longer be supported\\n    function scheduleRevokeDelegation(address candidate) external;\\n\\n    /// @dev Bond more for delegators with respect to a specific collator candidate\\n    /// @custom:selector 0465135b\\n    /// @param candidate The address of the collator candidate for which delegation shall increase\\n    /// @param more The amount by which the delegation is increased\\n    function delegatorBondMore(address candidate, uint256 more) external;\\n\\n    /// @dev Request to bond less for delegators with respect to a specific collator candidate\\n    /// @custom:selector c172fd2b\\n    /// @param candidate The address of the collator candidate for which delegation shall decrease\\n    /// @param less The amount by which the delegation is decreased (upon execution)\\n    function scheduleDelegatorBondLess(\\n        address candidate,\\n        uint256 less\\n    ) external;\\n\\n    /// @dev Execute pending delegation request (if exists && is due)\\n    /// @custom:selector e98c8abe\\n    /// @param delegator The address of the delegator\\n    /// @param candidate The address of the candidate\\n    function executeDelegationRequest(\\n        address delegator,\\n        address candidate\\n    ) external;\\n\\n    /// @dev Cancel pending delegation request (already made in support of input by caller)\\n    /// @custom:selector c90eee83\\n    /// @param candidate The address of the candidate\\n    function cancelDelegationRequest(address candidate) external;\\n\\n    /// @dev Sets an auto-compound value for a delegation\\n    /// @custom:selector faa1786f\\n    /// @param candidate The address of the supported collator candidate\\n    /// @param value The percent of reward that should be auto-compounded\\n    /// @param candidateAutoCompoundingDelegationCount The number of auto-compounding delegations\\n    /// in support of the candidate\\n    /// @param delegatorDelegationCount The number of existing delegations by the caller\\n    function setAutoCompound(\\n        address candidate,\\n        uint8 value,\\n        uint256 candidateAutoCompoundingDelegationCount,\\n        uint256 delegatorDelegationCount\\n    ) external;\\n\\n    /// @dev Fetch the total staked amount of a delegator, regardless of the\\n    /// candidate.\\n    /// @custom:selector e6861713\\n    /// @param delegator Address of the delegator.\\n    /// @return Total amount of stake.\\n    function getDelegatorTotalStaked(\\n        address delegator\\n    ) external view returns (uint256);\\n\\n    /// @dev Fetch the total staked towards a candidate.\\n    /// @custom:selector bc5a1043\\n    /// @param candidate Address of the candidate.\\n    /// @return Total amount of stake.\\n    function getCandidateTotalCounted(\\n        address candidate\\n    ) external view returns (uint256);\\n}\",\"keccak256\":\"0x0f74c9ba0235658bcdb4a141031ae140c2d54e2bb29d8546429c1d8bd0829386\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620018f3380380620018f3833981016040819052620000349162000178565b600780546001600160a01b0384166001600160a01b031991821617909155600680549091166108001790556200006c600082620000ac565b50620000997fffa60083152bd11704a80cc8c7a409dad8aa74288b454a3ba0e94c0abc7cf16882620000ac565b50506001805460ff1916905550620001b0565b6000828152602081815260408083206001600160a01b038516845290915281205460ff1662000151576000838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055620001083390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600162000155565b5060005b92915050565b80516001600160a01b03811681146200017357600080fd5b919050565b600080604083850312156200018c57600080fd5b62000197836200015b565b9150620001a7602084016200015b565b90509250929050565b61173380620001c06000396000f3fe6080604052600436106101b75760003560e01c8063760520b4116100ec578063a85fdc401161008a578063d21d7b3111610064578063d21d7b3114610513578063d4b8399214610528578063d547741f14610548578063e1147b481461056857600080fd5b8063a85fdc40146104a6578063c54c90d5146104bb578063c7eb35ff146104f357600080fd5b80638e63560b116100c65780638e63560b1461042f57806391d148541461045c578063a217fddf1461047c578063a45e6aa41461049157600080fd5b8063760520b4146103c3578063823cb4aa146103e35780638b0e9f3f1461041957600080fd5b806324cdf45811610159578063485eb85c11610133578063485eb85c1461033a5780634cf088d91461035657806351cff8d91461038e5780636aa56cbd146103ae57600080fd5b806324cdf458146102cd5780632f2ff15d146102fa57806336568abe1461031a57600080fd5b80630ddf758e116101955780630ddf758e1461023a578063107679041461025a5780631c681a421461026d578063248a9ca31461029d57600080fd5b806301ffc9a7146101bc57806308f496dd146101f15780630c3f6acf14610213575b600080fd5b3480156101c857600080fd5b506101dc6101d73660046114c0565b61057e565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b5061021161020c3660046114ff565b6105b5565b005b34801561021f57600080fd5b5060015461022d9060ff1681565b6040516101e89190611532565b34801561024657600080fd5b506102116102553660046114ff565b610600565b6102116102683660046114ff565b610627565b34801561027957600080fd5b5061028f6000805160206116de83398151915281565b6040519081526020016101e8565b3480156102a957600080fd5b5061028f6102b836600461155a565b60009081526020819052604090206001015490565b3480156102d957600080fd5b5061028f6102e83660046114ff565b60026020526000908152604090205481565b34801561030657600080fd5b50610211610315366004611573565b610aa4565b34801561032657600080fd5b50610211610335366004611573565b610acf565b34801561034657600080fd5b5061028f670de0b6b3a764000081565b34801561036257600080fd5b50600654610376906001600160a01b031681565b6040516001600160a01b0390911681526020016101e8565b34801561039a57600080fd5b506102116103a93660046114ff565b610b02565b3480156103ba57600080fd5b50610211610e67565b3480156103cf57600080fd5b506102116103de3660046114ff565b610f64565b3480156103ef57600080fd5b5061028f6103fe3660046114ff565b6001600160a01b031660009081526003602052604090205490565b34801561042557600080fd5b5061028f60055481565b34801561043b57600080fd5b5061028f61044a3660046114ff565b60036020526000908152604090205481565b34801561046857600080fd5b506101dc610477366004611573565b610f87565b34801561048857600080fd5b5061028f600081565b34801561049d57600080fd5b50610211610fb0565b3480156104b257600080fd5b5061028f601e81565b3480156104c757600080fd5b5061028f6104d63660046115a3565b600460209081526000928352604080842090915290825290205481565b3480156104ff57600080fd5b5061021161050e3660046114ff565b610fce565b34801561051f57600080fd5b5061028f611097565b34801561053457600080fd5b50600754610376906001600160a01b031681565b34801561055457600080fd5b50610211610563366004611573565b6110b8565b34801561057457600080fd5b5061037661080081565b60006001600160e01b03198216637965db0b60e01b14806105af57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006105c0816110dd565b6000805160206116de8339815191526105d8816110dd565b6105e3600084610aa4565b6105fb6000805160206116de83398151915284610aa4565b505050565b600061060b816110dd565b6106236000805160206116de83398151915283610aa4565b5050565b6000805160206116de83398151915261063f816110dd565b6106576000805160206116de83398151915283610f87565b6106a85760405162461bcd60e51b815260206004820152601e60248201527f526563697069656e74206d75737420626520612044414f206d656d626572000060448201526064015b60405180910390fd5b6001805460ff1660038111156106c0576106c061151c565b036107e957600654604051637ec55a4160e11b81523060048201526001600160a01b039091169063fd8ab48290602401602060405180830381865afa15801561070d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073191906115d1565b61077d5760405162461bcd60e51b815260206004820152601f60248201527f44414f20697320696e20616e20696e636f6e73697374656e7420737461746500604482015260640161069f565b600654600754604051630465135b60e01b81526001600160a01b039182166004820152346024820152911690630465135b90604401600060405180830381600087803b1580156107cc57600080fd5b505af11580156107e0573d6000803e3d6000fd5b505050506109cc565b600060015460ff1660038111156108025761080261151c565b0361098457670de0b6b3a7640000471061097f57600654600754604051632ec087eb60e01b81526001600160a01b0391821660048201819052919092169163829f5ee3919047908490632ec087eb90602401602060405180830381865afa158015610871573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089591906115f3565b60065460405163033f641160e11b81523060048201526001600160a01b039091169063067ec82290602401602060405180830381865afa1580156108dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109019190611619565b6040516001600160e01b031960e087901b1681526001600160a01b039094166004850152602484019290925263ffffffff1660448301526064820152608401600060405180830381600087803b15801561095a57600080fd5b505af115801561096e573d6000803e3d6000fd5b50506001805460ff19168117905550505b6109cc565b60405162461bcd60e51b815260206004820152601f60248201527f44414f206973206e6f7420616363657074696e67206e6577207374616b657300604482015260640161069f565b336000908152600260205260409020546109e690346110ea565b33600090815260026020526040902055600554610a0390346110ea565b6005556000610a1e6064610a1834601e611108565b9061113e565b6001600160a01b038416600090815260036020526040902054909150610a4490826110ea565b6001600160a01b038416600081815260036020908152604091829020939093558051348152928301849052909133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d791015b60405180910390a3505050565b600082815260208190526040902060010154610abf816110dd565b610ac98383611151565b50505050565b6001600160a01b0381163314610af85760405163334bd91960e11b815260040160405180910390fd5b6105fb82826111e3565b6000805160206116de833981519152610b1a816110dd565b6001805460ff166003811115610b3257610b3261151c565b03610b865760405162461bcd60e51b815260206004820152603060248201526000805160206116be83398151915260448201526f30ba32903a37903bb4ba34323930bb9760811b606482015260840161069f565b600260015460ff166003811115610b9f57610b9f61151c565b03610c12576000610bae61124e565b905080610c105760405162461bcd60e51b815260206004820152602a60248201527f5363686564756c65207265766f6b652064656c6179206973206e6f742066696e60448201526934b9b432b2103cb2ba1760b11b606482015260840161069f565b505b600360015460ff166003811115610c2b57610c2b61151c565b1480610c4d5750600060015460ff166003811115610c4b57610c4b61151c565b145b1561062357600654604051637ec55a4160e11b81523060048201526001600160a01b039091169063fd8ab48290602401602060405180830381865afa158015610c9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbe91906115d1565b15610d175760405162461bcd60e51b8152602060048201526024808201527f5468652044414f20697320696e20616e20696e636f6e73697374656e7420737460448201526330ba329760e11b606482015260840161069f565b600554600003610d625760405162461bcd60e51b815260206004820152601660248201527521b0b73737ba103234bb34b23290313c903d32b9379760511b604482015260640161069f565b600554336000908152600260205260408120549091610d8691610a18904790611108565b905080610d91611097565b1015610def5760405162461bcd60e51b815260206004820152602760248201527f4e6f7420656e6f75676820667265652062616c616e636520666f722077697468604482015266323930bbb0b61760c91b606482015260840161069f565b610df983826113d4565b33600090815260026020526040902054600554610e159161146b565b6005553360008181526002602052604080822091909155516001600160a01b03851691907e29c0b4d760ad1c766c10bcd447eb6426e49a6f1aab829f0611fc7476f1c29390610a979085815260200190565b6000610e72816110dd565b6001805460ff166003811115610e8a57610e8a61151c565b14610eeb5760405162461bcd60e51b815260206004820152603960248201526000805160206116be83398151915260448201527f61746520746f207363686564756c652061207265766f6b652e00000000000000606482015260840161069f565b6006546007546040516306871d0360e21b81526001600160a01b039182166004820152911690631a1c740c90602401600060405180830381600087803b158015610f3457600080fd5b505af1158015610f48573d6000803e3d6000fd5b5050600180546002935090915060ff191681835b021790555050565b6000610f6f816110dd565b6106236000805160206116de833981519152836110b8565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610fbb816110dd565b600180546000919060ff19168183610f5c565b6000610fd9816110dd565b600360015460ff166003811115610ff257610ff261151c565b14806110145750600060015460ff1660038111156110125761101261151c565b145b6110745760405162461bcd60e51b815260206004820152603d60248201526000805160206116be83398151915260448201527f61746520746f206368616e6765207374616b696e67207461726765742e000000606482015260840161069f565b50600780546001600160a01b0319166001600160a01b0392909216919091179055565b60006000805160206116de8339815191526110b1816110dd565b4791505090565b6000828152602081905260409020600101546110d3816110dd565b610ac983836111e3565b6110e78133611487565b50565b60006110f68284611648565b9050828110156105af576105af61165b565b60008260000361111a575060006105af565b6111248284611671565b9050816111318483611688565b146105af576105af61165b565b600061114a8284611688565b9392505050565b600061115d8383610f87565b6111db576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556111933390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016105af565b5060006105af565b60006111ef8383610f87565b156111db576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016105af565b60006000805160206116de833981519152611268816110dd565b600260015460ff1660038111156112815761128161151c565b146112e25760405162461bcd60e51b815260206004820152603860248201526000805160206116be83398151915260448201527f61746520746f20657865637574652061207265766f6b652e0000000000000000606482015260840161069f565b6006546007546040516374c6455f60e11b81523060048201526001600160a01b03918216602482015291169063e98c8abe90604401600060405180830381600087803b15801561133157600080fd5b505af1158015611345573d6000803e3d6000fd5b5050600654604051637ec55a4160e11b81523060048201526001600160a01b03909116925063fd8ab4829150602401602060405180830381865afa158015611391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b591906115d1565b156113c257600091505090565b50506001805460ff1916600317815590565b804710156113f75760405163cd78605960e01b815230600482015260240161069f565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611444576040519150601f19603f3d011682016040523d82523d6000602084013e611449565b606091505b50509050806105fb57604051630a12f52160e11b815260040160405180910390fd5b60008282111561147d5761147d61165b565b61114a82846116aa565b6114918282610f87565b6106235760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440161069f565b6000602082840312156114d257600080fd5b81356001600160e01b03198116811461114a57600080fd5b6001600160a01b03811681146110e757600080fd5b60006020828403121561151157600080fd5b813561114a816114ea565b634e487b7160e01b600052602160045260246000fd5b602081016004831061155457634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121561156c57600080fd5b5035919050565b6000806040838503121561158657600080fd5b823591506020830135611598816114ea565b809150509250929050565b600080604083850312156115b657600080fd5b82356115c1816114ea565b91506020830135611598816114ea565b6000602082840312156115e357600080fd5b8151801515811461114a57600080fd5b60006020828403121561160557600080fd5b815163ffffffff8116811461114a57600080fd5b60006020828403121561162b57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156105af576105af611632565b634e487b7160e01b600052600160045260246000fd5b80820281158282048414176105af576105af611632565b6000826116a557634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156105af576105af61163256fe5468652044414f206973206e6f7420696e2074686520636f7272656374207374ffa60083152bd11704a80cc8c7a409dad8aa74288b454a3ba0e94c0abc7cf168a2646970667358221220ea776f10a632c1cb849f5c938f05da7c2dd6798966a9cfccf96ee1c8a231140c64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101b75760003560e01c8063760520b4116100ec578063a85fdc401161008a578063d21d7b3111610064578063d21d7b3114610513578063d4b8399214610528578063d547741f14610548578063e1147b481461056857600080fd5b8063a85fdc40146104a6578063c54c90d5146104bb578063c7eb35ff146104f357600080fd5b80638e63560b116100c65780638e63560b1461042f57806391d148541461045c578063a217fddf1461047c578063a45e6aa41461049157600080fd5b8063760520b4146103c3578063823cb4aa146103e35780638b0e9f3f1461041957600080fd5b806324cdf45811610159578063485eb85c11610133578063485eb85c1461033a5780634cf088d91461035657806351cff8d91461038e5780636aa56cbd146103ae57600080fd5b806324cdf458146102cd5780632f2ff15d146102fa57806336568abe1461031a57600080fd5b80630ddf758e116101955780630ddf758e1461023a578063107679041461025a5780631c681a421461026d578063248a9ca31461029d57600080fd5b806301ffc9a7146101bc57806308f496dd146101f15780630c3f6acf14610213575b600080fd5b3480156101c857600080fd5b506101dc6101d73660046114c0565b61057e565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b5061021161020c3660046114ff565b6105b5565b005b34801561021f57600080fd5b5060015461022d9060ff1681565b6040516101e89190611532565b34801561024657600080fd5b506102116102553660046114ff565b610600565b6102116102683660046114ff565b610627565b34801561027957600080fd5b5061028f6000805160206116de83398151915281565b6040519081526020016101e8565b3480156102a957600080fd5b5061028f6102b836600461155a565b60009081526020819052604090206001015490565b3480156102d957600080fd5b5061028f6102e83660046114ff565b60026020526000908152604090205481565b34801561030657600080fd5b50610211610315366004611573565b610aa4565b34801561032657600080fd5b50610211610335366004611573565b610acf565b34801561034657600080fd5b5061028f670de0b6b3a764000081565b34801561036257600080fd5b50600654610376906001600160a01b031681565b6040516001600160a01b0390911681526020016101e8565b34801561039a57600080fd5b506102116103a93660046114ff565b610b02565b3480156103ba57600080fd5b50610211610e67565b3480156103cf57600080fd5b506102116103de3660046114ff565b610f64565b3480156103ef57600080fd5b5061028f6103fe3660046114ff565b6001600160a01b031660009081526003602052604090205490565b34801561042557600080fd5b5061028f60055481565b34801561043b57600080fd5b5061028f61044a3660046114ff565b60036020526000908152604090205481565b34801561046857600080fd5b506101dc610477366004611573565b610f87565b34801561048857600080fd5b5061028f600081565b34801561049d57600080fd5b50610211610fb0565b3480156104b257600080fd5b5061028f601e81565b3480156104c757600080fd5b5061028f6104d63660046115a3565b600460209081526000928352604080842090915290825290205481565b3480156104ff57600080fd5b5061021161050e3660046114ff565b610fce565b34801561051f57600080fd5b5061028f611097565b34801561053457600080fd5b50600754610376906001600160a01b031681565b34801561055457600080fd5b50610211610563366004611573565b6110b8565b34801561057457600080fd5b5061037661080081565b60006001600160e01b03198216637965db0b60e01b14806105af57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006105c0816110dd565b6000805160206116de8339815191526105d8816110dd565b6105e3600084610aa4565b6105fb6000805160206116de83398151915284610aa4565b505050565b600061060b816110dd565b6106236000805160206116de83398151915283610aa4565b5050565b6000805160206116de83398151915261063f816110dd565b6106576000805160206116de83398151915283610f87565b6106a85760405162461bcd60e51b815260206004820152601e60248201527f526563697069656e74206d75737420626520612044414f206d656d626572000060448201526064015b60405180910390fd5b6001805460ff1660038111156106c0576106c061151c565b036107e957600654604051637ec55a4160e11b81523060048201526001600160a01b039091169063fd8ab48290602401602060405180830381865afa15801561070d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073191906115d1565b61077d5760405162461bcd60e51b815260206004820152601f60248201527f44414f20697320696e20616e20696e636f6e73697374656e7420737461746500604482015260640161069f565b600654600754604051630465135b60e01b81526001600160a01b039182166004820152346024820152911690630465135b90604401600060405180830381600087803b1580156107cc57600080fd5b505af11580156107e0573d6000803e3d6000fd5b505050506109cc565b600060015460ff1660038111156108025761080261151c565b0361098457670de0b6b3a7640000471061097f57600654600754604051632ec087eb60e01b81526001600160a01b0391821660048201819052919092169163829f5ee3919047908490632ec087eb90602401602060405180830381865afa158015610871573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089591906115f3565b60065460405163033f641160e11b81523060048201526001600160a01b039091169063067ec82290602401602060405180830381865afa1580156108dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109019190611619565b6040516001600160e01b031960e087901b1681526001600160a01b039094166004850152602484019290925263ffffffff1660448301526064820152608401600060405180830381600087803b15801561095a57600080fd5b505af115801561096e573d6000803e3d6000fd5b50506001805460ff19168117905550505b6109cc565b60405162461bcd60e51b815260206004820152601f60248201527f44414f206973206e6f7420616363657074696e67206e6577207374616b657300604482015260640161069f565b336000908152600260205260409020546109e690346110ea565b33600090815260026020526040902055600554610a0390346110ea565b6005556000610a1e6064610a1834601e611108565b9061113e565b6001600160a01b038416600090815260036020526040902054909150610a4490826110ea565b6001600160a01b038416600081815260036020908152604091829020939093558051348152928301849052909133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d791015b60405180910390a3505050565b600082815260208190526040902060010154610abf816110dd565b610ac98383611151565b50505050565b6001600160a01b0381163314610af85760405163334bd91960e11b815260040160405180910390fd5b6105fb82826111e3565b6000805160206116de833981519152610b1a816110dd565b6001805460ff166003811115610b3257610b3261151c565b03610b865760405162461bcd60e51b815260206004820152603060248201526000805160206116be83398151915260448201526f30ba32903a37903bb4ba34323930bb9760811b606482015260840161069f565b600260015460ff166003811115610b9f57610b9f61151c565b03610c12576000610bae61124e565b905080610c105760405162461bcd60e51b815260206004820152602a60248201527f5363686564756c65207265766f6b652064656c6179206973206e6f742066696e60448201526934b9b432b2103cb2ba1760b11b606482015260840161069f565b505b600360015460ff166003811115610c2b57610c2b61151c565b1480610c4d5750600060015460ff166003811115610c4b57610c4b61151c565b145b1561062357600654604051637ec55a4160e11b81523060048201526001600160a01b039091169063fd8ab48290602401602060405180830381865afa158015610c9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbe91906115d1565b15610d175760405162461bcd60e51b8152602060048201526024808201527f5468652044414f20697320696e20616e20696e636f6e73697374656e7420737460448201526330ba329760e11b606482015260840161069f565b600554600003610d625760405162461bcd60e51b815260206004820152601660248201527521b0b73737ba103234bb34b23290313c903d32b9379760511b604482015260640161069f565b600554336000908152600260205260408120549091610d8691610a18904790611108565b905080610d91611097565b1015610def5760405162461bcd60e51b815260206004820152602760248201527f4e6f7420656e6f75676820667265652062616c616e636520666f722077697468604482015266323930bbb0b61760c91b606482015260840161069f565b610df983826113d4565b33600090815260026020526040902054600554610e159161146b565b6005553360008181526002602052604080822091909155516001600160a01b03851691907e29c0b4d760ad1c766c10bcd447eb6426e49a6f1aab829f0611fc7476f1c29390610a979085815260200190565b6000610e72816110dd565b6001805460ff166003811115610e8a57610e8a61151c565b14610eeb5760405162461bcd60e51b815260206004820152603960248201526000805160206116be83398151915260448201527f61746520746f207363686564756c652061207265766f6b652e00000000000000606482015260840161069f565b6006546007546040516306871d0360e21b81526001600160a01b039182166004820152911690631a1c740c90602401600060405180830381600087803b158015610f3457600080fd5b505af1158015610f48573d6000803e3d6000fd5b5050600180546002935090915060ff191681835b021790555050565b6000610f6f816110dd565b6106236000805160206116de833981519152836110b8565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610fbb816110dd565b600180546000919060ff19168183610f5c565b6000610fd9816110dd565b600360015460ff166003811115610ff257610ff261151c565b14806110145750600060015460ff1660038111156110125761101261151c565b145b6110745760405162461bcd60e51b815260206004820152603d60248201526000805160206116be83398151915260448201527f61746520746f206368616e6765207374616b696e67207461726765742e000000606482015260840161069f565b50600780546001600160a01b0319166001600160a01b0392909216919091179055565b60006000805160206116de8339815191526110b1816110dd565b4791505090565b6000828152602081905260409020600101546110d3816110dd565b610ac983836111e3565b6110e78133611487565b50565b60006110f68284611648565b9050828110156105af576105af61165b565b60008260000361111a575060006105af565b6111248284611671565b9050816111318483611688565b146105af576105af61165b565b600061114a8284611688565b9392505050565b600061115d8383610f87565b6111db576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556111933390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016105af565b5060006105af565b60006111ef8383610f87565b156111db576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016105af565b60006000805160206116de833981519152611268816110dd565b600260015460ff1660038111156112815761128161151c565b146112e25760405162461bcd60e51b815260206004820152603860248201526000805160206116be83398151915260448201527f61746520746f20657865637574652061207265766f6b652e0000000000000000606482015260840161069f565b6006546007546040516374c6455f60e11b81523060048201526001600160a01b03918216602482015291169063e98c8abe90604401600060405180830381600087803b15801561133157600080fd5b505af1158015611345573d6000803e3d6000fd5b5050600654604051637ec55a4160e11b81523060048201526001600160a01b03909116925063fd8ab4829150602401602060405180830381865afa158015611391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b591906115d1565b156113c257600091505090565b50506001805460ff1916600317815590565b804710156113f75760405163cd78605960e01b815230600482015260240161069f565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611444576040519150601f19603f3d011682016040523d82523d6000602084013e611449565b606091505b50509050806105fb57604051630a12f52160e11b815260040160405180910390fd5b60008282111561147d5761147d61165b565b61114a82846116aa565b6114918282610f87565b6106235760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440161069f565b6000602082840312156114d257600080fd5b81356001600160e01b03198116811461114a57600080fd5b6001600160a01b03811681146110e757600080fd5b60006020828403121561151157600080fd5b813561114a816114ea565b634e487b7160e01b600052602160045260246000fd5b602081016004831061155457634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121561156c57600080fd5b5035919050565b6000806040838503121561158657600080fd5b823591506020830135611598816114ea565b809150509250929050565b600080604083850312156115b657600080fd5b82356115c1816114ea565b91506020830135611598816114ea565b6000602082840312156115e357600080fd5b8151801515811461114a57600080fd5b60006020828403121561160557600080fd5b815163ffffffff8116811461114a57600080fd5b60006020828403121561162b57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156105af576105af611632565b634e487b7160e01b600052600160045260246000fd5b80820281158282048414176105af576105af611632565b6000826116a557634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156105af576105af61163256fe5468652044414f206973206e6f7420696e2074686520636f7272656374207374ffa60083152bd11704a80cc8c7a409dad8aa74288b454a3ba0e94c0abc7cf168a2646970667358221220ea776f10a632c1cb849f5c938f05da7c2dd6798966a9cfccf96ee1c8a231140c64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/LunaCred.sol:LunaCred",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 721,
        "contract": "contracts/LunaCred.sol:LunaCred",
        "label": "currentState",
        "offset": 0,
        "slot": "1",
        "type": "t_enum(daoState)718"
      },
      {
        "astId": 725,
        "contract": "contracts/LunaCred.sol:LunaCred",
        "label": "memberStakes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 729,
        "contract": "contracts/LunaCred.sol:LunaCred",
        "label": "credibilityPoints",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 735,
        "contract": "contracts/LunaCred.sol:LunaCred",
        "label": "stakedOnBehalfOf",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 737,
        "contract": "contracts/LunaCred.sol:LunaCred",
        "label": "totalStake",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 740,
        "contract": "contracts/LunaCred.sol:LunaCred",
        "label": "staking",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ParachainStaking)1669"
      },
      {
        "astId": 751,
        "contract": "contracts/LunaCred.sol:LunaCred",
        "label": "target",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ParachainStaking)1669": {
        "encoding": "inplace",
        "label": "contract ParachainStaking",
        "numberOfBytes": "20"
      },
      "t_enum(daoState)718": {
        "encoding": "inplace",
        "label": "enum LunaCred.daoState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/LunaCred.sol:LunaCred",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/LunaCred.sol:LunaCred",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}