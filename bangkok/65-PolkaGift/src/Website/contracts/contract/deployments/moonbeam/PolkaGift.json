{
  "address": "0x6Fd8De4dCa4be6aC2498322B46546bcE9a5D7BE9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "AllEventEndTime",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "BidId",
          "type": "string"
        }
      ],
      "name": "BidURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "TokenHighestBidders",
      "outputs": [
        {
          "internalType": "string",
          "name": "token_id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "event_id",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "price",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_EventTokenSearchIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_SearchedStore",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenId",
          "type": "string"
        }
      ],
      "name": "_getSearchedTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "bidId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_bidURI",
          "type": "string"
        }
      ],
      "name": "_setBidURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_eventId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_raised",
          "type": "string"
        }
      ],
      "name": "_setEventRaised",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "eventId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_eventWallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "_setEventURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "TokenBidId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "TokenId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_BidURI",
          "type": "string"
        }
      ],
      "name": "_setTokenBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "EventTokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "EventId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "_setTokenEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "token_id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "event_id",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "price",
          "type": "string"
        }
      ],
      "name": "_setTokenHighestBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "_setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_eventid",
          "type": "string"
        }
      ],
      "name": "claimToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_bidURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_eventid",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_raised",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_bid_price",
          "type": "string"
        }
      ],
      "name": "createBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_eventWallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "endtime",
          "type": "uint256"
        }
      ],
      "name": "createEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "eventID",
          "type": "string"
        }
      ],
      "name": "distribute_event",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "eventId",
          "type": "string"
        }
      ],
      "name": "eventURI",
      "outputs": [
        {
          "internalType": "string[2]",
          "name": "",
          "type": "string[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_bidURI",
          "type": "string"
        }
      ],
      "name": "getBidIdByUri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "TokenID",
          "type": "string"
        }
      ],
      "name": "getBidsSearchToken",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "getEventIdByURI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_eventId",
          "type": "string"
        }
      ],
      "name": "getEventRaised",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "EventId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "getGetEventsTokenID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "Wallet",
          "type": "string"
        }
      ],
      "name": "getSearchEventbyWallet",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "token_id",
          "type": "string"
        }
      ],
      "name": "getTokenHighestBid",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "TokenID",
          "type": "string"
        }
      ],
      "name": "getTotalBid",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "gettokenIdByUri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "EventID",
          "type": "string"
        }
      ],
      "name": "gettokenSearchEventTotal",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_str",
          "type": "string"
        }
      ],
      "name": "strToUint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenId",
          "type": "string"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa569aca0fd582547dced962d33c78641b47fbbc2dbaed84d0a3adeb603cb8f8a",
  "receipt": {
    "to": null,
    "from": "0xa896F4B052Bc4022588e4ccAb241c6C4ede0D68a",
    "contractAddress": "0x6Fd8De4dCa4be6aC2498322B46546bcE9a5D7BE9",
    "transactionIndex": 0,
    "gasUsed": "5022984",
    "logsBloom": "0x
    "blockHash": "0x07d2e514dff71a27c176f61fe86697d2c2f229906f3585be2f1d1db932918698",
    "transactionHash": "0xa569aca0fd582547dced962d33c78641b47fbbc2dbaed84d0a3adeb603cb8f8a",
    "logs": [],
    "blockNumber": 9205666,
    "cumulativeGasUsed": "5022984",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "96422f54cb59380b20d74e498d649c73",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"AllEventEndTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"BidId\",\"type\":\"string\"}],\"name\":\"BidURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TokenHighestBidders\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"token_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"event_id\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"price\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_EventTokenSearchIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_SearchedStore\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenId\",\"type\":\"string\"}],\"name\":\"_getSearchedTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"bidId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_bidURI\",\"type\":\"string\"}],\"name\":\"_setBidURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_eventId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_raised\",\"type\":\"string\"}],\"name\":\"_setEventRaised\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"eventId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_eventWallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"_setEventURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TokenBidId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"TokenId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_BidURI\",\"type\":\"string\"}],\"name\":\"_setTokenBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"EventTokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"EventId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"_setTokenEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"token_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"event_id\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"price\",\"type\":\"string\"}],\"name\":\"_setTokenHighestBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"_setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_eventid\",\"type\":\"string\"}],\"name\":\"claimToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_bidURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_eventid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_raised\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_bid_price\",\"type\":\"string\"}],\"name\":\"createBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_eventWallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"createEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"eventID\",\"type\":\"string\"}],\"name\":\"distribute_event\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"eventId\",\"type\":\"string\"}],\"name\":\"eventURI\",\"outputs\":[{\"internalType\":\"string[2]\",\"name\":\"\",\"type\":\"string[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_bidURI\",\"type\":\"string\"}],\"name\":\"getBidIdByUri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"TokenID\",\"type\":\"string\"}],\"name\":\"getBidsSearchToken\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"getEventIdByURI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_eventId\",\"type\":\"string\"}],\"name\":\"getEventRaised\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"EventId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"getGetEventsTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Wallet\",\"type\":\"string\"}],\"name\":\"getSearchEventbyWallet\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"token_id\",\"type\":\"string\"}],\"name\":\"getTokenHighestBid\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"TokenID\",\"type\":\"string\"}],\"name\":\"getTotalBid\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"gettokenIdByUri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"EventID\",\"type\":\"string\"}],\"name\":\"gettokenSearchEventTotal\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_str\",\"type\":\"string\"}],\"name\":\"strToUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenId\",\"type\":\"string\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PolkaGift.sol\":\"PolkaGift\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/PolkaGift.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\ncontract PolkaGift {\\r\\n\\r\\n    /// Highest bidder struct\\r\\n    struct highest_bidder_struct {\\r\\n        ///Token Id\\r\\n        string token_id;\\r\\n        ///Event Id\\r\\n        string event_id;\\r\\n        ///Highest Bidder\\r\\n        address wallet;\\r\\n        ///Highest Bid price\\r\\n        string price;\\r\\n    }\\r\\n\\r\\n\\r\\n    struct event_token_struct{\\r\\n        ///Event Id\\r\\n        string event_id;\\r\\n        ///Token Uri\\r\\n        string token_uri;\\r\\n    }\\r\\n    struct token_bid_struct{\\r\\n        ///Token Id\\r\\n        string token_id;\\r\\n        ///Bid URI\\r\\n        string bid_uri;\\r\\n\\r\\n    }\\r\\n\\r\\n    uint256 private _tokenIds;\\r\\n    uint256 private _bidIds;\\r\\n    uint256 private _eventIds;\\r\\n    uint256 private _EventTokenIds;\\r\\n    uint256 private _TokenBidIds;\\r\\n    uint256 private _TokenHighestBidIds;\\r\\n    uint256 public _EventTokenSearchIds;\\r\\n    mapping(string => bool) public AllEventEndTime; //Event ID => bool\\r\\n    mapping(uint256 => event_token_struct) private AllEventTokens;\\r\\n    mapping(uint256 => token_bid_struct) private AllTokensBids;\\r\\n    mapping(uint256 => highest_bidder_struct) public TokenHighestBidders; //_TokenHighestBidIds => highest bidder struct\\r\\n    mapping(string => string[2]) public _SearchedStore;\\r\\n    mapping(string => string) private _bidURIs;\\r\\n    mapping(string => string) private _tokenURIs; //_tokenIds => Token URI\\r\\n    mapping(string => string[2]) private _eventURIs;\\r\\n    mapping(string => string) private _eventRaised;\\r\\n\\r\\n    function claimToken(\\r\\n        address _claimer,\\r\\n        string memory _tokenURI,\\r\\n        string memory _eventid\\r\\n    ) public returns (uint256) {\\r\\n        _setTokenURI(string.concat(\\\"m_\\\" , Strings.toString(_tokenIds)), _tokenURI);\\r\\n        _setTokenEvent(_EventTokenIds, _eventid, _tokenURI);\\r\\n\\r\\n        _tokenIds++;\\r\\n        _EventTokenIds++;\\r\\n        return _tokenIds;\\r\\n    }\\r\\n\\r\\n    function _setTokenEvent(\\r\\n        uint256 EventTokenId,\\r\\n        string memory EventId,\\r\\n        string memory _tokenURI\\r\\n    ) public virtual {\\r\\n        AllEventTokens[EventTokenId] = event_token_struct(\\r\\n            string(EventId),\\r\\n            string(_tokenURI)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function createEvent(\\r\\n        string memory _eventWallet,\\r\\n        string memory _eventURI,\\r\\n        uint256 endtime\\r\\n    ) public returns (uint256) {\\r\\n        string memory new_event_id = string.concat(\\\"m_\\\" , Strings.toString(_eventIds));\\r\\n\\r\\n        _setEventURI(new_event_id, _eventWallet, _eventURI);\\r\\n        _setEventRaised(new_event_id, \\\"0\\\");\\r\\n        AllEventEndTime[new_event_id] = false;\\r\\n        _eventIds++;\\r\\n\\r\\n        return _eventIds;\\r\\n    }\\r\\n\\r\\n\\r\\n    function distribute_event(string memory eventID) public{ \\r\\n      \\r\\n    AllEventEndTime[eventID] = true;\\r\\n\\r\\n    }\\r\\n    function gettokenIdByUri(string memory _tokenURI)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256)\\r\\n    {\\r\\n        for (uint256 i = 0; i < _tokenIds; i++) {\\r\\n            if (\\r\\n                keccak256(bytes(_tokenURIs[string.concat(\\\"m_\\\", Strings.toString(i))])) == keccak256(bytes(_tokenURI))\\r\\n            ) {\\r\\n                return i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function getEventIdByURI(string memory _eventURI)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256)\\r\\n    {\\r\\n        for (uint256 i = 0; i < _eventIds; i++) {\\r\\n            if (\\r\\n                keccak256(bytes(_eventURIs[string.concat(\\\"m_\\\", Strings.toString(i))][1])) ==\\r\\n                keccak256(bytes(_eventURI))\\r\\n            ) {\\r\\n                return i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function getBidIdByUri(string memory _bidURI)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256)\\r\\n    {\\r\\n        for (uint256 i = 0; i < _bidIds; i++) {\\r\\n            if (keccak256(bytes(_bidURIs[string.concat(\\\"m_\\\", Strings.toString(i))])) == keccak256(bytes(_bidURI))) {\\r\\n                return i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function gettokenSearchEventTotal(string memory EventID)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (string[] memory)\\r\\n    {\\r\\n        string[] memory _SearchedStoreToken = new string[](10);\\r\\n\\r\\n        uint256 _EventTokenSearchIds2 = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < _EventTokenIds; i++) {\\r\\n            if (\\r\\n                keccak256(bytes(AllEventTokens[i].event_id)) ==\\r\\n                keccak256(bytes(string(EventID)))\\r\\n            ) {\\r\\n                _SearchedStoreToken[_EventTokenSearchIds2] = AllEventTokens[i].token_uri;\\r\\n                _EventTokenSearchIds2++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return _SearchedStoreToken;\\r\\n    }\\r\\n\\r\\n    function getSearchEventbyWallet(string memory Wallet)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (string[] memory)\\r\\n    {\\r\\n        uint256 _TemporarySearch = 0;\\r\\n        uint256 _SearchIds = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < _eventIds; i++) {\\r\\n            if (\\r\\n                keccak256(bytes(_eventURIs[string.concat(\\\"m_\\\", Strings.toString(i))][0])) == keccak256(bytes(Wallet))\\r\\n            ) {\\r\\n                _TemporarySearch++;\\r\\n            }\\r\\n        }\\r\\n        string[] memory _SearchedStoreEvents = new string[](_TemporarySearch);\\r\\n        for (uint256 i = 0; i < _eventIds; i++) {\\r\\n            if (\\r\\n                keccak256(bytes(_eventURIs[string.concat(\\\"m_\\\", Strings.toString(i))][0])) == keccak256(bytes(Wallet))\\r\\n            ) {\\r\\n                _SearchedStoreEvents[_SearchIds] = _eventURIs[string.concat(\\\"m_\\\", Strings.toString(i))][1];\\r\\n                _SearchIds++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return _SearchedStoreEvents;\\r\\n    }\\r\\n\\r\\n    function getGetEventsTokenID(string memory EventId, string memory _tokenURI)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256)\\r\\n    {\\r\\n        for (uint256 i = 0; i < _EventTokenIds; i++) {\\r\\n            if (\\r\\n                keccak256(bytes(AllEventTokens[i].event_id)) ==\\r\\n                keccak256(bytes(string(EventId))) &&\\r\\n                keccak256(bytes(AllEventTokens[i].token_uri)) ==\\r\\n                keccak256(bytes(_tokenURI))\\r\\n            ) {\\r\\n                return i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function _getSearchedTokenURI(string memory _tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return _SearchedStore[_tokenId][0];\\r\\n    }\\r\\n\\r\\n    function _setEventURI(\\r\\n        string memory eventId,\\r\\n        string memory _eventWallet,\\r\\n        string memory _eventURI\\r\\n    ) public virtual {\\r\\n        _eventURIs[eventId] = [_eventWallet, _eventURI];\\r\\n    }\\r\\n\\r\\n    function _setTokenURI(string memory tokenId, string memory _tokenURI)\\r\\n        public\\r\\n        virtual\\r\\n    {\\r\\n        _tokenURIs[tokenId] = _tokenURI;\\r\\n                \\r\\n    }\\r\\n\\r\\n    function eventURI(string memory eventId) public view returns (string[2] memory) {\\r\\n        return _eventURIs[eventId];\\r\\n    }\\r\\n\\r\\n    function tokenURI(string memory tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return _tokenURIs[tokenId];\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _tokenIds;\\r\\n    }\\r\\n\\r\\n    function totalEvent() public view returns (uint256) {\\r\\n        return _eventIds;\\r\\n    }\\r\\n\\r\\n    function _setBidURI(string memory bidId, string memory _bidURI) public virtual {\\r\\n        _bidURIs[bidId] = _bidURI;\\r\\n    }\\r\\n\\r\\n    function BidURI(string memory BidId) public view returns (string memory) {\\r\\n        return _bidURIs[BidId];\\r\\n    }\\r\\n\\r\\n    function getTotalBid(string memory TokenID)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (string[] memory)\\r\\n    {\\r\\n        string[] memory _SearchedStoreBid = new string[](10);\\r\\n\\r\\n        uint256 _TokenBidSearchIds2 = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < _TokenBidIds; i++) {\\r\\n            if (\\r\\n                keccak256(bytes(AllTokensBids[i].token_id)) ==\\r\\n                keccak256(bytes(string(TokenID)))\\r\\n            ) {\\r\\n                _SearchedStoreBid[_TokenBidSearchIds2] = AllTokensBids[i].bid_uri;\\r\\n                _TokenBidSearchIds2++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return _SearchedStoreBid;\\r\\n    }\\r\\n\\r\\n    function getBidsSearchToken(string memory TokenID)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (string[] memory)\\r\\n    {\\r\\n        string[] memory _SearchedStoreBid = new string[](10);\\r\\n\\r\\n        uint256 _TokenBidSearchIds2 = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < _TokenBidIds; i++) {\\r\\n            if (\\r\\n                keccak256(bytes(AllTokensBids[i].token_id)) ==\\r\\n                keccak256(bytes(string(TokenID)))\\r\\n            ) {\\r\\n                _SearchedStoreBid[_TokenBidSearchIds2] = AllTokensBids[i].bid_uri;\\r\\n                _TokenBidSearchIds2++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return _SearchedStoreBid;\\r\\n    }\\r\\n\\r\\n    function _setTokenBid(\\r\\n        uint256 TokenBidId,\\r\\n        string memory TokenId,\\r\\n        string memory _BidURI\\r\\n    ) public virtual {\\r\\n        AllTokensBids[TokenBidId] = token_bid_struct(\\r\\n            string(TokenId),\\r\\n            string(_BidURI)\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n    function _setTokenHighestBid(\\r\\n        string memory token_id,\\r\\n        string memory event_id,\\r\\n        address wallet,\\r\\n        string memory price\\r\\n    ) public virtual {\\r\\n\\r\\n        string memory old_id = getTokenHighestBid(token_id);\\r\\n        if ( keccak256(bytes(old_id)) != keccak256(bytes(string(\\\"-1\\\")))){\\r\\n\\r\\n            TokenHighestBidders[strToUint(old_id)]= highest_bidder_struct({\\r\\n                token_id: token_id,\\r\\n                event_id: event_id,\\r\\n                wallet: wallet,\\r\\n                price: price\\r\\n            });\\r\\n        }else{\\r\\n            TokenHighestBidders[_TokenHighestBidIds] = highest_bidder_struct({\\r\\n                token_id: token_id,\\r\\n                event_id: event_id,\\r\\n                wallet: wallet,\\r\\n                price: price\\r\\n            });\\r\\n            _TokenHighestBidIds++;\\r\\n        }\\r\\n\\r\\n    }\\r\\n    function strToUint(string memory _str) public pure returns(uint256 res) {\\r\\n        \\r\\n        for (uint256 i = 0; i < bytes(_str).length; i++) {\\r\\n            if ((uint8(bytes(_str)[i]) - 48) < 0 || (uint8(bytes(_str)[i]) - 48) > 9) {\\r\\n                return (0);\\r\\n            }\\r\\n            res += (uint8(bytes(_str)[i]) - 48) * 10**(bytes(_str).length - i - 1);\\r\\n        }\\r\\n        \\r\\n        return (res);\\r\\n    }\\r\\n    function getTokenHighestBid(string memory token_id)   \\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (string memory){\\r\\n            for (uint256 i = 0; i < _TokenHighestBidIds; i++) {\\r\\n            if (\\r\\n                    keccak256(bytes(TokenHighestBidders[i].token_id)) ==\\r\\n                    keccak256(bytes(string(token_id)))\\r\\n                ) {\\r\\n                    return Strings.toString(i);\\r\\n                }\\r\\n            }\\r\\n            return \\\"-1\\\";\\r\\n\\r\\n        }\\r\\n\\r\\n    function getEventRaised(string memory _eventId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return _eventRaised[_eventId];\\r\\n    }\\r\\n\\r\\n    function _setEventRaised(string memory _eventId, string memory _raised) public {\\r\\n        _eventRaised[_eventId] = _raised;\\r\\n    }\\r\\n\\r\\n    function createBid(\\r\\n        string memory _tokenId,\\r\\n        string memory _bidURI,\\r\\n        string memory _eventid,\\r\\n        string memory _raised,\\r\\n        string memory _bid_price\\r\\n\\r\\n    ) public {\\r\\n        uint256 _EventTokenId = getGetEventsTokenID(\\r\\n            _eventid,\\r\\n            _tokenURIs[_tokenId]\\r\\n        );\\r\\n\\r\\n        _setTokenHighestBid(_tokenId,_eventid,msg.sender,_bid_price);\\r\\n        \\r\\n        _setEventRaised(_eventid, _raised);\\r\\n\\r\\n        _setTokenBid(_TokenBidIds, _tokenId, _bidURI);\\r\\n        _TokenBidIds++;\\r\\n        _bidIds++;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdff2d7f987b8d21b1940890f62e55bbd49190f44ddad6ad0300fe489625e271d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061352c806100206000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c806370881e721161010f578063bfee6f8e116100a2578063d45fc51611610071578063d45fc51614610676578063df6b96c7146106a6578063eacb4a74146106c2578063f7e34095146106f2576101f0565b8063bfee6f8e146105de578063c5ef3ec5146105fa578063ce65e7481461062a578063d0fb869914610646576101f0565b80638c2715b7116100de5780638c2715b714610532578063932a196b14610562578063a42a665c14610592578063b91e924f146105c2576101f0565b806370881e7214610495578063783db260146104c85780637ab4ab6e146104f85780637eadfa6a14610514576101f0565b80633358f45b116101875780635555fe17116101565780635555fe17146103d55780635f08c6b5146104055780636beee9d7146104355780636ebb4d8714610465576101f0565b80633358f45b1461033d5780634cf12d261461036d5780635457bbf91461039d578063545fa9ec146103b9576101f0565b8063282e5e81116101c3578063282e5e81146102915780632a0d0373146102ad5780632bde1581146102dd578063304b16db1461030d576101f0565b8063144cbca6146101f557806318160ddd146102135780631e65e1171461023157806325c11f7414610261575b600080fd5b6101fd61070e565b60405161020a91906122fb565b60405180910390f35b61021b610714565b60405161022891906122fb565b60405180910390f35b61024b60048036038101906102469190612470565b61071d565b60405161025891906125fa565b60405180910390f35b61027b60048036038101906102769190612470565b6109d5565b60405161028891906125fa565b60405180910390f35b6102ab60048036038101906102a6919061261c565b610b5a565b005b6102c760048036038101906102c29190612470565b610b8a565b6040516102d491906125fa565b60405180910390f35b6102f760048036038101906102f291906126f2565b610d0f565b60405161030491906122fb565b60405180910390f35b61032760048036038101906103229190612470565b610d8c565b60405161033491906122fb565b60405180910390f35b61035760048036038101906103529190612470565b610e40565b6040516103649190612798565b60405180910390f35b61038760048036038101906103829190612470565b610e76565b60405161039491906127fd565b60405180910390f35b6103b760048036038101906103b2919061284b565b610f26565b005b6103d360048036038101906103ce9190612470565b610f82565b005b6103ef60048036038101906103ea91906128d6565b610fbc565b6040516103fc91906122fb565b60405180910390f35b61041f600480360381019061041a9190612470565b611091565b60405161042c91906127fd565b60405180910390f35b61044f600480360381019061044a9190612470565b611141565b60405161045c91906127fd565b60405180910390f35b61047f600480360381019061047a9190612470565b6111eb565b60405161048c9190612a03565b60405180910390f35b6104af60048036038101906104aa9190612a25565b6112d6565b6040516104bf9493929190612a61565b60405180910390f35b6104e260048036038101906104dd919061261c565b6114be565b6040516104ef91906122fb565b60405180910390f35b610512600480360381019061050d919061261c565b61156d565b005b61051c61159d565b60405161052991906122fb565b60405180910390f35b61054c60048036038101906105479190612abb565b6115a7565b60405161055991906127fd565b60405180910390f35b61057c60048036038101906105779190612470565b61166d565b60405161058991906122fb565b60405180910390f35b6105ac60048036038101906105a79190612470565b61170d565b6040516105b991906127fd565b60405180910390f35b6105dc60048036038101906105d7919061284b565b6117bd565b005b6105f860048036038101906105f39190612b17565b611819565b005b610614600480360381019061060f9190612470565b611860565b60405161062191906122fb565b60405180910390f35b610644600480360381019061063f9190612bbe565b611973565b005b610660600480360381019061065b9190612470565b611ba5565b60405161066d91906125fa565b60405180910390f35b610690600480360381019061068b9190612470565b611d2a565b60405161069d91906122fb565b60405180910390f35b6106c060048036038101906106bb919061261c565b611dca565b005b6106dc60048036038101906106d79190612470565b611dfa565b6040516106e991906127fd565b60405180910390f35b61070c60048036038101906107079190612c79565b611ebe565b005b60065481565b60008054905090565b606060008060005b6002548110156107cc578480519060200120600e61074283611fcd565b6040516020016107529190612de2565b60405160208183030381529060405260405161076e9190612e08565b908152602001604051809103902060006002811061078f5761078e612e1f565b5b0160405161079d9190612f51565b6040518091039020036107b95782806107b590612f97565b9350505b80806107c490612f97565b915050610725565b5060008267ffffffffffffffff8111156107e9576107e8612345565b5b60405190808252806020026020018201604052801561081c57816020015b60608152602001906001900390816108075790505b50905060005b6002548110156109c9578580519060200120600e61083f83611fcd565b60405160200161084f9190612de2565b60405160208183030381529060405260405161086b9190612e08565b908152602001604051809103902060006002811061088c5761088b612e1f565b5b0160405161089a9190612f51565b6040518091039020036109b657600e6108b282611fcd565b6040516020016108c29190612de2565b6040516020818303038152906040526040516108de9190612e08565b90815260200160405180910390206001600281106108ff576108fe612e1f565b5b01805461090b90612e7d565b80601f016020809104026020016040519081016040528092919081815260200182805461093790612e7d565b80156109845780601f1061095957610100808354040283529160200191610984565b820191906000526020600020905b81548152906001019060200180831161096757829003601f168201915b505050505082848151811061099c5761099b612e1f565b5b602002602001018190525082806109b290612f97565b9350505b80806109c190612f97565b915050610822565b50809350505050919050565b60606000600a67ffffffffffffffff8111156109f4576109f3612345565b5b604051908082528060200260200182016040528015610a2757816020015b6060815260200190600190039081610a125790505b5090506000805b600454811015610b4f57848051906020012060096000838152602001908152602001600020600001604051610a639190612f51565b604051809103902003610b3c57600960008281526020019081526020016000206001018054610a9190612e7d565b80601f0160208091040260200160405190810160405280929190818152602001828054610abd90612e7d565b8015610b0a5780601f10610adf57610100808354040283529160200191610b0a565b820191906000526020600020905b815481529060010190602001808311610aed57829003601f168201915b5050505050838381518110610b2257610b21612e1f565b5b60200260200101819052508180610b3890612f97565b9250505b8080610b4790612f97565b915050610a2e565b508192505050919050565b80600f83604051610b6b9190612e08565b90815260200160405180910390209081610b85919061318b565b505050565b60606000600a67ffffffffffffffff811115610ba957610ba8612345565b5b604051908082528060200260200182016040528015610bdc57816020015b6060815260200190600190039081610bc75790505b5090506000805b600454811015610d0457848051906020012060096000838152602001908152602001600020600001604051610c189190612f51565b604051809103902003610cf157600960008281526020019081526020016000206001018054610c4690612e7d565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7290612e7d565b8015610cbf5780601f10610c9457610100808354040283529160200191610cbf565b820191906000526020600020905b815481529060010190602001808311610ca257829003601f168201915b5050505050838381518110610cd757610cd6612e1f565b5b60200260200101819052508180610ced90612f97565b9250505b8080610cfc90612f97565b915050610be3565b508192505050919050565b6000610d44610d1f600054611fcd565b604051602001610d2f9190612de2565b6040516020818303038152906040528461156d565b610d5160035483856117bd565b600080815480929190610d6390612f97565b919050555060036000815480929190610d7b90612f97565b919050555060005490509392505050565b600080600090505b600254811015610e35578280519060200120600e610db183611fcd565b604051602001610dc19190612de2565b604051602081830303815290604052604051610ddd9190612e08565b9081526020016040518091039020600160028110610dfe57610dfd612e1f565b5b01604051610e0c9190612f51565b604051809103902003610e225780915050610e3b565b8080610e2d90612f97565b915050610d94565b50600090505b919050565b6007818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b6060600d82604051610e889190612e08565b90815260200160405180910390208054610ea190612e7d565b80601f0160208091040260200160405190810160405280929190818152602001828054610ecd90612e7d565b8015610f1a5780601f10610eef57610100808354040283529160200191610f1a565b820191906000526020600020905b815481529060010190602001808311610efd57829003601f168201915b50505050509050919050565b604051806040016040528083815260200182815250600960008581526020019081526020016000206000820151816000019081610f63919061318b565b506020820151816001019081610f79919061318b565b50905050505050565b6001600782604051610f949190612e08565b908152602001604051809103902060006101000a81548160ff02191690831515021790555050565b600080610fca600254611fcd565b604051602001610fda9190612de2565b6040516020818303038152906040529050610ff6818686611819565b611035816040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250610b5a565b60006007826040516110479190612e08565b908152602001604051809103902060006101000a81548160ff0219169083151502179055506002600081548092919061107f90612f97565b91905055506002549150509392505050565b6060600c826040516110a39190612e08565b908152602001604051809103902080546110bc90612e7d565b80601f01602080910402602001604051908101604052809291908181526020018280546110e890612e7d565b80156111355780601f1061110a57610100808354040283529160200191611135565b820191906000526020600020905b81548152906001019060200180831161111857829003601f168201915b50505050509050919050565b606060005b6005548110156111ac578280519060200120600a600083815260200190815260200160002060000160405161117b9190612f51565b6040518091039020036111995761119181611fcd565b9150506111e6565b80806111a490612f97565b915050611146565b506040518060400160405280600281526020017f2d3100000000000000000000000000000000000000000000000000000000000081525090505b919050565b6111f36121ee565b600e826040516112039190612e08565b9081526020016040518091039020600280602002604051908101604052809291906000905b828210156112cb57838201805461123e90612e7d565b80601f016020809104026020016040519081016040528092919081815260200182805461126a90612e7d565b80156112b75780601f1061128c576101008083540402835291602001916112b7565b820191906000526020600020905b81548152906001019060200180831161129a57829003601f168201915b505050505081526020019060010190611228565b505050509050919050565b600a6020528060005260406000206000915090508060000180546112f990612e7d565b80601f016020809104026020016040519081016040528092919081815260200182805461132590612e7d565b80156113725780601f1061134757610100808354040283529160200191611372565b820191906000526020600020905b81548152906001019060200180831161135557829003601f168201915b50505050509080600101805461138790612e7d565b80601f01602080910402602001604051908101604052809291908181526020018280546113b390612e7d565b80156114005780601f106113d557610100808354040283529160200191611400565b820191906000526020600020905b8154815290600101906020018083116113e357829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600301805461143b90612e7d565b80601f016020809104026020016040519081016040528092919081815260200182805461146790612e7d565b80156114b45780601f10611489576101008083540402835291602001916114b4565b820191906000526020600020905b81548152906001019060200180831161149757829003601f168201915b5050505050905084565b600080600090505b600354811015611561578380519060200120600860008381526020019081526020016000206000016040516114fb9190612f51565b604051809103902014801561154057508280519060200120600860008381526020019081526020016000206001016040516115369190612f51565b6040518091039020145b1561154e5780915050611567565b808061155990612f97565b9150506114c6565b50600090505b92915050565b80600d8360405161157e9190612e08565b90815260200160405180910390209081611598919061318b565b505050565b6000600254905090565b600b8280516020810182018051848252602083016020850120818352809550505050505081600281106115d957600080fd5b016000915091505080546115ec90612e7d565b80601f016020809104026020016040519081016040528092919081815260200182805461161890612e7d565b80156116655780601f1061163a57610100808354040283529160200191611665565b820191906000526020600020905b81548152906001019060200180831161164857829003601f168201915b505050505081565b600080600090505b600054811015611702578280519060200120600d61169283611fcd565b6040516020016116a29190612de2565b6040516020818303038152906040526040516116be9190612e08565b90815260200160405180910390206040516116d99190612f51565b6040518091039020036116ef5780915050611708565b80806116fa90612f97565b915050611675565b50600090505b919050565b6060600f8260405161171f9190612e08565b9081526020016040518091039020805461173890612e7d565b80601f016020809104026020016040519081016040528092919081815260200182805461176490612e7d565b80156117b15780601f10611786576101008083540402835291602001916117b1565b820191906000526020600020905b81548152906001019060200180831161179457829003601f168201915b50505050509050919050565b6040518060400160405280838152602001828152506008600085815260200190815260200160002060008201518160000190816117fa919061318b565b506020820151816001019081611810919061318b565b50905050505050565b604051806040016040528083815260200182815250600e8460405161183e9190612e08565b908152602001604051809103902090600261185a929190612215565b50505050565b600080600090505b825181101561196c576000603084838151811061188857611887612e1f565b5b602001015160f81c60f81b60f81c6118a0919061326a565b60ff1610806118de5750600960308483815181106118c1576118c0612e1f565b5b602001015160f81c60f81b60f81c6118d9919061326a565b60ff16115b156118ed57600091505061196e565b60018184516118fc919061329f565b611906919061329f565b600a6119129190613406565b603084838151811061192757611926612e1f565b5b602001015160f81c60f81b60f81c61193f919061326a565b60ff1661194c9190613451565b826119579190613493565b9150808061196490612f97565b915050611868565b505b919050565b600061197e85611141565b90506040518060400160405280600281526020017f2d3100000000000000000000000000000000000000000000000000000000000081525080519060200120818051906020012014611aad5760405180608001604052808681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815250600a6000611a0e84611860565b81526020019081526020016000206000820151816000019081611a31919061318b565b506020820151816001019081611a47919061318b565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003019081611aa4919061318b565b50905050611b9e565b60405180608001604052808681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815250600a600060055481526020019081526020016000206000820151816000019081611b0e919061318b565b506020820151816001019081611b24919061318b565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003019081611b81919061318b565b5090505060056000815480929190611b9890612f97565b91905055505b5050505050565b60606000600a67ffffffffffffffff811115611bc457611bc3612345565b5b604051908082528060200260200182016040528015611bf757816020015b6060815260200190600190039081611be25790505b5090506000805b600354811015611d1f57848051906020012060086000838152602001908152602001600020600001604051611c339190612f51565b604051809103902003611d0c57600860008281526020019081526020016000206001018054611c6190612e7d565b80601f0160208091040260200160405190810160405280929190818152602001828054611c8d90612e7d565b8015611cda5780601f10611caf57610100808354040283529160200191611cda565b820191906000526020600020905b815481529060010190602001808311611cbd57829003601f168201915b5050505050838381518110611cf257611cf1612e1f565b5b60200260200101819052508180611d0890612f97565b9250505b8080611d1790612f97565b915050611bfe565b508192505050919050565b600080600090505b600154811015611dbf578280519060200120600c611d4f83611fcd565b604051602001611d5f9190612de2565b604051602081830303815290604052604051611d7b9190612e08565b9081526020016040518091039020604051611d969190612f51565b604051809103902003611dac5780915050611dc5565b8080611db790612f97565b915050611d32565b50600090505b919050565b80600c83604051611ddb9190612e08565b90815260200160405180910390209081611df5919061318b565b505050565b6060600b82604051611e0c9190612e08565b9081526020016040518091039020600060028110611e2d57611e2c612e1f565b5b018054611e3990612e7d565b80601f0160208091040260200160405190810160405280929190818152602001828054611e6590612e7d565b8015611eb25780601f10611e8757610100808354040283529160200191611eb2565b820191906000526020600020905b815481529060010190602001808311611e9557829003601f168201915b50505050509050919050565b6000611f7084600d88604051611ed49190612e08565b90815260200160405180910390208054611eed90612e7d565b80601f0160208091040260200160405190810160405280929190818152602001828054611f1990612e7d565b8015611f665780601f10611f3b57610100808354040283529160200191611f66565b820191906000526020600020905b815481529060010190602001808311611f4957829003601f168201915b50505050506114be565b9050611f7e86853385611973565b611f888484610b5a565b611f956004548787610f26565b60046000815480929190611fa890612f97565b919050555060016000815480929190611fc090612f97565b9190505550505050505050565b606060006001611fdc8461209b565b01905060008167ffffffffffffffff811115611ffb57611ffa612345565b5b6040519080825280601f01601f19166020018201604052801561202d5781602001600182028036833780820191505090505b509050600082602001820190505b600115612090578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612084576120836134c7565b5b0494506000850361203b575b819350505050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106120f9577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816120ef576120ee6134c7565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612136576d04ee2d6d415b85acef8100000000838161212c5761212b6134c7565b5b0492506020810190505b662386f26fc10000831061216557662386f26fc10000838161215b5761215a6134c7565b5b0492506010810190505b6305f5e100831061218e576305f5e1008381612184576121836134c7565b5b0492506008810190505b61271083106121b35761271083816121a9576121a86134c7565b5b0492506004810190505b606483106121d657606483816121cc576121cb6134c7565b5b0492506002810190505b600a83106121e5576001810190505b80915050919050565b60405180604001604052806002905b60608152602001906001900390816121fd5790505090565b8260028101928215612250579160200282015b8281111561224f57825182908161223f919061318b565b5091602001919060010190612228565b5b50905061225d9190612261565b5090565b5b8082111561228157600081816122789190612285565b50600101612262565b5090565b50805461229190612e7d565b6000825580601f106122a357506122c2565b601f0160209004906000526020600020908101906122c191906122c5565b5b50565b5b808211156122de5760008160009055506001016122c6565b5090565b6000819050919050565b6122f5816122e2565b82525050565b600060208201905061231060008301846122ec565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61237d82612334565b810181811067ffffffffffffffff8211171561239c5761239b612345565b5b80604052505050565b60006123af612316565b90506123bb8282612374565b919050565b600067ffffffffffffffff8211156123db576123da612345565b5b6123e482612334565b9050602081019050919050565b82818337600083830152505050565b600061241361240e846123c0565b6123a5565b90508281526020810184848401111561242f5761242e61232f565b5b61243a8482856123f1565b509392505050565b600082601f8301126124575761245661232a565b5b8135612467848260208601612400565b91505092915050565b60006020828403121561248657612485612320565b5b600082013567ffffffffffffffff8111156124a4576124a3612325565b5b6124b084828501612442565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561251f578082015181840152602081019050612504565b60008484015250505050565b6000612536826124e5565b61254081856124f0565b9350612550818560208601612501565b61255981612334565b840191505092915050565b6000612570838361252b565b905092915050565b6000602082019050919050565b6000612590826124b9565b61259a81856124c4565b9350836020820285016125ac856124d5565b8060005b858110156125e857848403895281516125c98582612564565b94506125d483612578565b925060208a019950506001810190506125b0565b50829750879550505050505092915050565b600060208201905081810360008301526126148184612585565b905092915050565b6000806040838503121561263357612632612320565b5b600083013567ffffffffffffffff81111561265157612650612325565b5b61265d85828601612442565b925050602083013567ffffffffffffffff81111561267e5761267d612325565b5b61268a85828601612442565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006126bf82612694565b9050919050565b6126cf816126b4565b81146126da57600080fd5b50565b6000813590506126ec816126c6565b92915050565b60008060006060848603121561270b5761270a612320565b5b6000612719868287016126dd565b935050602084013567ffffffffffffffff81111561273a57612739612325565b5b61274686828701612442565b925050604084013567ffffffffffffffff81111561276757612766612325565b5b61277386828701612442565b9150509250925092565b60008115159050919050565b6127928161277d565b82525050565b60006020820190506127ad6000830184612789565b92915050565b600082825260208201905092915050565b60006127cf826124e5565b6127d981856127b3565b93506127e9818560208601612501565b6127f281612334565b840191505092915050565b6000602082019050818103600083015261281781846127c4565b905092915050565b612828816122e2565b811461283357600080fd5b50565b6000813590506128458161281f565b92915050565b60008060006060848603121561286457612863612320565b5b600061287286828701612836565b935050602084013567ffffffffffffffff81111561289357612892612325565b5b61289f86828701612442565b925050604084013567ffffffffffffffff8111156128c0576128bf612325565b5b6128cc86828701612442565b9150509250925092565b6000806000606084860312156128ef576128ee612320565b5b600084013567ffffffffffffffff81111561290d5761290c612325565b5b61291986828701612442565b935050602084013567ffffffffffffffff81111561293a57612939612325565b5b61294686828701612442565b925050604061295786828701612836565b9150509250925092565b600060029050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b600061299982612961565b6129a3818561296c565b9350836020820285016129b585612977565b8060005b858110156129f157848403895281516129d28582612564565b94506129dd83612981565b925060208a019950506001810190506129b9565b50829750879550505050505092915050565b60006020820190508181036000830152612a1d818461298e565b905092915050565b600060208284031215612a3b57612a3a612320565b5b6000612a4984828501612836565b91505092915050565b612a5b816126b4565b82525050565b60006080820190508181036000830152612a7b81876127c4565b90508181036020830152612a8f81866127c4565b9050612a9e6040830185612a52565b8181036060830152612ab081846127c4565b905095945050505050565b60008060408385031215612ad257612ad1612320565b5b600083013567ffffffffffffffff811115612af057612aef612325565b5b612afc85828601612442565b9250506020612b0d85828601612836565b9150509250929050565b600080600060608486031215612b3057612b2f612320565b5b600084013567ffffffffffffffff811115612b4e57612b4d612325565b5b612b5a86828701612442565b935050602084013567ffffffffffffffff811115612b7b57612b7a612325565b5b612b8786828701612442565b925050604084013567ffffffffffffffff811115612ba857612ba7612325565b5b612bb486828701612442565b9150509250925092565b60008060008060808587031215612bd857612bd7612320565b5b600085013567ffffffffffffffff811115612bf657612bf5612325565b5b612c0287828801612442565b945050602085013567ffffffffffffffff811115612c2357612c22612325565b5b612c2f87828801612442565b9350506040612c40878288016126dd565b925050606085013567ffffffffffffffff811115612c6157612c60612325565b5b612c6d87828801612442565b91505092959194509250565b600080600080600060a08688031215612c9557612c94612320565b5b600086013567ffffffffffffffff811115612cb357612cb2612325565b5b612cbf88828901612442565b955050602086013567ffffffffffffffff811115612ce057612cdf612325565b5b612cec88828901612442565b945050604086013567ffffffffffffffff811115612d0d57612d0c612325565b5b612d1988828901612442565b935050606086013567ffffffffffffffff811115612d3a57612d39612325565b5b612d4688828901612442565b925050608086013567ffffffffffffffff811115612d6757612d66612325565b5b612d7388828901612442565b9150509295509295909350565b7f6d5f000000000000000000000000000000000000000000000000000000000000815250565b600081905092915050565b6000612dbc826124e5565b612dc68185612da6565b9350612dd6818560208601612501565b80840191505092915050565b6000612ded82612d80565b600282019150612dfd8284612db1565b915081905092915050565b6000612e148284612db1565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612e9557607f821691505b602082108103612ea857612ea7612e4e565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b60008154612edb81612e7d565b612ee58186612eae565b94506001821660008114612f005760018114612f1557612f48565b60ff1983168652811515820286019350612f48565b612f1e85612eb9565b60005b83811015612f4057815481890152600182019150602081019050612f21565b838801955050505b50505092915050565b6000612f5d8284612ece565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612fa2826122e2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612fd457612fd3612f68565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026130417fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613004565b61304b8683613004565b95508019841693508086168417925050509392505050565b6000819050919050565b600061308861308361307e846122e2565b613063565b6122e2565b9050919050565b6000819050919050565b6130a28361306d565b6130b66130ae8261308f565b848454613011565b825550505050565b600090565b6130cb6130be565b6130d6818484613099565b505050565b5b818110156130fa576130ef6000826130c3565b6001810190506130dc565b5050565b601f82111561313f5761311081612fdf565b61311984612ff4565b81016020851015613128578190505b61313c61313485612ff4565b8301826130db565b50505b505050565b600082821c905092915050565b600061316260001984600802613144565b1980831691505092915050565b600061317b8383613151565b9150826002028217905092915050565b613194826124e5565b67ffffffffffffffff8111156131ad576131ac612345565b5b6131b78254612e7d565b6131c28282856130fe565b600060209050601f8311600181146131f557600084156131e3578287015190505b6131ed858261316f565b865550613255565b601f19841661320386612fdf565b60005b8281101561322b57848901518255600182019150602085019450602081019050613206565b868310156132485784890151613244601f891682613151565b8355505b6001600288020188555050505b505050505050565b600060ff82169050919050565b60006132758261325d565b91506132808361325d565b9250828203905060ff81111561329957613298612f68565b5b92915050565b60006132aa826122e2565b91506132b5836122e2565b92508282039050818111156132cd576132cc612f68565b5b92915050565b60008160011c9050919050565b6000808291508390505b600185111561332a5780860481111561330657613305612f68565b5b60018516156133155780820291505b8081029050613323856132d3565b94506132ea565b94509492505050565b60008261334357600190506133ff565b8161335157600090506133ff565b81600181146133675760028114613371576133a0565b60019150506133ff565b60ff84111561338357613382612f68565b5b8360020a91508482111561339a57613399612f68565b5b506133ff565b5060208310610133831016604e8410600b84101617156133d55782820a9050838111156133d0576133cf612f68565b5b6133ff565b6133e284848460016132e0565b925090508184048111156133f9576133f8612f68565b5b81810290505b9392505050565b6000613411826122e2565b915061341c836122e2565b92506134497fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613333565b905092915050565b600061345c826122e2565b9150613467836122e2565b9250828202613475816122e2565b9150828204841483151761348c5761348b612f68565b5b5092915050565b600061349e826122e2565b91506134a9836122e2565b92508282019050808211156134c1576134c0612f68565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220449cdc079e5cde619269038b64f9ef031827eac756e1b33fa63e4205514e557764736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c806370881e721161010f578063bfee6f8e116100a2578063d45fc51611610071578063d45fc51614610676578063df6b96c7146106a6578063eacb4a74146106c2578063f7e34095146106f2576101f0565b8063bfee6f8e146105de578063c5ef3ec5146105fa578063ce65e7481461062a578063d0fb869914610646576101f0565b80638c2715b7116100de5780638c2715b714610532578063932a196b14610562578063a42a665c14610592578063b91e924f146105c2576101f0565b806370881e7214610495578063783db260146104c85780637ab4ab6e146104f85780637eadfa6a14610514576101f0565b80633358f45b116101875780635555fe17116101565780635555fe17146103d55780635f08c6b5146104055780636beee9d7146104355780636ebb4d8714610465576101f0565b80633358f45b1461033d5780634cf12d261461036d5780635457bbf91461039d578063545fa9ec146103b9576101f0565b8063282e5e81116101c3578063282e5e81146102915780632a0d0373146102ad5780632bde1581146102dd578063304b16db1461030d576101f0565b8063144cbca6146101f557806318160ddd146102135780631e65e1171461023157806325c11f7414610261575b600080fd5b6101fd61070e565b60405161020a91906122fb565b60405180910390f35b61021b610714565b60405161022891906122fb565b60405180910390f35b61024b60048036038101906102469190612470565b61071d565b60405161025891906125fa565b60405180910390f35b61027b60048036038101906102769190612470565b6109d5565b60405161028891906125fa565b60405180910390f35b6102ab60048036038101906102a6919061261c565b610b5a565b005b6102c760048036038101906102c29190612470565b610b8a565b6040516102d491906125fa565b60405180910390f35b6102f760048036038101906102f291906126f2565b610d0f565b60405161030491906122fb565b60405180910390f35b61032760048036038101906103229190612470565b610d8c565b60405161033491906122fb565b60405180910390f35b61035760048036038101906103529190612470565b610e40565b6040516103649190612798565b60405180910390f35b61038760048036038101906103829190612470565b610e76565b60405161039491906127fd565b60405180910390f35b6103b760048036038101906103b2919061284b565b610f26565b005b6103d360048036038101906103ce9190612470565b610f82565b005b6103ef60048036038101906103ea91906128d6565b610fbc565b6040516103fc91906122fb565b60405180910390f35b61041f600480360381019061041a9190612470565b611091565b60405161042c91906127fd565b60405180910390f35b61044f600480360381019061044a9190612470565b611141565b60405161045c91906127fd565b60405180910390f35b61047f600480360381019061047a9190612470565b6111eb565b60405161048c9190612a03565b60405180910390f35b6104af60048036038101906104aa9190612a25565b6112d6565b6040516104bf9493929190612a61565b60405180910390f35b6104e260048036038101906104dd919061261c565b6114be565b6040516104ef91906122fb565b60405180910390f35b610512600480360381019061050d919061261c565b61156d565b005b61051c61159d565b60405161052991906122fb565b60405180910390f35b61054c60048036038101906105479190612abb565b6115a7565b60405161055991906127fd565b60405180910390f35b61057c60048036038101906105779190612470565b61166d565b60405161058991906122fb565b60405180910390f35b6105ac60048036038101906105a79190612470565b61170d565b6040516105b991906127fd565b60405180910390f35b6105dc60048036038101906105d7919061284b565b6117bd565b005b6105f860048036038101906105f39190612b17565b611819565b005b610614600480360381019061060f9190612470565b611860565b60405161062191906122fb565b60405180910390f35b610644600480360381019061063f9190612bbe565b611973565b005b610660600480360381019061065b9190612470565b611ba5565b60405161066d91906125fa565b60405180910390f35b610690600480360381019061068b9190612470565b611d2a565b60405161069d91906122fb565b60405180910390f35b6106c060048036038101906106bb919061261c565b611dca565b005b6106dc60048036038101906106d79190612470565b611dfa565b6040516106e991906127fd565b60405180910390f35b61070c60048036038101906107079190612c79565b611ebe565b005b60065481565b60008054905090565b606060008060005b6002548110156107cc578480519060200120600e61074283611fcd565b6040516020016107529190612de2565b60405160208183030381529060405260405161076e9190612e08565b908152602001604051809103902060006002811061078f5761078e612e1f565b5b0160405161079d9190612f51565b6040518091039020036107b95782806107b590612f97565b9350505b80806107c490612f97565b915050610725565b5060008267ffffffffffffffff8111156107e9576107e8612345565b5b60405190808252806020026020018201604052801561081c57816020015b60608152602001906001900390816108075790505b50905060005b6002548110156109c9578580519060200120600e61083f83611fcd565b60405160200161084f9190612de2565b60405160208183030381529060405260405161086b9190612e08565b908152602001604051809103902060006002811061088c5761088b612e1f565b5b0160405161089a9190612f51565b6040518091039020036109b657600e6108b282611fcd565b6040516020016108c29190612de2565b6040516020818303038152906040526040516108de9190612e08565b90815260200160405180910390206001600281106108ff576108fe612e1f565b5b01805461090b90612e7d565b80601f016020809104026020016040519081016040528092919081815260200182805461093790612e7d565b80156109845780601f1061095957610100808354040283529160200191610984565b820191906000526020600020905b81548152906001019060200180831161096757829003601f168201915b505050505082848151811061099c5761099b612e1f565b5b602002602001018190525082806109b290612f97565b9350505b80806109c190612f97565b915050610822565b50809350505050919050565b60606000600a67ffffffffffffffff8111156109f4576109f3612345565b5b604051908082528060200260200182016040528015610a2757816020015b6060815260200190600190039081610a125790505b5090506000805b600454811015610b4f57848051906020012060096000838152602001908152602001600020600001604051610a639190612f51565b604051809103902003610b3c57600960008281526020019081526020016000206001018054610a9190612e7d565b80601f0160208091040260200160405190810160405280929190818152602001828054610abd90612e7d565b8015610b0a5780601f10610adf57610100808354040283529160200191610b0a565b820191906000526020600020905b815481529060010190602001808311610aed57829003601f168201915b5050505050838381518110610b2257610b21612e1f565b5b60200260200101819052508180610b3890612f97565b9250505b8080610b4790612f97565b915050610a2e565b508192505050919050565b80600f83604051610b6b9190612e08565b90815260200160405180910390209081610b85919061318b565b505050565b60606000600a67ffffffffffffffff811115610ba957610ba8612345565b5b604051908082528060200260200182016040528015610bdc57816020015b6060815260200190600190039081610bc75790505b5090506000805b600454811015610d0457848051906020012060096000838152602001908152602001600020600001604051610c189190612f51565b604051809103902003610cf157600960008281526020019081526020016000206001018054610c4690612e7d565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7290612e7d565b8015610cbf5780601f10610c9457610100808354040283529160200191610cbf565b820191906000526020600020905b815481529060010190602001808311610ca257829003601f168201915b5050505050838381518110610cd757610cd6612e1f565b5b60200260200101819052508180610ced90612f97565b9250505b8080610cfc90612f97565b915050610be3565b508192505050919050565b6000610d44610d1f600054611fcd565b604051602001610d2f9190612de2565b6040516020818303038152906040528461156d565b610d5160035483856117bd565b600080815480929190610d6390612f97565b919050555060036000815480929190610d7b90612f97565b919050555060005490509392505050565b600080600090505b600254811015610e35578280519060200120600e610db183611fcd565b604051602001610dc19190612de2565b604051602081830303815290604052604051610ddd9190612e08565b9081526020016040518091039020600160028110610dfe57610dfd612e1f565b5b01604051610e0c9190612f51565b604051809103902003610e225780915050610e3b565b8080610e2d90612f97565b915050610d94565b50600090505b919050565b6007818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b6060600d82604051610e889190612e08565b90815260200160405180910390208054610ea190612e7d565b80601f0160208091040260200160405190810160405280929190818152602001828054610ecd90612e7d565b8015610f1a5780601f10610eef57610100808354040283529160200191610f1a565b820191906000526020600020905b815481529060010190602001808311610efd57829003601f168201915b50505050509050919050565b604051806040016040528083815260200182815250600960008581526020019081526020016000206000820151816000019081610f63919061318b565b506020820151816001019081610f79919061318b565b50905050505050565b6001600782604051610f949190612e08565b908152602001604051809103902060006101000a81548160ff02191690831515021790555050565b600080610fca600254611fcd565b604051602001610fda9190612de2565b6040516020818303038152906040529050610ff6818686611819565b611035816040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250610b5a565b60006007826040516110479190612e08565b908152602001604051809103902060006101000a81548160ff0219169083151502179055506002600081548092919061107f90612f97565b91905055506002549150509392505050565b6060600c826040516110a39190612e08565b908152602001604051809103902080546110bc90612e7d565b80601f01602080910402602001604051908101604052809291908181526020018280546110e890612e7d565b80156111355780601f1061110a57610100808354040283529160200191611135565b820191906000526020600020905b81548152906001019060200180831161111857829003601f168201915b50505050509050919050565b606060005b6005548110156111ac578280519060200120600a600083815260200190815260200160002060000160405161117b9190612f51565b6040518091039020036111995761119181611fcd565b9150506111e6565b80806111a490612f97565b915050611146565b506040518060400160405280600281526020017f2d3100000000000000000000000000000000000000000000000000000000000081525090505b919050565b6111f36121ee565b600e826040516112039190612e08565b9081526020016040518091039020600280602002604051908101604052809291906000905b828210156112cb57838201805461123e90612e7d565b80601f016020809104026020016040519081016040528092919081815260200182805461126a90612e7d565b80156112b75780601f1061128c576101008083540402835291602001916112b7565b820191906000526020600020905b81548152906001019060200180831161129a57829003601f168201915b505050505081526020019060010190611228565b505050509050919050565b600a6020528060005260406000206000915090508060000180546112f990612e7d565b80601f016020809104026020016040519081016040528092919081815260200182805461132590612e7d565b80156113725780601f1061134757610100808354040283529160200191611372565b820191906000526020600020905b81548152906001019060200180831161135557829003601f168201915b50505050509080600101805461138790612e7d565b80601f01602080910402602001604051908101604052809291908181526020018280546113b390612e7d565b80156114005780601f106113d557610100808354040283529160200191611400565b820191906000526020600020905b8154815290600101906020018083116113e357829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600301805461143b90612e7d565b80601f016020809104026020016040519081016040528092919081815260200182805461146790612e7d565b80156114b45780601f10611489576101008083540402835291602001916114b4565b820191906000526020600020905b81548152906001019060200180831161149757829003601f168201915b5050505050905084565b600080600090505b600354811015611561578380519060200120600860008381526020019081526020016000206000016040516114fb9190612f51565b604051809103902014801561154057508280519060200120600860008381526020019081526020016000206001016040516115369190612f51565b6040518091039020145b1561154e5780915050611567565b808061155990612f97565b9150506114c6565b50600090505b92915050565b80600d8360405161157e9190612e08565b90815260200160405180910390209081611598919061318b565b505050565b6000600254905090565b600b8280516020810182018051848252602083016020850120818352809550505050505081600281106115d957600080fd5b016000915091505080546115ec90612e7d565b80601f016020809104026020016040519081016040528092919081815260200182805461161890612e7d565b80156116655780601f1061163a57610100808354040283529160200191611665565b820191906000526020600020905b81548152906001019060200180831161164857829003601f168201915b505050505081565b600080600090505b600054811015611702578280519060200120600d61169283611fcd565b6040516020016116a29190612de2565b6040516020818303038152906040526040516116be9190612e08565b90815260200160405180910390206040516116d99190612f51565b6040518091039020036116ef5780915050611708565b80806116fa90612f97565b915050611675565b50600090505b919050565b6060600f8260405161171f9190612e08565b9081526020016040518091039020805461173890612e7d565b80601f016020809104026020016040519081016040528092919081815260200182805461176490612e7d565b80156117b15780601f10611786576101008083540402835291602001916117b1565b820191906000526020600020905b81548152906001019060200180831161179457829003601f168201915b50505050509050919050565b6040518060400160405280838152602001828152506008600085815260200190815260200160002060008201518160000190816117fa919061318b565b506020820151816001019081611810919061318b565b50905050505050565b604051806040016040528083815260200182815250600e8460405161183e9190612e08565b908152602001604051809103902090600261185a929190612215565b50505050565b600080600090505b825181101561196c576000603084838151811061188857611887612e1f565b5b602001015160f81c60f81b60f81c6118a0919061326a565b60ff1610806118de5750600960308483815181106118c1576118c0612e1f565b5b602001015160f81c60f81b60f81c6118d9919061326a565b60ff16115b156118ed57600091505061196e565b60018184516118fc919061329f565b611906919061329f565b600a6119129190613406565b603084838151811061192757611926612e1f565b5b602001015160f81c60f81b60f81c61193f919061326a565b60ff1661194c9190613451565b826119579190613493565b9150808061196490612f97565b915050611868565b505b919050565b600061197e85611141565b90506040518060400160405280600281526020017f2d3100000000000000000000000000000000000000000000000000000000000081525080519060200120818051906020012014611aad5760405180608001604052808681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815250600a6000611a0e84611860565b81526020019081526020016000206000820151816000019081611a31919061318b565b506020820151816001019081611a47919061318b565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003019081611aa4919061318b565b50905050611b9e565b60405180608001604052808681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815250600a600060055481526020019081526020016000206000820151816000019081611b0e919061318b565b506020820151816001019081611b24919061318b565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003019081611b81919061318b565b5090505060056000815480929190611b9890612f97565b91905055505b5050505050565b60606000600a67ffffffffffffffff811115611bc457611bc3612345565b5b604051908082528060200260200182016040528015611bf757816020015b6060815260200190600190039081611be25790505b5090506000805b600354811015611d1f57848051906020012060086000838152602001908152602001600020600001604051611c339190612f51565b604051809103902003611d0c57600860008281526020019081526020016000206001018054611c6190612e7d565b80601f0160208091040260200160405190810160405280929190818152602001828054611c8d90612e7d565b8015611cda5780601f10611caf57610100808354040283529160200191611cda565b820191906000526020600020905b815481529060010190602001808311611cbd57829003601f168201915b5050505050838381518110611cf257611cf1612e1f565b5b60200260200101819052508180611d0890612f97565b9250505b8080611d1790612f97565b915050611bfe565b508192505050919050565b600080600090505b600154811015611dbf578280519060200120600c611d4f83611fcd565b604051602001611d5f9190612de2565b604051602081830303815290604052604051611d7b9190612e08565b9081526020016040518091039020604051611d969190612f51565b604051809103902003611dac5780915050611dc5565b8080611db790612f97565b915050611d32565b50600090505b919050565b80600c83604051611ddb9190612e08565b90815260200160405180910390209081611df5919061318b565b505050565b6060600b82604051611e0c9190612e08565b9081526020016040518091039020600060028110611e2d57611e2c612e1f565b5b018054611e3990612e7d565b80601f0160208091040260200160405190810160405280929190818152602001828054611e6590612e7d565b8015611eb25780601f10611e8757610100808354040283529160200191611eb2565b820191906000526020600020905b815481529060010190602001808311611e9557829003601f168201915b50505050509050919050565b6000611f7084600d88604051611ed49190612e08565b90815260200160405180910390208054611eed90612e7d565b80601f0160208091040260200160405190810160405280929190818152602001828054611f1990612e7d565b8015611f665780601f10611f3b57610100808354040283529160200191611f66565b820191906000526020600020905b815481529060010190602001808311611f4957829003601f168201915b50505050506114be565b9050611f7e86853385611973565b611f888484610b5a565b611f956004548787610f26565b60046000815480929190611fa890612f97565b919050555060016000815480929190611fc090612f97565b9190505550505050505050565b606060006001611fdc8461209b565b01905060008167ffffffffffffffff811115611ffb57611ffa612345565b5b6040519080825280601f01601f19166020018201604052801561202d5781602001600182028036833780820191505090505b509050600082602001820190505b600115612090578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612084576120836134c7565b5b0494506000850361203b575b819350505050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106120f9577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816120ef576120ee6134c7565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612136576d04ee2d6d415b85acef8100000000838161212c5761212b6134c7565b5b0492506020810190505b662386f26fc10000831061216557662386f26fc10000838161215b5761215a6134c7565b5b0492506010810190505b6305f5e100831061218e576305f5e1008381612184576121836134c7565b5b0492506008810190505b61271083106121b35761271083816121a9576121a86134c7565b5b0492506004810190505b606483106121d657606483816121cc576121cb6134c7565b5b0492506002810190505b600a83106121e5576001810190505b80915050919050565b60405180604001604052806002905b60608152602001906001900390816121fd5790505090565b8260028101928215612250579160200282015b8281111561224f57825182908161223f919061318b565b5091602001919060010190612228565b5b50905061225d9190612261565b5090565b5b8082111561228157600081816122789190612285565b50600101612262565b5090565b50805461229190612e7d565b6000825580601f106122a357506122c2565b601f0160209004906000526020600020908101906122c191906122c5565b5b50565b5b808211156122de5760008160009055506001016122c6565b5090565b6000819050919050565b6122f5816122e2565b82525050565b600060208201905061231060008301846122ec565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61237d82612334565b810181811067ffffffffffffffff8211171561239c5761239b612345565b5b80604052505050565b60006123af612316565b90506123bb8282612374565b919050565b600067ffffffffffffffff8211156123db576123da612345565b5b6123e482612334565b9050602081019050919050565b82818337600083830152505050565b600061241361240e846123c0565b6123a5565b90508281526020810184848401111561242f5761242e61232f565b5b61243a8482856123f1565b509392505050565b600082601f8301126124575761245661232a565b5b8135612467848260208601612400565b91505092915050565b60006020828403121561248657612485612320565b5b600082013567ffffffffffffffff8111156124a4576124a3612325565b5b6124b084828501612442565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561251f578082015181840152602081019050612504565b60008484015250505050565b6000612536826124e5565b61254081856124f0565b9350612550818560208601612501565b61255981612334565b840191505092915050565b6000612570838361252b565b905092915050565b6000602082019050919050565b6000612590826124b9565b61259a81856124c4565b9350836020820285016125ac856124d5565b8060005b858110156125e857848403895281516125c98582612564565b94506125d483612578565b925060208a019950506001810190506125b0565b50829750879550505050505092915050565b600060208201905081810360008301526126148184612585565b905092915050565b6000806040838503121561263357612632612320565b5b600083013567ffffffffffffffff81111561265157612650612325565b5b61265d85828601612442565b925050602083013567ffffffffffffffff81111561267e5761267d612325565b5b61268a85828601612442565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006126bf82612694565b9050919050565b6126cf816126b4565b81146126da57600080fd5b50565b6000813590506126ec816126c6565b92915050565b60008060006060848603121561270b5761270a612320565b5b6000612719868287016126dd565b935050602084013567ffffffffffffffff81111561273a57612739612325565b5b61274686828701612442565b925050604084013567ffffffffffffffff81111561276757612766612325565b5b61277386828701612442565b9150509250925092565b60008115159050919050565b6127928161277d565b82525050565b60006020820190506127ad6000830184612789565b92915050565b600082825260208201905092915050565b60006127cf826124e5565b6127d981856127b3565b93506127e9818560208601612501565b6127f281612334565b840191505092915050565b6000602082019050818103600083015261281781846127c4565b905092915050565b612828816122e2565b811461283357600080fd5b50565b6000813590506128458161281f565b92915050565b60008060006060848603121561286457612863612320565b5b600061287286828701612836565b935050602084013567ffffffffffffffff81111561289357612892612325565b5b61289f86828701612442565b925050604084013567ffffffffffffffff8111156128c0576128bf612325565b5b6128cc86828701612442565b9150509250925092565b6000806000606084860312156128ef576128ee612320565b5b600084013567ffffffffffffffff81111561290d5761290c612325565b5b61291986828701612442565b935050602084013567ffffffffffffffff81111561293a57612939612325565b5b61294686828701612442565b925050604061295786828701612836565b9150509250925092565b600060029050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b600061299982612961565b6129a3818561296c565b9350836020820285016129b585612977565b8060005b858110156129f157848403895281516129d28582612564565b94506129dd83612981565b925060208a019950506001810190506129b9565b50829750879550505050505092915050565b60006020820190508181036000830152612a1d818461298e565b905092915050565b600060208284031215612a3b57612a3a612320565b5b6000612a4984828501612836565b91505092915050565b612a5b816126b4565b82525050565b60006080820190508181036000830152612a7b81876127c4565b90508181036020830152612a8f81866127c4565b9050612a9e6040830185612a52565b8181036060830152612ab081846127c4565b905095945050505050565b60008060408385031215612ad257612ad1612320565b5b600083013567ffffffffffffffff811115612af057612aef612325565b5b612afc85828601612442565b9250506020612b0d85828601612836565b9150509250929050565b600080600060608486031215612b3057612b2f612320565b5b600084013567ffffffffffffffff811115612b4e57612b4d612325565b5b612b5a86828701612442565b935050602084013567ffffffffffffffff811115612b7b57612b7a612325565b5b612b8786828701612442565b925050604084013567ffffffffffffffff811115612ba857612ba7612325565b5b612bb486828701612442565b9150509250925092565b60008060008060808587031215612bd857612bd7612320565b5b600085013567ffffffffffffffff811115612bf657612bf5612325565b5b612c0287828801612442565b945050602085013567ffffffffffffffff811115612c2357612c22612325565b5b612c2f87828801612442565b9350506040612c40878288016126dd565b925050606085013567ffffffffffffffff811115612c6157612c60612325565b5b612c6d87828801612442565b91505092959194509250565b600080600080600060a08688031215612c9557612c94612320565b5b600086013567ffffffffffffffff811115612cb357612cb2612325565b5b612cbf88828901612442565b955050602086013567ffffffffffffffff811115612ce057612cdf612325565b5b612cec88828901612442565b945050604086013567ffffffffffffffff811115612d0d57612d0c612325565b5b612d1988828901612442565b935050606086013567ffffffffffffffff811115612d3a57612d39612325565b5b612d4688828901612442565b925050608086013567ffffffffffffffff811115612d6757612d66612325565b5b612d7388828901612442565b9150509295509295909350565b7f6d5f000000000000000000000000000000000000000000000000000000000000815250565b600081905092915050565b6000612dbc826124e5565b612dc68185612da6565b9350612dd6818560208601612501565b80840191505092915050565b6000612ded82612d80565b600282019150612dfd8284612db1565b915081905092915050565b6000612e148284612db1565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612e9557607f821691505b602082108103612ea857612ea7612e4e565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b60008154612edb81612e7d565b612ee58186612eae565b94506001821660008114612f005760018114612f1557612f48565b60ff1983168652811515820286019350612f48565b612f1e85612eb9565b60005b83811015612f4057815481890152600182019150602081019050612f21565b838801955050505b50505092915050565b6000612f5d8284612ece565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612fa2826122e2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612fd457612fd3612f68565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026130417fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613004565b61304b8683613004565b95508019841693508086168417925050509392505050565b6000819050919050565b600061308861308361307e846122e2565b613063565b6122e2565b9050919050565b6000819050919050565b6130a28361306d565b6130b66130ae8261308f565b848454613011565b825550505050565b600090565b6130cb6130be565b6130d6818484613099565b505050565b5b818110156130fa576130ef6000826130c3565b6001810190506130dc565b5050565b601f82111561313f5761311081612fdf565b61311984612ff4565b81016020851015613128578190505b61313c61313485612ff4565b8301826130db565b50505b505050565b600082821c905092915050565b600061316260001984600802613144565b1980831691505092915050565b600061317b8383613151565b9150826002028217905092915050565b613194826124e5565b67ffffffffffffffff8111156131ad576131ac612345565b5b6131b78254612e7d565b6131c28282856130fe565b600060209050601f8311600181146131f557600084156131e3578287015190505b6131ed858261316f565b865550613255565b601f19841661320386612fdf565b60005b8281101561322b57848901518255600182019150602085019450602081019050613206565b868310156132485784890151613244601f891682613151565b8355505b6001600288020188555050505b505050505050565b600060ff82169050919050565b60006132758261325d565b91506132808361325d565b9250828203905060ff81111561329957613298612f68565b5b92915050565b60006132aa826122e2565b91506132b5836122e2565b92508282039050818111156132cd576132cc612f68565b5b92915050565b60008160011c9050919050565b6000808291508390505b600185111561332a5780860481111561330657613305612f68565b5b60018516156133155780820291505b8081029050613323856132d3565b94506132ea565b94509492505050565b60008261334357600190506133ff565b8161335157600090506133ff565b81600181146133675760028114613371576133a0565b60019150506133ff565b60ff84111561338357613382612f68565b5b8360020a91508482111561339a57613399612f68565b5b506133ff565b5060208310610133831016604e8410600b84101617156133d55782820a9050838111156133d0576133cf612f68565b5b6133ff565b6133e284848460016132e0565b925090508184048111156133f9576133f8612f68565b5b81810290505b9392505050565b6000613411826122e2565b915061341c836122e2565b92506134497fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613333565b905092915050565b600061345c826122e2565b9150613467836122e2565b9250828202613475816122e2565b9150828204841483151761348c5761348b612f68565b5b5092915050565b600061349e826122e2565b91506134a9836122e2565b92508282019050808211156134c1576134c0612f68565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220449cdc079e5cde619269038b64f9ef031827eac756e1b33fa63e4205514e557764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1231,
        "contract": "contracts/PolkaGift.sol:PolkaGift",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1233,
        "contract": "contracts/PolkaGift.sol:PolkaGift",
        "label": "_bidIds",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1235,
        "contract": "contracts/PolkaGift.sol:PolkaGift",
        "label": "_eventIds",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1237,
        "contract": "contracts/PolkaGift.sol:PolkaGift",
        "label": "_EventTokenIds",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1239,
        "contract": "contracts/PolkaGift.sol:PolkaGift",
        "label": "_TokenBidIds",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1241,
        "contract": "contracts/PolkaGift.sol:PolkaGift",
        "label": "_TokenHighestBidIds",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1243,
        "contract": "contracts/PolkaGift.sol:PolkaGift",
        "label": "_EventTokenSearchIds",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1247,
        "contract": "contracts/PolkaGift.sol:PolkaGift",
        "label": "AllEventEndTime",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 1252,
        "contract": "contracts/PolkaGift.sol:PolkaGift",
        "label": "AllEventTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(event_token_struct)1222_storage)"
      },
      {
        "astId": 1257,
        "contract": "contracts/PolkaGift.sol:PolkaGift",
        "label": "AllTokensBids",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(token_bid_struct)1229_storage)"
      },
      {
        "astId": 1262,
        "contract": "contracts/PolkaGift.sol:PolkaGift",
        "label": "TokenHighestBidders",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(highest_bidder_struct)1215_storage)"
      },
      {
        "astId": 1268,
        "contract": "contracts/PolkaGift.sol:PolkaGift",
        "label": "_SearchedStore",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1272,
        "contract": "contracts/PolkaGift.sol:PolkaGift",
        "label": "_bidURIs",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_string_memory_ptr,t_string_storage)"
      },
      {
        "astId": 1276,
        "contract": "contracts/PolkaGift.sol:PolkaGift",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_string_memory_ptr,t_string_storage)"
      },
      {
        "astId": 1282,
        "contract": "contracts/PolkaGift.sol:PolkaGift",
        "label": "_eventURIs",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1286,
        "contract": "contracts/PolkaGift.sol:PolkaGift",
        "label": "_eventRaised",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_string_memory_ptr,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)2_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[2]",
        "numberOfBytes": "64"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_string_storage)2_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)2_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(event_token_struct)1222_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PolkaGift.event_token_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(event_token_struct)1222_storage"
      },
      "t_mapping(t_uint256,t_struct(highest_bidder_struct)1215_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PolkaGift.highest_bidder_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(highest_bidder_struct)1215_storage"
      },
      "t_mapping(t_uint256,t_struct(token_bid_struct)1229_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PolkaGift.token_bid_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(token_bid_struct)1229_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(event_token_struct)1222_storage": {
        "encoding": "inplace",
        "label": "struct PolkaGift.event_token_struct",
        "members": [
          {
            "astId": 1218,
            "contract": "contracts/PolkaGift.sol:PolkaGift",
            "label": "event_id",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1221,
            "contract": "contracts/PolkaGift.sol:PolkaGift",
            "label": "token_uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(highest_bidder_struct)1215_storage": {
        "encoding": "inplace",
        "label": "struct PolkaGift.highest_bidder_struct",
        "members": [
          {
            "astId": 1205,
            "contract": "contracts/PolkaGift.sol:PolkaGift",
            "label": "token_id",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1208,
            "contract": "contracts/PolkaGift.sol:PolkaGift",
            "label": "event_id",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1211,
            "contract": "contracts/PolkaGift.sol:PolkaGift",
            "label": "wallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1214,
            "contract": "contracts/PolkaGift.sol:PolkaGift",
            "label": "price",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(token_bid_struct)1229_storage": {
        "encoding": "inplace",
        "label": "struct PolkaGift.token_bid_struct",
        "members": [
          {
            "astId": 1225,
            "contract": "contracts/PolkaGift.sol:PolkaGift",
            "label": "token_id",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1228,
            "contract": "contracts/PolkaGift.sol:PolkaGift",
            "label": "bid_uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}