[package]
authors = ["PensiveFlix LAB"]
edition = "2021"
license = "Unlicense"
name = "pfx-node-runtime"
repository = "https://github.com/PensiveFlix/PensiveFlix"
version = "0.1.0"

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
# third-party dependencies
codec = { package = "parity-scale-codec", version = "3.6.1", default-features = false, features = [
	"derive",
	"max-encoded-len",
] }
scale-info = { workspace = true, default-features = false, features = ["derive", "serde"] }
static_assertions = { workspace = true }
log = { workspace = true }
serde_json = { workspace = true, features = ["alloc", "arbitrary_precision"] }

# pallet-asset-conversion: turn on "num-traits" feature
primitive-types = { workspace = true, features = ["codec", "num-traits", "scale-info"] }

# primitives
sp-authority-discovery = { workspace = true, features = ["serde"] }
sp-consensus-babe = { workspace = true }
sp-consensus-grandpa = { workspace = true, features = ["serde"] }
sp-block-builder = { workspace = true }
sp-genesis-builder = { workspace = true }
sp-inherents = { workspace = true }
sp-offchain = { workspace = true }
sp-core = { workspace = true, features = ["serde"] }
sp-std = { workspace = true }
sp-api = { workspace = true }
sp-runtime = { workspace = true, features = ["serde"] }
sp-staking = { workspace = true, features = ["serde"] }
sp-storage = { workspace = true }
sp-session = { workspace = true }
sp-transaction-pool = { workspace = true }
sp-version = { workspace = true, features = ["serde"] }
sp-io = { workspace = true }

# frame dependencies
frame-executive = { workspace = true }
frame-benchmarking = { workspace = true }
frame-support = { workspace = true, features = ["experimental", "tuples-96"] }
frame-system = { workspace = true }
frame-system-benchmarking = { workspace = true, optional = true }
frame-election-provider-support = { workspace = true }
frame-system-rpc-runtime-api = { workspace = true }
frame-try-runtime = { workspace = true, optional = true }
pallet-asset-conversion = { workspace = true }
pallet-asset-rate = { workspace = true }
pallet-assets = { workspace = true }
pallet-authority-discovery = { workspace = true }
pallet-authorship = { workspace = true }
pallet-babe = { workspace = true }
pallet-bags-list = { workspace = true }
pallet-balances = { workspace = true }
pallet-collective = { workspace = true }
pallet-contracts = { workspace = true }
pfx-pallet-evm-account-mapping = { workspace = true }
pallet-election-provider-multi-phase = { workspace = true }
pallet-election-provider-support-benchmarking = { workspace = true, optional = true }
pallet-elections-phragmen = { workspace = true }
pallet-fast-unstake = { workspace = true }
pallet-migrations = { workspace = true }
pallet-grandpa = { workspace = true }
pallet-im-online = { workspace = true }
pallet-indices = { workspace = true }
pallet-mmr = { workspace = true }
pallet-multisig = { workspace = true }
pallet-nfts = { workspace = true }
pallet-nfts-runtime-api = { workspace = true }
pallet-nomination-pools = { workspace = true }
pallet-nomination-pools-benchmarking = { workspace = true, optional = true }
pallet-nomination-pools-runtime-api = { workspace = true }
pallet-offences = { workspace = true }
pallet-offences-benchmarking = { workspace = true, optional = true }
pallet-preimage = { workspace = true }
pallet-proxy = { workspace = true }
pallet-insecure-randomness-collective-flip = { workspace = true }
pallet-session = { workspace = true, features = ["historical"] }
pallet-session-benchmarking = { workspace = true, optional = true }
pallet-state-trie-migration = { workspace = true }
pallet-scheduler = { workspace = true }
pallet-sudo = { workspace = true }
pallet-timestamp = { workspace = true }
pallet-treasury = { workspace = true }
pallet-staking = { workspace = true }
pallet-staking-reward-curve = { workspace = true }
pallet-utility = { workspace = true }
pallet-transaction-payment = { workspace = true }
pallet-transaction-payment-rpc-runtime-api = { workspace = true }
pallet-asset-conversion-tx-payment = { workspace = true }
pallet-asset-tx-payment = { workspace = true }
pallet-transaction-storage = { workspace = true }
pallet-parameters = { workspace = true }

# Frontier
fp-account = { workspace = true, features = ["serde"] }
fp-evm = { workspace = true, features = ["serde"] }
fp-rpc = { workspace = true }
fp-self-contained = { workspace = true, features = ["serde"] }
# Frontier FRAME
pallet-base-fee = { workspace = true }
pallet-dynamic-fee = { workspace = true }
pallet-ethereum = { workspace = true }
pallet-evm = { workspace = true }
pallet-evm-chain-id = { workspace = true }
pallet-evm-precompile-modexp = { workspace = true }
pallet-evm-precompile-sha3fips = { workspace = true }
pallet-evm-precompile-simple = { workspace = true }

# PFLX
pfx-node-primitives = { workspace = true }
pfx-types = { workspace = true }
pfx-pallet-mq ={ workspace = true }
pfx-pallet-mq-runtime-api = { workspace = true }
pfx-pallet-tee-worker = { workspace = true }

[build-dependencies]
substrate-wasm-builder = { workspace = true, optional = true }

[features]
default = ["std"]
with-tracing = ["frame-executive/with-tracing"]
std = [
	"codec/std",
	"frame-benchmarking/std",
	"frame-election-provider-support/std",
	"frame-executive/std",
	"frame-support/std",
	"frame-system-benchmarking?/std",
	"frame-system-rpc-runtime-api/std",
	"frame-system/std",
	"frame-try-runtime?/std",
	"log/std",	
	"pallet-asset-conversion-tx-payment/std",
	"pallet-asset-conversion/std",
	"pallet-asset-rate/std",
	"pallet-asset-tx-payment/std",
	"pallet-assets/std",
	"pallet-authority-discovery/std",
	"pallet-authorship/std",
	"pallet-babe/std",
	"pallet-bags-list/std",
	"pallet-balances/std",
	"pallet-collective/std",
	"pallet-contracts/std",
	"pfx-pallet-evm-account-mapping/std",
	"pallet-election-provider-multi-phase/std",
	"pallet-election-provider-support-benchmarking?/std",
	"pallet-elections-phragmen/std",
	"pallet-fast-unstake/std",
	"pallet-grandpa/std",
	"pallet-im-online/std",
	"pallet-indices/std",
	"pallet-insecure-randomness-collective-flip/std",
	"pallet-migrations/std",
	"pallet-mmr/std",
	"pallet-multisig/std",
	"pallet-nfts-runtime-api/std",
	"pallet-nfts/std",
	"pallet-nomination-pools-benchmarking?/std",
	"pallet-nomination-pools-runtime-api/std",
	"pallet-nomination-pools/std",
	"pallet-offences-benchmarking?/std",
	"pallet-offences/std",
	"pallet-parameters/std",
	"pallet-preimage/std",
	"pallet-proxy/std",
	"pallet-scheduler/std",
	"pallet-session-benchmarking?/std",
	"pallet-session/std",
	"pallet-state-trie-migration/std",
	"pallet-sudo/std",
	"pallet-timestamp/std",
	"pallet-transaction-payment-rpc-runtime-api/std",
	"pallet-transaction-payment/std",
	"pallet-transaction-storage/std",
	"pallet-treasury/std",
	"pallet-utility/std",
	"primitive-types/std",
	"scale-info/std",
	"serde_json/std",
	"sp-api/std",
	"sp-authority-discovery/std",
	"sp-block-builder/std",
	"sp-consensus-grandpa/std",
	"sp-core/std",
	"sp-genesis-builder/std",
	"sp-inherents/std",
	"sp-io/std",
	"sp-offchain/std",
	"sp-runtime/std",
	"sp-session/std",
	"sp-staking/std",
	"sp-std/std",
	"sp-storage/std",
	"sp-transaction-pool/std",
	"sp-version/std",
	"substrate-wasm-builder",
	# Frontier
	"fp-account/std",
	"fp-evm/std",
	"fp-rpc/std",
	"fp-self-contained/std",
	# Frontier FRAME
	"pallet-base-fee/std",
	"pallet-dynamic-fee/std",
	"pallet-ethereum/std",
	"pallet-evm/std",
	"pallet-evm-chain-id/std",
	"pallet-evm-precompile-modexp/std",
	"pallet-evm-precompile-sha3fips/std",
	"pallet-evm-precompile-simple/std",
	# PFLX
	"pfx-node-primitives/std",
	"pfx-types/std",
	"pfx-pallet-mq/std",
	"pfx-pallet-mq-runtime-api/std",
	"pfx-pallet-tee-worker/std",
]
runtime-benchmarks = [
	"frame-benchmarking/runtime-benchmarks",
	"frame-election-provider-support/runtime-benchmarks",
	"frame-support/runtime-benchmarks",
	"frame-system-benchmarking/runtime-benchmarks",
	"frame-system/runtime-benchmarks",
	"pallet-asset-conversion/runtime-benchmarks",
	"pallet-asset-rate/runtime-benchmarks",
	"pallet-asset-tx-payment/runtime-benchmarks",
	"pallet-assets/runtime-benchmarks",
	"pallet-babe/runtime-benchmarks",
	"pallet-bags-list/runtime-benchmarks",
	"pallet-balances/runtime-benchmarks",
	"pallet-collective/runtime-benchmarks",
	"pallet-contracts/runtime-benchmarks",
	"pallet-election-provider-multi-phase/runtime-benchmarks",
	"pallet-election-provider-support-benchmarking/runtime-benchmarks",
	"pallet-fast-unstake/runtime-benchmarks",
	"pallet-grandpa/runtime-benchmarks",
	"pallet-im-online/runtime-benchmarks",
	"pallet-indices/runtime-benchmarks",
	"pallet-migrations/runtime-benchmarks",
	"pallet-mmr/runtime-benchmarks",
	"pallet-multisig/runtime-benchmarks",
	"pallet-nfts/runtime-benchmarks",
	"pallet-nomination-pools-benchmarking/runtime-benchmarks",
	"pallet-nomination-pools/runtime-benchmarks",
	"pallet-offences-benchmarking/runtime-benchmarks",
	"pallet-offences/runtime-benchmarks",
	"pallet-parameters/runtime-benchmarks",
	"pallet-preimage/runtime-benchmarks",
	"pallet-proxy/runtime-benchmarks",
	"pallet-scheduler/runtime-benchmarks",
	"pallet-session-benchmarking/runtime-benchmarks",
	"pallet-state-trie-migration/runtime-benchmarks",
	"pallet-sudo/runtime-benchmarks",
	"pallet-timestamp/runtime-benchmarks",
	"pallet-transaction-storage/runtime-benchmarks",
	"pallet-treasury/runtime-benchmarks",
	"pallet-utility/runtime-benchmarks",
	"sp-runtime/runtime-benchmarks",
	"sp-staking/runtime-benchmarks",
	"pallet-ethereum/runtime-benchmarks",
	"pallet-evm/runtime-benchmarks",
	# PFLX
	"pfx-pallet-tee-worker/runtime-benchmarks",	
]
try-runtime = [
	"frame-election-provider-support/try-runtime",
	"frame-executive/try-runtime",
	"frame-support/try-runtime",
	"frame-system/try-runtime",
	"frame-try-runtime/try-runtime",
	"pallet-asset-conversion-tx-payment/try-runtime",
	"pallet-asset-conversion/try-runtime",
	"pallet-asset-rate/try-runtime",
	"pallet-asset-tx-payment/try-runtime",
	"pallet-assets/try-runtime",
	"pallet-authority-discovery/try-runtime",
	"pallet-authorship/try-runtime",
	"pallet-babe/try-runtime",
	"pallet-bags-list/try-runtime",
	"pallet-balances/try-runtime",
	"pallet-collective/try-runtime",
	"pallet-contracts/try-runtime",
	"pallet-election-provider-multi-phase/try-runtime",
	"pallet-fast-unstake/try-runtime",
	"pallet-grandpa/try-runtime",
	"pallet-im-online/try-runtime",
	"pallet-indices/try-runtime",
	"pallet-insecure-randomness-collective-flip/try-runtime",
	"pallet-migrations/try-runtime",
	"pallet-mmr/try-runtime",
	"pallet-multisig/try-runtime",
	"pallet-nfts/try-runtime",
	"pallet-nomination-pools/try-runtime",
	"pallet-offences/try-runtime",
	"pallet-parameters/try-runtime",
	"pallet-preimage/try-runtime",
	"pallet-proxy/try-runtime",
	"pallet-scheduler/try-runtime",
	"pallet-session/try-runtime",
	"pallet-state-trie-migration/try-runtime",
	"pallet-sudo/try-runtime",
	"pallet-timestamp/try-runtime",
	"pallet-transaction-payment/try-runtime",
	"pallet-transaction-storage/try-runtime",
	"pallet-treasury/try-runtime",
	"pallet-utility/try-runtime",
	"sp-runtime/try-runtime",
]
experimental = [
	"frame-support/experimental",
	"frame-system/experimental",
]

only-attestation = []
verify-pflixbin = []
