
//! Autogenerated weights for `pallet_nft_market`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-10-19, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Air.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/solochain-template-node
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_nft_market
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --output
// pallets/nft_market/src/weights.rs
// --template
// .maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_nft_market`.
pub trait WeightInfo {
	fn list_nft() -> Weight;
}

/// Weights for `pallet_nft_market` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `NftModule::NFTOwners` (r:1 w:0)
	/// Proof: `NftModule::NFTOwners` (`max_values`: None, `max_size`: Some(373), added: 2848, mode: `MaxEncodedLen`)
	/// Storage: `NftModule::OwnedNFTs` (r:1 w:0)
	/// Proof: `NftModule::OwnedNFTs` (`max_values`: None, `max_size`: Some(370050), added: 372525, mode: `MaxEncodedLen`)
	/// Storage: `NftMarketModule::Listings` (r:0 w:1)
	/// Proof: `NftMarketModule::Listings` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	fn list_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `223`
		//  Estimated: `373515`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(16_000_000, 373515)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `NftModule::NFTOwners` (r:1 w:0)
	/// Proof: `NftModule::NFTOwners` (`max_values`: None, `max_size`: Some(373), added: 2848, mode: `MaxEncodedLen`)
	/// Storage: `NftModule::OwnedNFTs` (r:1 w:0)
	/// Proof: `NftModule::OwnedNFTs` (`max_values`: None, `max_size`: Some(370050), added: 372525, mode: `MaxEncodedLen`)
	/// Storage: `NftMarketModule::Listings` (r:0 w:1)
	/// Proof: `NftMarketModule::Listings` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	fn list_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `223`
		//  Estimated: `373515`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(16_000_000, 373515)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}