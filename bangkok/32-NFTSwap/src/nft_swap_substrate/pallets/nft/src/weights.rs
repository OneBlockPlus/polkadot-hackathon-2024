
//! Autogenerated weights for `pallet_nft`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-10-18, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Air.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/solochain-template-node
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_nft
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --output
// pallets/nft/src/weights.rs
// --template
// .maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_nft`.
pub trait WeightInfo {
	fn create_collection() -> Weight;
	fn mint_nft() -> Weight;
	fn transfer_nft() -> Weight;
	fn merge_nfts() -> Weight;
	fn split_nft() -> Weight;
}

/// Weights for `pallet_nft` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `NftModule::NFTCollections` (r:1 w:1)
	/// Proof: `NftModule::NFTCollections` (`max_values`: None, `max_size`: Some(314), added: 2789, mode: `MaxEncodedLen`)
	/// Storage: `NftModule::NFTCollectionIds` (r:1 w:1)
	/// Proof: `NftModule::NFTCollectionIds` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
	fn create_collection() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `4687`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 4687)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `NftModule::NFTCollections` (r:1 w:1)
	/// Proof: `NftModule::NFTCollections` (`max_values`: None, `max_size`: Some(314), added: 2789, mode: `MaxEncodedLen`)
	/// Storage: `NftModule::OwnedNFTs` (r:1 w:1)
	/// Proof: `NftModule::OwnedNFTs` (`max_values`: None, `max_size`: Some(370050), added: 372525, mode: `MaxEncodedLen`)
	/// Storage: `NftModule::NFTOwners` (r:1 w:1)
	/// Proof: `NftModule::NFTOwners` (`max_values`: None, `max_size`: Some(373), added: 2848, mode: `MaxEncodedLen`)
	/// Storage: `NftModule::NFTDetails` (r:0 w:1)
	/// Proof: `NftModule::NFTDetails` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
	fn mint_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `121`
		//  Estimated: `373515`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(17_000_000, 373515)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `NftModule::NFTDetails` (r:1 w:0)
	/// Proof: `NftModule::NFTDetails` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
	/// Storage: `NftModule::OwnedNFTs` (r:1 w:1)
	/// Proof: `NftModule::OwnedNFTs` (`max_values`: None, `max_size`: Some(370050), added: 372525, mode: `MaxEncodedLen`)
	/// Storage: `NftModule::NFTOwners` (r:1 w:1)
	/// Proof: `NftModule::NFTOwners` (`max_values`: None, `max_size`: Some(373), added: 2848, mode: `MaxEncodedLen`)
	fn transfer_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `338`
		//  Estimated: `373515`
		// Minimum execution time: 21_000_000 picoseconds.
		Weight::from_parts(22_000_000, 373515)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `NftModule::NFTDetails` (r:2 w:2)
	/// Proof: `NftModule::NFTDetails` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
	/// Storage: `NftModule::NFTOwners` (r:2 w:0)
	/// Proof: `NftModule::NFTOwners` (`max_values`: None, `max_size`: Some(373), added: 2848, mode: `MaxEncodedLen`)
	fn merge_nfts() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `422`
		//  Estimated: `7356`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(26_000_000, 7356)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `NftModule::NFTDetails` (r:3 w:3)
	/// Proof: `NftModule::NFTDetails` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
	/// Storage: `NftModule::NFTOwners` (r:1 w:0)
	/// Proof: `NftModule::NFTOwners` (`max_values`: None, `max_size`: Some(373), added: 2848, mode: `MaxEncodedLen`)
	fn split_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `373`
		//  Estimated: `10539`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(20_000_000, 10539)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `NftModule::NFTCollections` (r:1 w:1)
	/// Proof: `NftModule::NFTCollections` (`max_values`: None, `max_size`: Some(314), added: 2789, mode: `MaxEncodedLen`)
	/// Storage: `NftModule::NFTCollectionIds` (r:1 w:1)
	/// Proof: `NftModule::NFTCollectionIds` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
	fn create_collection() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `4687`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 4687)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `NftModule::NFTCollections` (r:1 w:1)
	/// Proof: `NftModule::NFTCollections` (`max_values`: None, `max_size`: Some(314), added: 2789, mode: `MaxEncodedLen`)
	/// Storage: `NftModule::OwnedNFTs` (r:1 w:1)
	/// Proof: `NftModule::OwnedNFTs` (`max_values`: None, `max_size`: Some(370050), added: 372525, mode: `MaxEncodedLen`)
	/// Storage: `NftModule::NFTOwners` (r:1 w:1)
	/// Proof: `NftModule::NFTOwners` (`max_values`: None, `max_size`: Some(373), added: 2848, mode: `MaxEncodedLen`)
	/// Storage: `NftModule::NFTDetails` (r:0 w:1)
	/// Proof: `NftModule::NFTDetails` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
	fn mint_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `121`
		//  Estimated: `373515`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(17_000_000, 373515)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `NftModule::NFTDetails` (r:1 w:0)
	/// Proof: `NftModule::NFTDetails` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
	/// Storage: `NftModule::OwnedNFTs` (r:1 w:1)
	/// Proof: `NftModule::OwnedNFTs` (`max_values`: None, `max_size`: Some(370050), added: 372525, mode: `MaxEncodedLen`)
	/// Storage: `NftModule::NFTOwners` (r:1 w:1)
	/// Proof: `NftModule::NFTOwners` (`max_values`: None, `max_size`: Some(373), added: 2848, mode: `MaxEncodedLen`)
	fn transfer_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `338`
		//  Estimated: `373515`
		// Minimum execution time: 21_000_000 picoseconds.
		Weight::from_parts(22_000_000, 373515)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `NftModule::NFTDetails` (r:2 w:2)
	/// Proof: `NftModule::NFTDetails` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
	/// Storage: `NftModule::NFTOwners` (r:2 w:0)
	/// Proof: `NftModule::NFTOwners` (`max_values`: None, `max_size`: Some(373), added: 2848, mode: `MaxEncodedLen`)
	fn merge_nfts() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `422`
		//  Estimated: `7356`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(26_000_000, 7356)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `NftModule::NFTDetails` (r:3 w:3)
	/// Proof: `NftModule::NFTDetails` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
	/// Storage: `NftModule::NFTOwners` (r:1 w:0)
	/// Proof: `NftModule::NFTOwners` (`max_values`: None, `max_size`: Some(373), added: 2848, mode: `MaxEncodedLen`)
	fn split_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `373`
		//  Estimated: `10539`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(20_000_000, 10539)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
}