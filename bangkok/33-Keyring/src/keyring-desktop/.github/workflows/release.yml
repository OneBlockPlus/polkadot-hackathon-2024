name: Release
on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: read

jobs:
  build-wails:
    name: Build wails
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: windows/amd64
            output: keyring-wallet-windows.exe
          - os: macos-13
            platform: darwin/universal
            # wails bug, mac outputfile name not work
            output: Keyring\ Wallet
          - os: ubuntu-20.04
            platform: linux/amd64
            output: keyring-wallet-linux
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Replace Secrets
        uses: kaichaosun/ga-replace-string@v0.2.0
        with:
          old-string: "env:INFURA_API_TOKEN"
          new-string: ${{ secrets.INFURA_API_TOKEN }}
          file: "resources/registry.json"
      - name: Replace LBRY RPC Secret
        uses: kaichaosun/ga-replace-string@v0.2.0
        with:
          old-string: "env:LBRY_RPC_SECRET"
          new-string: ${{ secrets.LBRY_RPC_SECRET }}
          file: "resources/registry.json"
      - name: Replace WalletConnect projectId
        uses: kaichaosun/ga-replace-string@v0.2.0
        with:
          old-string: "env:WALLET_CONNECT_PROJECT_ID"
          new-string: ${{ secrets.WALLET_CONNECT_PROJECT_ID }}
          file: "resources/init.json"
      - name: Install libpcsclite
        if: matrix.platform == 'linux/amd64'
        run: sudo apt install libpcsclite-dev
      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: 18
      - run: npm install && npm run build
        working-directory: frontend
      - uses: dAppServer/wails-build-action@v2
        with:
          build-name: ${{ matrix.output }}
          build-platform: ${{ matrix.platform }}
          go-version: 1.20.x
          wails-version: v2.8.1
          package: false
      - name: MacOS download gon for code signing and app notarization
        if: runner.os == 'macOS'
        run: |
          brew unlink gon
          wget https://github.com/kaichaosun/gon/releases/download/v0.0.3/gon
          chmod +x ./gon
      - name: Import Code-Signing Certificates for macOS
        if: runner.os == 'macOS'
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          # The certificates in a PKCS12 file encoded as a base64 string
          p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
          # The password used to import the PKCS12 file.
          p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
      - name: Sign our macOS binary
        if: runner.os == 'macOS'
        env:
          AC_USERNAME: ${{ secrets.APPLE_USERNAME }}
          AC_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          AC_PROVIDER: ${{ secrets.APPLE_PROVIDER }}
        run: |
          echo "Signing Package"
          ./gon -log-level=info ./build/darwin/gon-sign.json
      - if: runner.os == 'macOS'
        shell: bash
        run: |
          rm -rf ./build/bin/${{ matrix.output }}.app

      - uses: actions/upload-artifact@v3
        with:
          name: target
          path: build/bin/*

  collect-release:
    name: Collect and release
    needs: [ build-wails ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: target
          path: target
      - run: ls -al target && ls -R target/
      - working-directory: target
        run: |
          rm -rf Keyring\ Wallet-amd64-installer.exe
          rm -rf Keyring\ Wallet.pkg
          rm -rf Keyring\ Wallet.app.zip
          touch version && echo "0.1.8" >> version
      - run: ls -al target && ls -R target/ && file target/
      - uses: actions/upload-artifact@v3
        with:
          name: target-release
          path: target/*
  
  github-release:
    name: Release to github
    needs: [ collect-release ]
    runs-on: ubuntu-latest
    environment: github
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: target-release
          path: target
      - run: ls -al target && ls -R target/ && file target/
      # release assets
      - uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: target/*
          prerelease: true
  storj-release:
    name: Release to storj
    needs: [ github-release ]
    runs-on: ubuntu-latest
    environment: storj
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: target-release
          path: target
      - run: ls -al target && ls -R target/ && file target/
      # upload to storj
      - uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --delete
        env:
          AWS_S3_ENDPOINT: ${{ secrets.AWS_S3_ENDPOINT }}
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SOURCE_DIR: target